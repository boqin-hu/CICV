// Generated by gencpp from file common_msgs/PoseQuaternion.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_POSEQUATERNION_H
#define COMMON_MSGS_MESSAGE_POSEQUATERNION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/Vector3WithCovariance.h>
#include <common_msgs/Quaternion.h>
#include <common_msgs/Vector3.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct PoseQuaternion_
{
  typedef PoseQuaternion_<ContainerAllocator> Type;

  PoseQuaternion_()
    : position()
    , quaternion()
    , rpy_covariance()  {
    }
  PoseQuaternion_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , quaternion(_alloc)
    , rpy_covariance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::common_msgs::Vector3WithCovariance_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::common_msgs::Quaternion_<ContainerAllocator>  _quaternion_type;
  _quaternion_type quaternion;

   typedef  ::common_msgs::Vector3_<ContainerAllocator>  _rpy_covariance_type;
  _rpy_covariance_type rpy_covariance;





  typedef boost::shared_ptr< ::common_msgs::PoseQuaternion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::PoseQuaternion_<ContainerAllocator> const> ConstPtr;

}; // struct PoseQuaternion_

typedef ::common_msgs::PoseQuaternion_<std::allocator<void> > PoseQuaternion;

typedef boost::shared_ptr< ::common_msgs::PoseQuaternion > PoseQuaternionPtr;
typedef boost::shared_ptr< ::common_msgs::PoseQuaternion const> PoseQuaternionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::PoseQuaternion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::PoseQuaternion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::PoseQuaternion_<ContainerAllocator1> & lhs, const ::common_msgs::PoseQuaternion_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.quaternion == rhs.quaternion &&
    lhs.rpy_covariance == rhs.rpy_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::PoseQuaternion_<ContainerAllocator1> & lhs, const ::common_msgs::PoseQuaternion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::PoseQuaternion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::PoseQuaternion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::PoseQuaternion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c198d5fc129720a7ae62198ae0b52dfa";
  }

  static const char* value(const ::common_msgs::PoseQuaternion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc198d5fc129720a7ULL;
  static const uint64_t static_value2 = 0xae62198ae0b52dfaULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/PoseQuaternion";
  }

  static const char* value(const ::common_msgs::PoseQuaternion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector3WithCovariance 	position\n"
"Quaternion 	quaternion\n"
"Vector3  rpy_covariance	\n"
"================================================================================\n"
"MSG: common_msgs/Vector3WithCovariance\n"
"UnsureVar 	x\n"
"UnsureVar 	y\n"
"UnsureVar 	z\n"
"================================================================================\n"
"MSG: common_msgs/UnsureVar\n"
"float64 	variable\n"
"float64 	var_std\n"
"================================================================================\n"
"MSG: common_msgs/Quaternion\n"
"float64 	x\n"
"float64 	y\n"
"float64 	z\n"
"float64 	w\n"
"================================================================================\n"
"MSG: common_msgs/Vector3\n"
"float64 	x\n"
"float64 	y\n"
"float64 	z\n"
;
  }

  static const char* value(const ::common_msgs::PoseQuaternion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.quaternion);
      stream.next(m.rpy_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseQuaternion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::PoseQuaternion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::PoseQuaternion_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::common_msgs::Vector3WithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "quaternion: ";
    s << std::endl;
    Printer< ::common_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quaternion);
    s << indent << "rpy_covariance: ";
    s << std::endl;
    Printer< ::common_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy_covariance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_POSEQUATERNION_H
