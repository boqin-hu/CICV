// Generated by gencpp from file msg_gen/SimOneSensorConfiguration.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_SIMONESENSORCONFIGURATION_H
#define MSG_GEN_MESSAGE_SIMONESENSORCONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct SimOneSensorConfiguration_
{
  typedef SimOneSensorConfiguration_<ContainerAllocator> Type;

  SimOneSensorConfiguration_()
    : index(0)
    , mainVehicle(0)
    , sensorId(0)
    , sensorType()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , hz(0)  {
    }
  SimOneSensorConfiguration_(const ContainerAllocator& _alloc)
    : index(0)
    , mainVehicle(0)
    , sensorId(0)
    , sensorType(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , hz(0)  {
  (void)_alloc;
    }



   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _mainVehicle_type;
  _mainVehicle_type mainVehicle;

   typedef int32_t _sensorId_type;
  _sensorId_type sensorId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensorType_type;
  _sensorType_type sensorType;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef int32_t _hz_type;
  _hz_type hz;





  typedef boost::shared_ptr< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> const> ConstPtr;

}; // struct SimOneSensorConfiguration_

typedef ::msg_gen::SimOneSensorConfiguration_<std::allocator<void> > SimOneSensorConfiguration;

typedef boost::shared_ptr< ::msg_gen::SimOneSensorConfiguration > SimOneSensorConfigurationPtr;
typedef boost::shared_ptr< ::msg_gen::SimOneSensorConfiguration const> SimOneSensorConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator1> & lhs, const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.mainVehicle == rhs.mainVehicle &&
    lhs.sensorId == rhs.sensorId &&
    lhs.sensorType == rhs.sensorType &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.hz == rhs.hz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator1> & lhs, const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be1ca3666ff5f314b963c37c2dfe4fb7";
  }

  static const char* value(const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe1ca3666ff5f314ULL;
  static const uint64_t static_value2 = 0xb963c37c2dfe4fb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/SimOneSensorConfiguration";
  }

  static const char* value(const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index\n"
"int32 mainVehicle\n"
"int32 sensorId\n"
"string sensorType\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"int32 hz\n"
;
  }

  static const char* value(const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.mainVehicle);
      stream.next(m.sensorId);
      stream.next(m.sensorType);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.hz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimOneSensorConfiguration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "mainVehicle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mainVehicle);
    s << indent << "sensorId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensorId);
    s << indent << "sensorType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensorType);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "hz: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_SIMONESENSORCONFIGURATION_H
