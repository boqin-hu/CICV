// Generated by gencpp from file msg_gen/esp_control.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_ESP_CONTROL_H
#define MSG_GEN_MESSAGE_ESP_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct esp_control_
{
  typedef esp_control_<ContainerAllocator> Type;

  esp_control_()
    : stopDistance(0)
    , velocityLimit(0.0)
    , steering(0.0)
    , steerTorque(0.0)
    , accel(0.0)
    , accelUpperLimit(0.0)
    , accelLowerLimit(0.0)
    , accelUpperComfLimit(0.0)
    , accelLowerComfLimit(0.0)
    , standStill(false)
    , driveOff(false)
    , brakeMode(0)
    , vlcShutdown(0)
    , gearMode(0)  {
    }
  esp_control_(const ContainerAllocator& _alloc)
    : stopDistance(0)
    , velocityLimit(0.0)
    , steering(0.0)
    , steerTorque(0.0)
    , accel(0.0)
    , accelUpperLimit(0.0)
    , accelLowerLimit(0.0)
    , accelUpperComfLimit(0.0)
    , accelLowerComfLimit(0.0)
    , standStill(false)
    , driveOff(false)
    , brakeMode(0)
    , vlcShutdown(0)
    , gearMode(0)  {
  (void)_alloc;
    }



   typedef int32_t _stopDistance_type;
  _stopDistance_type stopDistance;

   typedef double _velocityLimit_type;
  _velocityLimit_type velocityLimit;

   typedef double _steering_type;
  _steering_type steering;

   typedef double _steerTorque_type;
  _steerTorque_type steerTorque;

   typedef double _accel_type;
  _accel_type accel;

   typedef double _accelUpperLimit_type;
  _accelUpperLimit_type accelUpperLimit;

   typedef double _accelLowerLimit_type;
  _accelLowerLimit_type accelLowerLimit;

   typedef double _accelUpperComfLimit_type;
  _accelUpperComfLimit_type accelUpperComfLimit;

   typedef double _accelLowerComfLimit_type;
  _accelLowerComfLimit_type accelLowerComfLimit;

   typedef uint8_t _standStill_type;
  _standStill_type standStill;

   typedef uint8_t _driveOff_type;
  _driveOff_type driveOff;

   typedef int32_t _brakeMode_type;
  _brakeMode_type brakeMode;

   typedef int32_t _vlcShutdown_type;
  _vlcShutdown_type vlcShutdown;

   typedef int32_t _gearMode_type;
  _gearMode_type gearMode;





  typedef boost::shared_ptr< ::msg_gen::esp_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::esp_control_<ContainerAllocator> const> ConstPtr;

}; // struct esp_control_

typedef ::msg_gen::esp_control_<std::allocator<void> > esp_control;

typedef boost::shared_ptr< ::msg_gen::esp_control > esp_controlPtr;
typedef boost::shared_ptr< ::msg_gen::esp_control const> esp_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::esp_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::esp_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::esp_control_<ContainerAllocator1> & lhs, const ::msg_gen::esp_control_<ContainerAllocator2> & rhs)
{
  return lhs.stopDistance == rhs.stopDistance &&
    lhs.velocityLimit == rhs.velocityLimit &&
    lhs.steering == rhs.steering &&
    lhs.steerTorque == rhs.steerTorque &&
    lhs.accel == rhs.accel &&
    lhs.accelUpperLimit == rhs.accelUpperLimit &&
    lhs.accelLowerLimit == rhs.accelLowerLimit &&
    lhs.accelUpperComfLimit == rhs.accelUpperComfLimit &&
    lhs.accelLowerComfLimit == rhs.accelLowerComfLimit &&
    lhs.standStill == rhs.standStill &&
    lhs.driveOff == rhs.driveOff &&
    lhs.brakeMode == rhs.brakeMode &&
    lhs.vlcShutdown == rhs.vlcShutdown &&
    lhs.gearMode == rhs.gearMode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::esp_control_<ContainerAllocator1> & lhs, const ::msg_gen::esp_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::esp_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::esp_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::esp_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::esp_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::esp_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::esp_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::esp_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8ebacdda7ddad0f3e5e5fa426f65839";
  }

  static const char* value(const ::msg_gen::esp_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8ebacdda7ddad0fULL;
  static const uint64_t static_value2 = 0x3e5e5fa426f65839ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::esp_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/esp_control";
  }

  static const char* value(const ::msg_gen::esp_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::esp_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 stopDistance\n"
"float64 velocityLimit\n"
"float64 steering\n"
"float64 steerTorque\n"
"float64 accel\n"
"float64 accelUpperLimit\n"
"float64 accelLowerLimit\n"
"float64 accelUpperComfLimit\n"
"float64 accelLowerComfLimit\n"
"bool standStill\n"
"bool driveOff\n"
"int32 brakeMode\n"
"int32 vlcShutdown\n"
"int32 gearMode\n"
;
  }

  static const char* value(const ::msg_gen::esp_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::esp_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stopDistance);
      stream.next(m.velocityLimit);
      stream.next(m.steering);
      stream.next(m.steerTorque);
      stream.next(m.accel);
      stream.next(m.accelUpperLimit);
      stream.next(m.accelLowerLimit);
      stream.next(m.accelUpperComfLimit);
      stream.next(m.accelLowerComfLimit);
      stream.next(m.standStill);
      stream.next(m.driveOff);
      stream.next(m.brakeMode);
      stream.next(m.vlcShutdown);
      stream.next(m.gearMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct esp_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::esp_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::esp_control_<ContainerAllocator>& v)
  {
    s << indent << "stopDistance: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stopDistance);
    s << indent << "velocityLimit: ";
    Printer<double>::stream(s, indent + "  ", v.velocityLimit);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
    s << indent << "steerTorque: ";
    Printer<double>::stream(s, indent + "  ", v.steerTorque);
    s << indent << "accel: ";
    Printer<double>::stream(s, indent + "  ", v.accel);
    s << indent << "accelUpperLimit: ";
    Printer<double>::stream(s, indent + "  ", v.accelUpperLimit);
    s << indent << "accelLowerLimit: ";
    Printer<double>::stream(s, indent + "  ", v.accelLowerLimit);
    s << indent << "accelUpperComfLimit: ";
    Printer<double>::stream(s, indent + "  ", v.accelUpperComfLimit);
    s << indent << "accelLowerComfLimit: ";
    Printer<double>::stream(s, indent + "  ", v.accelLowerComfLimit);
    s << indent << "standStill: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.standStill);
    s << indent << "driveOff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driveOff);
    s << indent << "brakeMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brakeMode);
    s << indent << "vlcShutdown: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vlcShutdown);
    s << indent << "gearMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gearMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_ESP_CONTROL_H
