// Generated by gencpp from file msg_gen/caseinfo.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_CASEINFO_H
#define MSG_GEN_MESSAGE_CASEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct caseinfo_
{
  typedef caseinfo_<ContainerAllocator> Type;

  caseinfo_()
    : caseName()
    , caseId()
    , taskId()
    , essionId()  {
    }
  caseinfo_(const ContainerAllocator& _alloc)
    : caseName(_alloc)
    , caseId(_alloc)
    , taskId(_alloc)
    , essionId(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _caseName_type;
  _caseName_type caseName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _caseId_type;
  _caseId_type caseId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskId_type;
  _taskId_type taskId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _essionId_type;
  _essionId_type essionId;





  typedef boost::shared_ptr< ::msg_gen::caseinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::caseinfo_<ContainerAllocator> const> ConstPtr;

}; // struct caseinfo_

typedef ::msg_gen::caseinfo_<std::allocator<void> > caseinfo;

typedef boost::shared_ptr< ::msg_gen::caseinfo > caseinfoPtr;
typedef boost::shared_ptr< ::msg_gen::caseinfo const> caseinfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::caseinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::caseinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::caseinfo_<ContainerAllocator1> & lhs, const ::msg_gen::caseinfo_<ContainerAllocator2> & rhs)
{
  return lhs.caseName == rhs.caseName &&
    lhs.caseId == rhs.caseId &&
    lhs.taskId == rhs.taskId &&
    lhs.essionId == rhs.essionId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::caseinfo_<ContainerAllocator1> & lhs, const ::msg_gen::caseinfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::caseinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::caseinfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::caseinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::caseinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::caseinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::caseinfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::caseinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "449764752cd7336c8741becf6d231faa";
  }

  static const char* value(const ::msg_gen::caseinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x449764752cd7336cULL;
  static const uint64_t static_value2 = 0x8741becf6d231faaULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::caseinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/caseinfo";
  }

  static const char* value(const ::msg_gen::caseinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::caseinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string caseName\n"
"string caseId\n"
"string taskId\n"
"string essionId\n"
;
  }

  static const char* value(const ::msg_gen::caseinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::caseinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.caseName);
      stream.next(m.caseId);
      stream.next(m.taskId);
      stream.next(m.essionId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct caseinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::caseinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::caseinfo_<ContainerAllocator>& v)
  {
    s << indent << "caseName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.caseName);
    s << indent << "caseId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.caseId);
    s << indent << "taskId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskId);
    s << indent << "essionId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.essionId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_CASEINFO_H
