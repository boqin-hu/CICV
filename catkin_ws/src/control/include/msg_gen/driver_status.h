// Generated by gencpp from file msg_gen/driver_status.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_DRIVER_STATUS_H
#define MSG_GEN_MESSAGE_DRIVER_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_gen/SimOne_Driver_Status.h>

namespace msg_gen
{
template <class ContainerAllocator>
struct driver_status_
{
  typedef driver_status_<ContainerAllocator> Type;

  driver_status_()
    : driverStatus()  {
    }
  driver_status_(const ContainerAllocator& _alloc)
    : driverStatus(_alloc)  {
  (void)_alloc;
    }



   typedef  ::msg_gen::SimOne_Driver_Status_<ContainerAllocator>  _driverStatus_type;
  _driverStatus_type driverStatus;





  typedef boost::shared_ptr< ::msg_gen::driver_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::driver_status_<ContainerAllocator> const> ConstPtr;

}; // struct driver_status_

typedef ::msg_gen::driver_status_<std::allocator<void> > driver_status;

typedef boost::shared_ptr< ::msg_gen::driver_status > driver_statusPtr;
typedef boost::shared_ptr< ::msg_gen::driver_status const> driver_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::driver_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::driver_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::driver_status_<ContainerAllocator1> & lhs, const ::msg_gen::driver_status_<ContainerAllocator2> & rhs)
{
  return lhs.driverStatus == rhs.driverStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::driver_status_<ContainerAllocator1> & lhs, const ::msg_gen::driver_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::driver_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::driver_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::driver_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::driver_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::driver_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::driver_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::driver_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3566e4245276b3ae14e18949d8cba87e";
  }

  static const char* value(const ::msg_gen::driver_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3566e4245276b3aeULL;
  static const uint64_t static_value2 = 0x14e18949d8cba87eULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::driver_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/driver_status";
  }

  static const char* value(const ::msg_gen::driver_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::driver_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SimOne_Driver_Status driverStatus\n"
"================================================================================\n"
"MSG: msg_gen/SimOne_Driver_Status\n"
"uint8 ESimOne_Driver_Status_Unknown = 0\n"
"uint8 ESimOne_Driver_Status_Controlling = 1\n"
"uint8 ESimOne_Driver_Status_Disabled = 2\n"
"uint32 SimOne_Driver_Status\n"
;
  }

  static const char* value(const ::msg_gen::driver_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::driver_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.driverStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct driver_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::driver_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::driver_status_<ContainerAllocator>& v)
  {
    s << indent << "driverStatus: ";
    s << std::endl;
    Printer< ::msg_gen::SimOne_Driver_Status_<ContainerAllocator> >::stream(s, indent + "  ", v.driverStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_DRIVER_STATUS_H
