// Generated by gencpp from file msg_gen/mainvehicle_info.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_MAINVEHICLE_INFO_H
#define MSG_GEN_MESSAGE_MAINVEHICLE_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct mainvehicle_info_
{
  typedef mainvehicle_info_<ContainerAllocator> Type;

  mainvehicle_info_()
    : size(0)
    , id_list()
    , type_list()  {
    }
  mainvehicle_info_(const ContainerAllocator& _alloc)
    : size(0)
    , id_list(_alloc)
    , type_list(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _size_type;
  _size_type size;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_list_type;
  _id_list_type id_list;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _type_list_type;
  _type_list_type type_list;





  typedef boost::shared_ptr< ::msg_gen::mainvehicle_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::mainvehicle_info_<ContainerAllocator> const> ConstPtr;

}; // struct mainvehicle_info_

typedef ::msg_gen::mainvehicle_info_<std::allocator<void> > mainvehicle_info;

typedef boost::shared_ptr< ::msg_gen::mainvehicle_info > mainvehicle_infoPtr;
typedef boost::shared_ptr< ::msg_gen::mainvehicle_info const> mainvehicle_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::mainvehicle_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::mainvehicle_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::mainvehicle_info_<ContainerAllocator1> & lhs, const ::msg_gen::mainvehicle_info_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size &&
    lhs.id_list == rhs.id_list &&
    lhs.type_list == rhs.type_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::mainvehicle_info_<ContainerAllocator1> & lhs, const ::msg_gen::mainvehicle_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::mainvehicle_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::mainvehicle_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::mainvehicle_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bb0fd1b67838fc32b274ef1242a4322";
  }

  static const char* value(const ::msg_gen::mainvehicle_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bb0fd1b67838fc3ULL;
  static const uint64_t static_value2 = 0x2b274ef1242a4322ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/mainvehicle_info";
  }

  static const char* value(const ::msg_gen::mainvehicle_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 size\n"
"int32[] id_list\n"
"string[] type_list\n"
;
  }

  static const char* value(const ::msg_gen::mainvehicle_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.id_list);
      stream.next(m.type_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mainvehicle_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::mainvehicle_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::mainvehicle_info_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "id_list[]" << std::endl;
    for (size_t i = 0; i < v.id_list.size(); ++i)
    {
      s << indent << "  id_list[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id_list[i]);
    }
    s << indent << "type_list[]" << std::endl;
    for (size_t i = 0; i < v.type_list.size(); ++i)
    {
      s << indent << "  type_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_MAINVEHICLE_INFO_H
