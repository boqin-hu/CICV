// Generated by gencpp from file msg_gen/sensorconfigurations.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_SENSORCONFIGURATIONS_H
#define MSG_GEN_MESSAGE_SENSORCONFIGURATIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_gen/SimOneSensorConfiguration.h>

namespace msg_gen
{
template <class ContainerAllocator>
struct sensorconfigurations_
{
  typedef sensorconfigurations_<ContainerAllocator> Type;

  sensorconfigurations_()
    : dataSize(0)
    , data()  {
    }
  sensorconfigurations_(const ContainerAllocator& _alloc)
    : dataSize(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _dataSize_type;
  _dataSize_type dataSize;

   typedef std::vector< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::msg_gen::sensorconfigurations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::sensorconfigurations_<ContainerAllocator> const> ConstPtr;

}; // struct sensorconfigurations_

typedef ::msg_gen::sensorconfigurations_<std::allocator<void> > sensorconfigurations;

typedef boost::shared_ptr< ::msg_gen::sensorconfigurations > sensorconfigurationsPtr;
typedef boost::shared_ptr< ::msg_gen::sensorconfigurations const> sensorconfigurationsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::sensorconfigurations_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::sensorconfigurations_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::sensorconfigurations_<ContainerAllocator1> & lhs, const ::msg_gen::sensorconfigurations_<ContainerAllocator2> & rhs)
{
  return lhs.dataSize == rhs.dataSize &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::sensorconfigurations_<ContainerAllocator1> & lhs, const ::msg_gen::sensorconfigurations_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::sensorconfigurations_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::sensorconfigurations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::sensorconfigurations_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f90d0248761da82fc8f3f120234a982";
  }

  static const char* value(const ::msg_gen::sensorconfigurations_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f90d0248761da82ULL;
  static const uint64_t static_value2 = 0xfc8f3f120234a982ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/sensorconfigurations";
  }

  static const char* value(const ::msg_gen::sensorconfigurations_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 dataSize\n"
"SimOneSensorConfiguration[] data\n"
"================================================================================\n"
"MSG: msg_gen/SimOneSensorConfiguration\n"
"int32 index\n"
"int32 mainVehicle\n"
"int32 sensorId\n"
"string sensorType\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"int32 hz\n"
;
  }

  static const char* value(const ::msg_gen::sensorconfigurations_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dataSize);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensorconfigurations_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::sensorconfigurations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::sensorconfigurations_<ContainerAllocator>& v)
  {
    s << indent << "dataSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dataSize);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msg_gen::SimOneSensorConfiguration_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_SENSORCONFIGURATIONS_H
