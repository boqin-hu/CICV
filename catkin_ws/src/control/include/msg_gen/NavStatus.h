// Generated by gencpp from file common_msgs/NavStatus.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_NAVSTATUS_H
#define COMMON_MSGS_MESSAGE_NAVSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct NavStatus_
{
  typedef NavStatus_<ContainerAllocator> Type;

  NavStatus_()
    : utc_time(0.0)
    , gps_status(0)
    , pos_status(0)
    , att_status(0)
    , init_status(0)
    , sate_num(0)
    , hdop(0.0)
    , pdop(0.0)
    , diff_age(0.0)  {
    }
  NavStatus_(const ContainerAllocator& _alloc)
    : utc_time(0.0)
    , gps_status(0)
    , pos_status(0)
    , att_status(0)
    , init_status(0)
    , sate_num(0)
    , hdop(0.0)
    , pdop(0.0)
    , diff_age(0.0)  {
  (void)_alloc;
    }



   typedef double _utc_time_type;
  _utc_time_type utc_time;

   typedef int8_t _gps_status_type;
  _gps_status_type gps_status;

   typedef int32_t _pos_status_type;
  _pos_status_type pos_status;

   typedef int32_t _att_status_type;
  _att_status_type att_status;

   typedef int32_t _init_status_type;
  _init_status_type init_status;

   typedef int32_t _sate_num_type;
  _sate_num_type sate_num;

   typedef float _hdop_type;
  _hdop_type hdop;

   typedef float _pdop_type;
  _pdop_type pdop;

   typedef float _diff_age_type;
  _diff_age_type diff_age;





  typedef boost::shared_ptr< ::common_msgs::NavStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::NavStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NavStatus_

typedef ::common_msgs::NavStatus_<std::allocator<void> > NavStatus;

typedef boost::shared_ptr< ::common_msgs::NavStatus > NavStatusPtr;
typedef boost::shared_ptr< ::common_msgs::NavStatus const> NavStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::NavStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::NavStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::NavStatus_<ContainerAllocator1> & lhs, const ::common_msgs::NavStatus_<ContainerAllocator2> & rhs)
{
  return lhs.utc_time == rhs.utc_time &&
    lhs.gps_status == rhs.gps_status &&
    lhs.pos_status == rhs.pos_status &&
    lhs.att_status == rhs.att_status &&
    lhs.init_status == rhs.init_status &&
    lhs.sate_num == rhs.sate_num &&
    lhs.hdop == rhs.hdop &&
    lhs.pdop == rhs.pdop &&
    lhs.diff_age == rhs.diff_age;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::NavStatus_<ContainerAllocator1> & lhs, const ::common_msgs::NavStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::NavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::NavStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::NavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::NavStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::NavStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::NavStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66cf32030c6e7f18df10ff34df97d9cc";
  }

  static const char* value(const ::common_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66cf32030c6e7f18ULL;
  static const uint64_t static_value2 = 0xdf10ff34df97d9ccULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/NavStatus";
  }

  static const char* value(const ::common_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 	utc_time\n"
"int8 	gps_status # 0-nofix  1-single  2-psrdiff  3-code_diff  4-narrow_init  5-narrow_float\n"
"int32 	pos_status\n"
"int32  	att_status\n"
"int32  	init_status\n"
"int32  	sate_num\n"
"float32  	hdop\n"
"float32  	pdop\n"
"float32  	diff_age\n"
;
  }

  static const char* value(const ::common_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::NavStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.utc_time);
      stream.next(m.gps_status);
      stream.next(m.pos_status);
      stream.next(m.att_status);
      stream.next(m.init_status);
      stream.next(m.sate_num);
      stream.next(m.hdop);
      stream.next(m.pdop);
      stream.next(m.diff_age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::NavStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::NavStatus_<ContainerAllocator>& v)
  {
    s << indent << "utc_time: ";
    Printer<double>::stream(s, indent + "  ", v.utc_time);
    s << indent << "gps_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gps_status);
    s << indent << "pos_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pos_status);
    s << indent << "att_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.att_status);
    s << indent << "init_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.init_status);
    s << indent << "sate_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sate_num);
    s << indent << "hdop: ";
    Printer<float>::stream(s, indent + "  ", v.hdop);
    s << indent << "pdop: ";
    Printer<float>::stream(s, indent + "  ", v.pdop);
    s << indent << "diff_age: ";
    Printer<float>::stream(s, indent + "  ", v.diff_age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_NAVSTATUS_H
