// Generated by gencpp from file msg_gen/vehicle_eventinfo.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_VEHICLE_EVENTINFO_H
#define MSG_GEN_MESSAGE_VEHICLE_EVENTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_gen/ESimone_Vehicle_EventInfo_Type.h>

namespace msg_gen
{
template <class ContainerAllocator>
struct vehicle_eventinfo_
{
  typedef vehicle_eventinfo_<ContainerAllocator> Type;

  vehicle_eventinfo_()
    : type()  {
    }
  vehicle_eventinfo_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::msg_gen::ESimone_Vehicle_EventInfo_Type_<ContainerAllocator>  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> const> ConstPtr;

}; // struct vehicle_eventinfo_

typedef ::msg_gen::vehicle_eventinfo_<std::allocator<void> > vehicle_eventinfo;

typedef boost::shared_ptr< ::msg_gen::vehicle_eventinfo > vehicle_eventinfoPtr;
typedef boost::shared_ptr< ::msg_gen::vehicle_eventinfo const> vehicle_eventinfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::vehicle_eventinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::vehicle_eventinfo_<ContainerAllocator1> & lhs, const ::msg_gen::vehicle_eventinfo_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::vehicle_eventinfo_<ContainerAllocator1> & lhs, const ::msg_gen::vehicle_eventinfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9cf03805a8593d9e89c0ef75597ccf7f";
  }

  static const char* value(const ::msg_gen::vehicle_eventinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9cf03805a8593d9eULL;
  static const uint64_t static_value2 = 0x89c0ef75597ccf7fULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/vehicle_eventinfo";
  }

  static const char* value(const ::msg_gen::vehicle_eventinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ESimone_Vehicle_EventInfo_Type  type\n"
"================================================================================\n"
"MSG: msg_gen/ESimone_Vehicle_EventInfo_Type\n"
"uint8 ESimOne_VehicleEventInfo_Forward_Collision_Warning = 0\n"
"uint8 ESimOne_VehicleEventInfo_Backward_Collision_Warning = 1\n"
"uint8 ESimOne_VehicleEventInfo_Left_Turn_Decision = 2\n"
"uint8 ESimOne_VehicleEventInfo_Left_Turn_Warning = 3\n"
"uint8 ESimOne_VehicleEventInfo_Right_Turn_Decision = 4\n"
"uint8 ESimOne_VehicleEventInfo_Right_Turn_Warning = 5\n"
"uint8 ESimOne_VehicleEventInfo_Forward_Straight_Decision = 6\n"
"uint8 ESimOne_VehicleEventInfo_Forward_Straight_Warning = 7\n"
"uint8 ESimOne_VehicleEventInfo_Over_Speed_Warning = 8\n"
"uint8 ESimOne_VehicleEventInfo_Lane_Change_Decision = 9\n"
"uint8 ESimOne_VehicleEventInfo_Lane_Change_Warning = 10\n"
"uint8 ESimOne_VehicleEventInfo_Overtake_Decision = 11\n"
"uint8 ESimOne_VehicleEventInfo_Emergency_Braking_Decision = 12\n"
"uint8 ESimOne_VehicleEventInfo_Accelerate_Decision = 13\n"
"uint32 SimOne_VehicleEventInfo_Type\n"
"\n"
;
  }

  static const char* value(const ::msg_gen::vehicle_eventinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicle_eventinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::vehicle_eventinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::vehicle_eventinfo_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::msg_gen::ESimone_Vehicle_EventInfo_Type_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_VEHICLE_EVENTINFO_H
