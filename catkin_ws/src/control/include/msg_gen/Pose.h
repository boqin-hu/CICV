// Generated by gencpp from file common_msgs/Pose.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_POSE_H
#define COMMON_MSGS_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/PoseEuler.h>
#include <common_msgs/PoseQuaternion.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : pose_euler()
    , pose_quaternion()
    , status(0)  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : pose_euler(_alloc)
    , pose_quaternion(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::common_msgs::PoseEuler_<ContainerAllocator>  _pose_euler_type;
  _pose_euler_type pose_euler;

   typedef  ::common_msgs::PoseQuaternion_<ContainerAllocator>  _pose_quaternion_type;
  _pose_quaternion_type pose_quaternion;

   typedef int8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::common_msgs::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::common_msgs::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::common_msgs::Pose > PosePtr;
typedef boost::shared_ptr< ::common_msgs::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Pose_<ContainerAllocator1> & lhs, const ::common_msgs::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.pose_euler == rhs.pose_euler &&
    lhs.pose_quaternion == rhs.pose_quaternion &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Pose_<ContainerAllocator1> & lhs, const ::common_msgs::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "184ff128e0b5b9ac5cd314f5034d86b0";
  }

  static const char* value(const ::common_msgs::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x184ff128e0b5b9acULL;
  static const uint64_t static_value2 = 0x5cd314f5034d86b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Pose";
  }

  static const char* value(const ::common_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PoseEuler  	pose_euler\n"
"PoseQuaternion 	pose_quaternion\n"
"int8  	status   # 0-normal  1-error\n"
"================================================================================\n"
"MSG: common_msgs/PoseEuler\n"
"Vector3WithCovariance 	position\n"
"EulerWithCovariance 	rotation\n"
"================================================================================\n"
"MSG: common_msgs/Vector3WithCovariance\n"
"UnsureVar 	x\n"
"UnsureVar 	y\n"
"UnsureVar 	z\n"
"================================================================================\n"
"MSG: common_msgs/UnsureVar\n"
"float64 	variable\n"
"float64 	var_std\n"
"================================================================================\n"
"MSG: common_msgs/EulerWithCovariance\n"
"UnsureVar 	roll\n"
"UnsureVar 	pitch\n"
"UnsureVar 	yaw\n"
"================================================================================\n"
"MSG: common_msgs/PoseQuaternion\n"
"Vector3WithCovariance 	position\n"
"Quaternion 	quaternion\n"
"Vector3  rpy_covariance	\n"
"================================================================================\n"
"MSG: common_msgs/Quaternion\n"
"float64 	x\n"
"float64 	y\n"
"float64 	z\n"
"float64 	w\n"
"================================================================================\n"
"MSG: common_msgs/Vector3\n"
"float64 	x\n"
"float64 	y\n"
"float64 	z\n"
;
  }

  static const char* value(const ::common_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_euler);
      stream.next(m.pose_quaternion);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Pose_<ContainerAllocator>& v)
  {
    s << indent << "pose_euler: ";
    s << std::endl;
    Printer< ::common_msgs::PoseEuler_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_euler);
    s << indent << "pose_quaternion: ";
    s << std::endl;
    Printer< ::common_msgs::PoseQuaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_quaternion);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_POSE_H
