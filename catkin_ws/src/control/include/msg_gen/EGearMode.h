// Generated by gencpp from file msg_gen/EGearMode.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_EGEARMODE_H
#define MSG_GEN_MESSAGE_EGEARMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct EGearMode_
{
  typedef EGearMode_<ContainerAllocator> Type;

  EGearMode_()
    : GearMode(0)  {
    }
  EGearMode_(const ContainerAllocator& _alloc)
    : GearMode(0)  {
  (void)_alloc;
    }



   typedef uint32_t _GearMode_type;
  _GearMode_type GearMode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EGearMode_Neutral)
  #undef EGearMode_Neutral
#endif
#if defined(_WIN32) && defined(EGearMode_Drive)
  #undef EGearMode_Drive
#endif
#if defined(_WIN32) && defined(EGearMode_Reverse)
  #undef EGearMode_Reverse
#endif
#if defined(_WIN32) && defined(EGearMode_Parking)
  #undef EGearMode_Parking
#endif
#if defined(_WIN32) && defined(EGearManualMode_1)
  #undef EGearManualMode_1
#endif
#if defined(_WIN32) && defined(EGearManualMode_2)
  #undef EGearManualMode_2
#endif
#if defined(_WIN32) && defined(EGearManualMode_3)
  #undef EGearManualMode_3
#endif
#if defined(_WIN32) && defined(EGearManualMode_4)
  #undef EGearManualMode_4
#endif
#if defined(_WIN32) && defined(EGearManualMode_5)
  #undef EGearManualMode_5
#endif
#if defined(_WIN32) && defined(EGearManualMode_6)
  #undef EGearManualMode_6
#endif
#if defined(_WIN32) && defined(EGearManualMode_7)
  #undef EGearManualMode_7
#endif
#if defined(_WIN32) && defined(EGearManualMode_8)
  #undef EGearManualMode_8
#endif

  enum {
    EGearMode_Neutral = 0u,
    EGearMode_Drive = 1u,
    EGearMode_Reverse = 2u,
    EGearMode_Parking = 3u,
    EGearManualMode_1 = 4u,
    EGearManualMode_2 = 5u,
    EGearManualMode_3 = 6u,
    EGearManualMode_4 = 7u,
    EGearManualMode_5 = 8u,
    EGearManualMode_6 = 9u,
    EGearManualMode_7 = 10u,
    EGearManualMode_8 = 11u,
  };


  typedef boost::shared_ptr< ::msg_gen::EGearMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::EGearMode_<ContainerAllocator> const> ConstPtr;

}; // struct EGearMode_

typedef ::msg_gen::EGearMode_<std::allocator<void> > EGearMode;

typedef boost::shared_ptr< ::msg_gen::EGearMode > EGearModePtr;
typedef boost::shared_ptr< ::msg_gen::EGearMode const> EGearModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::EGearMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::EGearMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::EGearMode_<ContainerAllocator1> & lhs, const ::msg_gen::EGearMode_<ContainerAllocator2> & rhs)
{
  return lhs.GearMode == rhs.GearMode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::EGearMode_<ContainerAllocator1> & lhs, const ::msg_gen::EGearMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::EGearMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::EGearMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::EGearMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::EGearMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::EGearMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::EGearMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::EGearMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c0ad3873b32f47999acab9702219a08";
  }

  static const char* value(const ::msg_gen::EGearMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c0ad3873b32f479ULL;
  static const uint64_t static_value2 = 0x99acab9702219a08ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::EGearMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/EGearMode";
  }

  static const char* value(const ::msg_gen::EGearMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::EGearMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 EGearMode_Neutral = 0\n"
"uint8 EGearMode_Drive = 1\n"
"uint8 EGearMode_Reverse = 2\n"
"uint8 EGearMode_Parking = 3\n"
"uint8 EGearManualMode_1 = 4\n"
"uint8 EGearManualMode_2 = 5\n"
"uint8 EGearManualMode_3 = 6\n"
"uint8 EGearManualMode_4 = 7\n"
"uint8 EGearManualMode_5 = 8\n"
"uint8 EGearManualMode_6 = 9\n"
"uint8 EGearManualMode_7 = 10\n"
"uint8 EGearManualMode_8 = 11\n"
"uint32 GearMode\n"
;
  }

  static const char* value(const ::msg_gen::EGearMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::EGearMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.GearMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EGearMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::EGearMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::EGearMode_<ContainerAllocator>& v)
  {
    s << indent << "GearMode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.GearMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_EGEARMODE_H
