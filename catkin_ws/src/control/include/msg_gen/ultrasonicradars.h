// Generated by gencpp from file msg_gen/ultrasonicradars.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_ULTRASONICRADARS_H
#define MSG_GEN_MESSAGE_ULTRASONICRADARS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_gen/SimOne_Data_UltrasonicRadar.h>

namespace msg_gen
{
template <class ContainerAllocator>
struct ultrasonicradars_
{
  typedef ultrasonicradars_<ContainerAllocator> Type;

  ultrasonicradars_()
    : UltrasonicRadarsNum(0)
    , ultrasonicRadars()  {
    }
  ultrasonicradars_(const ContainerAllocator& _alloc)
    : UltrasonicRadarsNum(0)
    , ultrasonicRadars(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _UltrasonicRadarsNum_type;
  _UltrasonicRadarsNum_type UltrasonicRadarsNum;

   typedef std::vector< ::msg_gen::SimOne_Data_UltrasonicRadar_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msg_gen::SimOne_Data_UltrasonicRadar_<ContainerAllocator> >::other >  _ultrasonicRadars_type;
  _ultrasonicRadars_type ultrasonicRadars;





  typedef boost::shared_ptr< ::msg_gen::ultrasonicradars_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::ultrasonicradars_<ContainerAllocator> const> ConstPtr;

}; // struct ultrasonicradars_

typedef ::msg_gen::ultrasonicradars_<std::allocator<void> > ultrasonicradars;

typedef boost::shared_ptr< ::msg_gen::ultrasonicradars > ultrasonicradarsPtr;
typedef boost::shared_ptr< ::msg_gen::ultrasonicradars const> ultrasonicradarsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::ultrasonicradars_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::ultrasonicradars_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::ultrasonicradars_<ContainerAllocator1> & lhs, const ::msg_gen::ultrasonicradars_<ContainerAllocator2> & rhs)
{
  return lhs.UltrasonicRadarsNum == rhs.UltrasonicRadarsNum &&
    lhs.ultrasonicRadars == rhs.ultrasonicRadars;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::ultrasonicradars_<ContainerAllocator1> & lhs, const ::msg_gen::ultrasonicradars_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::ultrasonicradars_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::ultrasonicradars_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::ultrasonicradars_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd03e3f02c3858535753ea88cd0e8959";
  }

  static const char* value(const ::msg_gen::ultrasonicradars_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd03e3f02c385853ULL;
  static const uint64_t static_value2 = 0x5753ea88cd0e8959ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/ultrasonicradars";
  }

  static const char* value(const ::msg_gen::ultrasonicradars_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 UltrasonicRadarsNum\n"
"SimOne_Data_UltrasonicRadar[] ultrasonicRadars\n"
"================================================================================\n"
"MSG: msg_gen/SimOne_Data_UltrasonicRadar\n"
"int32 id\n"
"int32 obstacleNum\n"
"SimOne_Data_UltrasonicRadarDetection_Entry[] obstacledetections\n"
"================================================================================\n"
"MSG: msg_gen/SimOne_Data_UltrasonicRadarDetection_Entry\n"
"float64 obstacleRanges\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::msg_gen::ultrasonicradars_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.UltrasonicRadarsNum);
      stream.next(m.ultrasonicRadars);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ultrasonicradars_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::ultrasonicradars_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::ultrasonicradars_<ContainerAllocator>& v)
  {
    s << indent << "UltrasonicRadarsNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.UltrasonicRadarsNum);
    s << indent << "ultrasonicRadars[]" << std::endl;
    for (size_t i = 0; i < v.ultrasonicRadars.size(); ++i)
    {
      s << indent << "  ultrasonicRadars[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msg_gen::SimOne_Data_UltrasonicRadar_<ContainerAllocator> >::stream(s, indent + "    ", v.ultrasonicRadars[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_ULTRASONICRADARS_H
