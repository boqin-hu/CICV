// Generated by gencpp from file msg_gen/ESimOneLaneType.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_ESIMONELANETYPE_H
#define MSG_GEN_MESSAGE_ESIMONELANETYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct ESimOneLaneType_
{
  typedef ESimOneLaneType_<ContainerAllocator> Type;

  ESimOneLaneType_()
    : LaneType(0)  {
    }
  ESimOneLaneType_(const ContainerAllocator& _alloc)
    : LaneType(0)  {
  (void)_alloc;
    }



   typedef uint32_t _LaneType_type;
  _LaneType_type LaneType;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LaneType_none)
  #undef LaneType_none
#endif
#if defined(_WIN32) && defined(LaneType_driving)
  #undef LaneType_driving
#endif
#if defined(_WIN32) && defined(LaneType_stop)
  #undef LaneType_stop
#endif
#if defined(_WIN32) && defined(LaneType_shoulder)
  #undef LaneType_shoulder
#endif
#if defined(_WIN32) && defined(LaneType_biking)
  #undef LaneType_biking
#endif
#if defined(_WIN32) && defined(LaneType_sidewalk)
  #undef LaneType_sidewalk
#endif
#if defined(_WIN32) && defined(LaneType_border)
  #undef LaneType_border
#endif
#if defined(_WIN32) && defined(LaneType_restricted)
  #undef LaneType_restricted
#endif
#if defined(_WIN32) && defined(LaneType_parking)
  #undef LaneType_parking
#endif
#if defined(_WIN32) && defined(LaneType_bidirectional)
  #undef LaneType_bidirectional
#endif
#if defined(_WIN32) && defined(LaneType_median)
  #undef LaneType_median
#endif
#if defined(_WIN32) && defined(LaneType_special1)
  #undef LaneType_special1
#endif
#if defined(_WIN32) && defined(LaneType_special2)
  #undef LaneType_special2
#endif
#if defined(_WIN32) && defined(LaneType_special3)
  #undef LaneType_special3
#endif
#if defined(_WIN32) && defined(LaneType_roadWorks)
  #undef LaneType_roadWorks
#endif
#if defined(_WIN32) && defined(LaneType_tram)
  #undef LaneType_tram
#endif
#if defined(_WIN32) && defined(LaneType_rail)
  #undef LaneType_rail
#endif
#if defined(_WIN32) && defined(LaneType_entry)
  #undef LaneType_entry
#endif
#if defined(_WIN32) && defined(LaneType_exit)
  #undef LaneType_exit
#endif
#if defined(_WIN32) && defined(LaneType_offRamp)
  #undef LaneType_offRamp
#endif
#if defined(_WIN32) && defined(LaneType_onRamp)
  #undef LaneType_onRamp
#endif
#if defined(_WIN32) && defined(LaneType_mwyEntry)
  #undef LaneType_mwyEntry
#endif
#if defined(_WIN32) && defined(LaneType_mwyExit)
  #undef LaneType_mwyExit
#endif

  enum {
    LaneType_none = 0u,
    LaneType_driving = 1u,
    LaneType_stop = 2u,
    LaneType_shoulder = 3u,
    LaneType_biking = 4u,
    LaneType_sidewalk = 5u,
    LaneType_border = 6u,
    LaneType_restricted = 7u,
    LaneType_parking = 8u,
    LaneType_bidirectional = 9u,
    LaneType_median = 10u,
    LaneType_special1 = 11u,
    LaneType_special2 = 12u,
    LaneType_special3 = 13u,
    LaneType_roadWorks = 14u,
    LaneType_tram = 15u,
    LaneType_rail = 16u,
    LaneType_entry = 17u,
    LaneType_exit = 18u,
    LaneType_offRamp = 19u,
    LaneType_onRamp = 20u,
    LaneType_mwyEntry = 21u,
    LaneType_mwyExit = 22u,
  };


  typedef boost::shared_ptr< ::msg_gen::ESimOneLaneType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::ESimOneLaneType_<ContainerAllocator> const> ConstPtr;

}; // struct ESimOneLaneType_

typedef ::msg_gen::ESimOneLaneType_<std::allocator<void> > ESimOneLaneType;

typedef boost::shared_ptr< ::msg_gen::ESimOneLaneType > ESimOneLaneTypePtr;
typedef boost::shared_ptr< ::msg_gen::ESimOneLaneType const> ESimOneLaneTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::ESimOneLaneType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::ESimOneLaneType_<ContainerAllocator1> & lhs, const ::msg_gen::ESimOneLaneType_<ContainerAllocator2> & rhs)
{
  return lhs.LaneType == rhs.LaneType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::ESimOneLaneType_<ContainerAllocator1> & lhs, const ::msg_gen::ESimOneLaneType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::ESimOneLaneType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::ESimOneLaneType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::ESimOneLaneType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf5861066845fb1c70ff66639dcaf435";
  }

  static const char* value(const ::msg_gen::ESimOneLaneType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf5861066845fb1cULL;
  static const uint64_t static_value2 = 0x70ff66639dcaf435ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/ESimOneLaneType";
  }

  static const char* value(const ::msg_gen::ESimOneLaneType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 LaneType_none = 0\n"
"uint8 LaneType_driving = 1\n"
"uint8 LaneType_stop = 2\n"
"uint8 LaneType_shoulder = 3\n"
"uint8 LaneType_biking = 4\n"
"uint8 LaneType_sidewalk = 5\n"
"uint8 LaneType_border = 6\n"
"uint8 LaneType_restricted = 7\n"
"uint8 LaneType_parking = 8\n"
"uint8 LaneType_bidirectional = 9\n"
"uint8 LaneType_median = 10\n"
"uint8 LaneType_special1 = 11\n"
"uint8 LaneType_special2 = 12\n"
"uint8 LaneType_special3 = 13\n"
"uint8 LaneType_roadWorks = 14\n"
"uint8 LaneType_tram = 15\n"
"uint8 LaneType_rail = 16\n"
"uint8 LaneType_entry = 17\n"
"uint8 LaneType_exit = 18\n"
"uint8 LaneType_offRamp = 19\n"
"uint8 LaneType_onRamp = 20\n"
"uint8 LaneType_mwyEntry = 21\n"
"uint8 LaneType_mwyExit = 22\n"
"uint32 LaneType\n"
;
  }

  static const char* value(const ::msg_gen::ESimOneLaneType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LaneType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ESimOneLaneType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::ESimOneLaneType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::ESimOneLaneType_<ContainerAllocator>& v)
  {
    s << indent << "LaneType: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.LaneType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_ESIMONELANETYPE_H
