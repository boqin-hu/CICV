// Generated by gencpp from file common_msgs/PoseEuler.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_POSEEULER_H
#define COMMON_MSGS_MESSAGE_POSEEULER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/Vector3WithCovariance.h>
#include <common_msgs/EulerWithCovariance.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct PoseEuler_
{
  typedef PoseEuler_<ContainerAllocator> Type;

  PoseEuler_()
    : position()
    , rotation()  {
    }
  PoseEuler_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , rotation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::common_msgs::Vector3WithCovariance_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::common_msgs::EulerWithCovariance_<ContainerAllocator>  _rotation_type;
  _rotation_type rotation;





  typedef boost::shared_ptr< ::common_msgs::PoseEuler_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::PoseEuler_<ContainerAllocator> const> ConstPtr;

}; // struct PoseEuler_

typedef ::common_msgs::PoseEuler_<std::allocator<void> > PoseEuler;

typedef boost::shared_ptr< ::common_msgs::PoseEuler > PoseEulerPtr;
typedef boost::shared_ptr< ::common_msgs::PoseEuler const> PoseEulerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::PoseEuler_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::PoseEuler_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::PoseEuler_<ContainerAllocator1> & lhs, const ::common_msgs::PoseEuler_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.rotation == rhs.rotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::PoseEuler_<ContainerAllocator1> & lhs, const ::common_msgs::PoseEuler_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::PoseEuler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::PoseEuler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::PoseEuler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::PoseEuler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::PoseEuler_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::PoseEuler_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::PoseEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8f0dec34a7aced56ccf5b23f28c3a53";
  }

  static const char* value(const ::common_msgs::PoseEuler_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8f0dec34a7aced5ULL;
  static const uint64_t static_value2 = 0x6ccf5b23f28c3a53ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::PoseEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/PoseEuler";
  }

  static const char* value(const ::common_msgs::PoseEuler_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::PoseEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector3WithCovariance 	position\n"
"EulerWithCovariance 	rotation\n"
"================================================================================\n"
"MSG: common_msgs/Vector3WithCovariance\n"
"UnsureVar 	x\n"
"UnsureVar 	y\n"
"UnsureVar 	z\n"
"================================================================================\n"
"MSG: common_msgs/UnsureVar\n"
"float64 	variable\n"
"float64 	var_std\n"
"================================================================================\n"
"MSG: common_msgs/EulerWithCovariance\n"
"UnsureVar 	roll\n"
"UnsureVar 	pitch\n"
"UnsureVar 	yaw\n"
;
  }

  static const char* value(const ::common_msgs::PoseEuler_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::PoseEuler_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseEuler_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::PoseEuler_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::PoseEuler_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::common_msgs::Vector3WithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "rotation: ";
    s << std::endl;
    Printer< ::common_msgs::EulerWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_POSEEULER_H
