// Generated by gencpp from file common_msgs/SpeedStreer.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_SPEEDSTREER_H
#define COMMON_MSGS_MESSAGE_SPEEDSTREER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct SpeedStreer_
{
  typedef SpeedStreer_<ContainerAllocator> Type;

  SpeedStreer_()
    : header()
    , steer_axle_speed(0.0)
    , rel_speed_steer_axle_left(0.0)
    , rel_speed_steer_axle_right(0.0)
    , rel_speed_rear_axle_left(0.0)
    , rel_speed_rear_axle_right(0.0)
    , strg_angle_real_value(0.0)  {
    }
  SpeedStreer_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , steer_axle_speed(0.0)
    , rel_speed_steer_axle_left(0.0)
    , rel_speed_steer_axle_right(0.0)
    , rel_speed_rear_axle_left(0.0)
    , rel_speed_rear_axle_right(0.0)
    , strg_angle_real_value(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _steer_axle_speed_type;
  _steer_axle_speed_type steer_axle_speed;

   typedef double _rel_speed_steer_axle_left_type;
  _rel_speed_steer_axle_left_type rel_speed_steer_axle_left;

   typedef double _rel_speed_steer_axle_right_type;
  _rel_speed_steer_axle_right_type rel_speed_steer_axle_right;

   typedef double _rel_speed_rear_axle_left_type;
  _rel_speed_rear_axle_left_type rel_speed_rear_axle_left;

   typedef double _rel_speed_rear_axle_right_type;
  _rel_speed_rear_axle_right_type rel_speed_rear_axle_right;

   typedef double _strg_angle_real_value_type;
  _strg_angle_real_value_type strg_angle_real_value;





  typedef boost::shared_ptr< ::common_msgs::SpeedStreer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::SpeedStreer_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedStreer_

typedef ::common_msgs::SpeedStreer_<std::allocator<void> > SpeedStreer;

typedef boost::shared_ptr< ::common_msgs::SpeedStreer > SpeedStreerPtr;
typedef boost::shared_ptr< ::common_msgs::SpeedStreer const> SpeedStreerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::SpeedStreer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::SpeedStreer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::SpeedStreer_<ContainerAllocator1> & lhs, const ::common_msgs::SpeedStreer_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.steer_axle_speed == rhs.steer_axle_speed &&
    lhs.rel_speed_steer_axle_left == rhs.rel_speed_steer_axle_left &&
    lhs.rel_speed_steer_axle_right == rhs.rel_speed_steer_axle_right &&
    lhs.rel_speed_rear_axle_left == rhs.rel_speed_rear_axle_left &&
    lhs.rel_speed_rear_axle_right == rhs.rel_speed_rear_axle_right &&
    lhs.strg_angle_real_value == rhs.strg_angle_real_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::SpeedStreer_<ContainerAllocator1> & lhs, const ::common_msgs::SpeedStreer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::SpeedStreer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::SpeedStreer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::SpeedStreer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::SpeedStreer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::SpeedStreer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::SpeedStreer_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::SpeedStreer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c94e736ca7ece961afae4245f481d0e";
  }

  static const char* value(const ::common_msgs::SpeedStreer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c94e736ca7ece96ULL;
  static const uint64_t static_value2 = 0x1afae4245f481d0eULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::SpeedStreer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/SpeedStreer";
  }

  static const char* value(const ::common_msgs::SpeedStreer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::SpeedStreer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"float64  steer_axle_speed     # 前轴速度\n"
"float64   rel_speed_steer_axle_left     # 前左轮相对速度\n"
"float64   rel_speed_steer_axle_right     # 前右轮相对速度\n"
"float64   rel_speed_rear_axle_left      # 后左轮相对速度\n"
"float64   rel_speed_rear_axle_right     # 后左轮相对速度\n"
"float64  strg_angle_real_value # 方向盘实际转角（非必要）\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::common_msgs::SpeedStreer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::SpeedStreer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.steer_axle_speed);
      stream.next(m.rel_speed_steer_axle_left);
      stream.next(m.rel_speed_steer_axle_right);
      stream.next(m.rel_speed_rear_axle_left);
      stream.next(m.rel_speed_rear_axle_right);
      stream.next(m.strg_angle_real_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedStreer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::SpeedStreer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::SpeedStreer_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "steer_axle_speed: ";
    Printer<double>::stream(s, indent + "  ", v.steer_axle_speed);
    s << indent << "rel_speed_steer_axle_left: ";
    Printer<double>::stream(s, indent + "  ", v.rel_speed_steer_axle_left);
    s << indent << "rel_speed_steer_axle_right: ";
    Printer<double>::stream(s, indent + "  ", v.rel_speed_steer_axle_right);
    s << indent << "rel_speed_rear_axle_left: ";
    Printer<double>::stream(s, indent + "  ", v.rel_speed_rear_axle_left);
    s << indent << "rel_speed_rear_axle_right: ";
    Printer<double>::stream(s, indent + "  ", v.rel_speed_rear_axle_right);
    s << indent << "strg_angle_real_value: ";
    Printer<double>::stream(s, indent + "  ", v.strg_angle_real_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_SPEEDSTREER_H
