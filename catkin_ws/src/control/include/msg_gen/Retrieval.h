// Generated by gencpp from file common_msgs/Retrieval.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_RETRIEVAL_H
#define COMMON_MSGS_MESSAGE_RETRIEVAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct Retrieval_
{
  typedef Retrieval_<ContainerAllocator> Type;

  Retrieval_()
    : header()
    , AS_Veh_Acceleration_Value(0.0)
    , AS_Driver_TakeOver_Req(0)
    , VCU_Accel_Pos_Value(0.0)
    , VCU_BrkPel_Pos_Value(0.0)
    , VCU_Real_Speed(0.0)
    , VCU_Current_Gear(0)
    , VCU_Parking_St(0)
    , AutoD_Limitin_Reason(0)
    , Emergency_Stop_Reason(0)
    , VCU_Driver_TakeOver_Req(0)
    , VCU_Vehicle_Drive_Mode_St(0)
    , AutoD_Out_Reason(0)
    , Brak_Sys_Fault_St(0)
    , Strg_Angle_Real_Value(0.0)
    , Strg_Angle_Spd_Value(0.0)
    , Strg_WorkMode_St(0)  {
    }
  Retrieval_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , AS_Veh_Acceleration_Value(0.0)
    , AS_Driver_TakeOver_Req(0)
    , VCU_Accel_Pos_Value(0.0)
    , VCU_BrkPel_Pos_Value(0.0)
    , VCU_Real_Speed(0.0)
    , VCU_Current_Gear(0)
    , VCU_Parking_St(0)
    , AutoD_Limitin_Reason(0)
    , Emergency_Stop_Reason(0)
    , VCU_Driver_TakeOver_Req(0)
    , VCU_Vehicle_Drive_Mode_St(0)
    , AutoD_Out_Reason(0)
    , Brak_Sys_Fault_St(0)
    , Strg_Angle_Real_Value(0.0)
    , Strg_Angle_Spd_Value(0.0)
    , Strg_WorkMode_St(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _AS_Veh_Acceleration_Value_type;
  _AS_Veh_Acceleration_Value_type AS_Veh_Acceleration_Value;

   typedef int16_t _AS_Driver_TakeOver_Req_type;
  _AS_Driver_TakeOver_Req_type AS_Driver_TakeOver_Req;

   typedef double _VCU_Accel_Pos_Value_type;
  _VCU_Accel_Pos_Value_type VCU_Accel_Pos_Value;

   typedef double _VCU_BrkPel_Pos_Value_type;
  _VCU_BrkPel_Pos_Value_type VCU_BrkPel_Pos_Value;

   typedef double _VCU_Real_Speed_type;
  _VCU_Real_Speed_type VCU_Real_Speed;

   typedef int16_t _VCU_Current_Gear_type;
  _VCU_Current_Gear_type VCU_Current_Gear;

   typedef int16_t _VCU_Parking_St_type;
  _VCU_Parking_St_type VCU_Parking_St;

   typedef int16_t _AutoD_Limitin_Reason_type;
  _AutoD_Limitin_Reason_type AutoD_Limitin_Reason;

   typedef int16_t _Emergency_Stop_Reason_type;
  _Emergency_Stop_Reason_type Emergency_Stop_Reason;

   typedef int16_t _VCU_Driver_TakeOver_Req_type;
  _VCU_Driver_TakeOver_Req_type VCU_Driver_TakeOver_Req;

   typedef int16_t _VCU_Vehicle_Drive_Mode_St_type;
  _VCU_Vehicle_Drive_Mode_St_type VCU_Vehicle_Drive_Mode_St;

   typedef int16_t _AutoD_Out_Reason_type;
  _AutoD_Out_Reason_type AutoD_Out_Reason;

   typedef int16_t _Brak_Sys_Fault_St_type;
  _Brak_Sys_Fault_St_type Brak_Sys_Fault_St;

   typedef double _Strg_Angle_Real_Value_type;
  _Strg_Angle_Real_Value_type Strg_Angle_Real_Value;

   typedef double _Strg_Angle_Spd_Value_type;
  _Strg_Angle_Spd_Value_type Strg_Angle_Spd_Value;

   typedef int16_t _Strg_WorkMode_St_type;
  _Strg_WorkMode_St_type Strg_WorkMode_St;





  typedef boost::shared_ptr< ::common_msgs::Retrieval_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Retrieval_<ContainerAllocator> const> ConstPtr;

}; // struct Retrieval_

typedef ::common_msgs::Retrieval_<std::allocator<void> > Retrieval;

typedef boost::shared_ptr< ::common_msgs::Retrieval > RetrievalPtr;
typedef boost::shared_ptr< ::common_msgs::Retrieval const> RetrievalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Retrieval_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Retrieval_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Retrieval_<ContainerAllocator1> & lhs, const ::common_msgs::Retrieval_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.AS_Veh_Acceleration_Value == rhs.AS_Veh_Acceleration_Value &&
    lhs.AS_Driver_TakeOver_Req == rhs.AS_Driver_TakeOver_Req &&
    lhs.VCU_Accel_Pos_Value == rhs.VCU_Accel_Pos_Value &&
    lhs.VCU_BrkPel_Pos_Value == rhs.VCU_BrkPel_Pos_Value &&
    lhs.VCU_Real_Speed == rhs.VCU_Real_Speed &&
    lhs.VCU_Current_Gear == rhs.VCU_Current_Gear &&
    lhs.VCU_Parking_St == rhs.VCU_Parking_St &&
    lhs.AutoD_Limitin_Reason == rhs.AutoD_Limitin_Reason &&
    lhs.Emergency_Stop_Reason == rhs.Emergency_Stop_Reason &&
    lhs.VCU_Driver_TakeOver_Req == rhs.VCU_Driver_TakeOver_Req &&
    lhs.VCU_Vehicle_Drive_Mode_St == rhs.VCU_Vehicle_Drive_Mode_St &&
    lhs.AutoD_Out_Reason == rhs.AutoD_Out_Reason &&
    lhs.Brak_Sys_Fault_St == rhs.Brak_Sys_Fault_St &&
    lhs.Strg_Angle_Real_Value == rhs.Strg_Angle_Real_Value &&
    lhs.Strg_Angle_Spd_Value == rhs.Strg_Angle_Spd_Value &&
    lhs.Strg_WorkMode_St == rhs.Strg_WorkMode_St;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Retrieval_<ContainerAllocator1> & lhs, const ::common_msgs::Retrieval_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Retrieval_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Retrieval_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Retrieval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Retrieval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Retrieval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Retrieval_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Retrieval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65c84a13d17609ac38afeddca591500c";
  }

  static const char* value(const ::common_msgs::Retrieval_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65c84a13d17609acULL;
  static const uint64_t static_value2 = 0x38afeddca591500cULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Retrieval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Retrieval";
  }

  static const char* value(const ::common_msgs::Retrieval_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Retrieval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 AS_Veh_Acceleration_Value        # 惯导采集到的加速度\n"
"int16 AS_Driver_TakeOver_Req             # 驾驶员接管提醒(2B9)\n"
"float64 VCU_Accel_Pos_Value              # 实际加速踏板位置\n"
"float64 VCU_BrkPel_Pos_Value             # 实际制动踏板位置\n"
"float64 VCU_Real_Speed                   # 当前车速\n"
"int16 VCU_Current_Gear                   # 当前档位\n"
"int16 VCU_Parking_St                     # 当前P档位\n"
"int16 AutoD_Limitin_Reason               # 限制进入自动驾驶原因\n"
"int16 Emergency_Stop_Reason              # 紧急停车激活原因\n"
"int16 VCU_Driver_TakeOver_Req            # 驾驶员接管提醒(2BA)\n"
"int16 VCU_Vehicle_Drive_Mode_St          # 车辆驾驶模式\n"
"int16 AutoD_Out_Reason                   # 退出自动驾驶原因\n"
"int16 Brak_Sys_Fault_St                  # 制动系统故障\n"
"float64 Strg_Angle_Real_Value            # 方向盘实际转角\n"
"float64 Strg_Angle_Spd_Value             # 方向盘当前实际速度反馈\n"
"int16 Strg_WorkMode_St                   # 当前系统实际工作模式\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::common_msgs::Retrieval_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Retrieval_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.AS_Veh_Acceleration_Value);
      stream.next(m.AS_Driver_TakeOver_Req);
      stream.next(m.VCU_Accel_Pos_Value);
      stream.next(m.VCU_BrkPel_Pos_Value);
      stream.next(m.VCU_Real_Speed);
      stream.next(m.VCU_Current_Gear);
      stream.next(m.VCU_Parking_St);
      stream.next(m.AutoD_Limitin_Reason);
      stream.next(m.Emergency_Stop_Reason);
      stream.next(m.VCU_Driver_TakeOver_Req);
      stream.next(m.VCU_Vehicle_Drive_Mode_St);
      stream.next(m.AutoD_Out_Reason);
      stream.next(m.Brak_Sys_Fault_St);
      stream.next(m.Strg_Angle_Real_Value);
      stream.next(m.Strg_Angle_Spd_Value);
      stream.next(m.Strg_WorkMode_St);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Retrieval_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Retrieval_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Retrieval_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "AS_Veh_Acceleration_Value: ";
    Printer<double>::stream(s, indent + "  ", v.AS_Veh_Acceleration_Value);
    s << indent << "AS_Driver_TakeOver_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Driver_TakeOver_Req);
    s << indent << "VCU_Accel_Pos_Value: ";
    Printer<double>::stream(s, indent + "  ", v.VCU_Accel_Pos_Value);
    s << indent << "VCU_BrkPel_Pos_Value: ";
    Printer<double>::stream(s, indent + "  ", v.VCU_BrkPel_Pos_Value);
    s << indent << "VCU_Real_Speed: ";
    Printer<double>::stream(s, indent + "  ", v.VCU_Real_Speed);
    s << indent << "VCU_Current_Gear: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VCU_Current_Gear);
    s << indent << "VCU_Parking_St: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VCU_Parking_St);
    s << indent << "AutoD_Limitin_Reason: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AutoD_Limitin_Reason);
    s << indent << "Emergency_Stop_Reason: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Emergency_Stop_Reason);
    s << indent << "VCU_Driver_TakeOver_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VCU_Driver_TakeOver_Req);
    s << indent << "VCU_Vehicle_Drive_Mode_St: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VCU_Vehicle_Drive_Mode_St);
    s << indent << "AutoD_Out_Reason: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AutoD_Out_Reason);
    s << indent << "Brak_Sys_Fault_St: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Brak_Sys_Fault_St);
    s << indent << "Strg_Angle_Real_Value: ";
    Printer<double>::stream(s, indent + "  ", v.Strg_Angle_Real_Value);
    s << indent << "Strg_Angle_Spd_Value: ";
    Printer<double>::stream(s, indent + "  ", v.Strg_Angle_Spd_Value);
    s << indent << "Strg_WorkMode_St: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Strg_WorkMode_St);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_RETRIEVAL_H
