// Generated by gencpp from file common_msgs/Header.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_HEADER_H
#define COMMON_MSGS_MESSAGE_HEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/FaultVec.h>
#include <common_msgs/TimeStatistics.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct Header_
{
  typedef Header_<ContainerAllocator> Type;

  Header_()
    : sequence_num(0)
    , time_stamp(0.0)
    , module_name()
    , version()
    , fault_vec()
    , time_statistics()  {
    }
  Header_(const ContainerAllocator& _alloc)
    : sequence_num(0)
    , time_stamp(0.0)
    , module_name(_alloc)
    , version(_alloc)
    , fault_vec(_alloc)
    , time_statistics(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _sequence_num_type;
  _sequence_num_type sequence_num;

   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _module_name_type;
  _module_name_type module_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _version_type;
  _version_type version;

   typedef  ::common_msgs::FaultVec_<ContainerAllocator>  _fault_vec_type;
  _fault_vec_type fault_vec;

   typedef  ::common_msgs::TimeStatistics_<ContainerAllocator>  _time_statistics_type;
  _time_statistics_type time_statistics;





  typedef boost::shared_ptr< ::common_msgs::Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Header_<ContainerAllocator> const> ConstPtr;

}; // struct Header_

typedef ::common_msgs::Header_<std::allocator<void> > Header;

typedef boost::shared_ptr< ::common_msgs::Header > HeaderPtr;
typedef boost::shared_ptr< ::common_msgs::Header const> HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Header_<ContainerAllocator1> & lhs, const ::common_msgs::Header_<ContainerAllocator2> & rhs)
{
  return lhs.sequence_num == rhs.sequence_num &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.module_name == rhs.module_name &&
    lhs.version == rhs.version &&
    lhs.fault_vec == rhs.fault_vec &&
    lhs.time_statistics == rhs.time_statistics;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Header_<ContainerAllocator1> & lhs, const ::common_msgs::Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Header_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e31935db661363d21d899876e48cac39";
  }

  static const char* value(const ::common_msgs::Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe31935db661363d2ULL;
  static const uint64_t static_value2 = 0x1d899876e48cac39ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Header";
  }

  static const char* value(const ::common_msgs::Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sequence_num\n"
"float64 time_stamp\n"
"string 	module_name\n"
"string 	version\n"
"FaultVec 	fault_vec\n"
"TimeStatistics 	time_statistics\n"
"================================================================================\n"
"MSG: common_msgs/FaultVec\n"
"FaultInfo[] 	info_vec\n"
"int32 	module_fault_level\n"
"================================================================================\n"
"MSG: common_msgs/FaultInfo\n"
"float64 	timestamp_sec\n"
"string 	module_name\n"
"string 	version\n"
"int32 	error_code\n"
"string 	msg\n"
"int8 	fault_level\n"
"int8 	fault_type\n"
"================================================================================\n"
"MSG: common_msgs/TimeStatistics\n"
"TimeStatus[] 	dev_time_status_msg\n"
"float64 	sending_timestamp\n"
"================================================================================\n"
"MSG: common_msgs/TimeStatus\n"
"float64 	dtime\n"
"string 	source_node_name\n"
"string 	destination_node_name\n"
;
  }

  static const char* value(const ::common_msgs::Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sequence_num);
      stream.next(m.time_stamp);
      stream.next(m.module_name);
      stream.next(m.version);
      stream.next(m.fault_vec);
      stream.next(m.time_statistics);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Header_<ContainerAllocator>& v)
  {
    s << indent << "sequence_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sequence_num);
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "module_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.module_name);
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.version);
    s << indent << "fault_vec: ";
    s << std::endl;
    Printer< ::common_msgs::FaultVec_<ContainerAllocator> >::stream(s, indent + "  ", v.fault_vec);
    s << indent << "time_statistics: ";
    s << std::endl;
    Printer< ::common_msgs::TimeStatistics_<ContainerAllocator> >::stream(s, indent + "  ", v.time_statistics);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_HEADER_H
