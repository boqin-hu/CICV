// Generated by gencpp from file msg_gen/environment.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_ENVIRONMENT_H
#define MSG_GEN_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct environment_
{
  typedef environment_<ContainerAllocator> Type;

  environment_()
    : timeOfDay(0.0)
    , heightAngle(0.0)
    , directionalLight(0.0)
    , ambientLight(0.0)
    , artificialLight(0.0)
    , cloudDensity(0.0)
    , fogDensity(0.0)
    , rainDensity(0.0)
    , snowDensity(0.0)
    , groundHumidityLevel(0.0)
    , groundDirtyLevel(0.0)  {
    }
  environment_(const ContainerAllocator& _alloc)
    : timeOfDay(0.0)
    , heightAngle(0.0)
    , directionalLight(0.0)
    , ambientLight(0.0)
    , artificialLight(0.0)
    , cloudDensity(0.0)
    , fogDensity(0.0)
    , rainDensity(0.0)
    , snowDensity(0.0)
    , groundHumidityLevel(0.0)
    , groundDirtyLevel(0.0)  {
  (void)_alloc;
    }



   typedef double _timeOfDay_type;
  _timeOfDay_type timeOfDay;

   typedef double _heightAngle_type;
  _heightAngle_type heightAngle;

   typedef double _directionalLight_type;
  _directionalLight_type directionalLight;

   typedef double _ambientLight_type;
  _ambientLight_type ambientLight;

   typedef double _artificialLight_type;
  _artificialLight_type artificialLight;

   typedef double _cloudDensity_type;
  _cloudDensity_type cloudDensity;

   typedef double _fogDensity_type;
  _fogDensity_type fogDensity;

   typedef double _rainDensity_type;
  _rainDensity_type rainDensity;

   typedef double _snowDensity_type;
  _snowDensity_type snowDensity;

   typedef double _groundHumidityLevel_type;
  _groundHumidityLevel_type groundHumidityLevel;

   typedef double _groundDirtyLevel_type;
  _groundDirtyLevel_type groundDirtyLevel;





  typedef boost::shared_ptr< ::msg_gen::environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::environment_<ContainerAllocator> const> ConstPtr;

}; // struct environment_

typedef ::msg_gen::environment_<std::allocator<void> > environment;

typedef boost::shared_ptr< ::msg_gen::environment > environmentPtr;
typedef boost::shared_ptr< ::msg_gen::environment const> environmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::environment_<ContainerAllocator1> & lhs, const ::msg_gen::environment_<ContainerAllocator2> & rhs)
{
  return lhs.timeOfDay == rhs.timeOfDay &&
    lhs.heightAngle == rhs.heightAngle &&
    lhs.directionalLight == rhs.directionalLight &&
    lhs.ambientLight == rhs.ambientLight &&
    lhs.artificialLight == rhs.artificialLight &&
    lhs.cloudDensity == rhs.cloudDensity &&
    lhs.fogDensity == rhs.fogDensity &&
    lhs.rainDensity == rhs.rainDensity &&
    lhs.snowDensity == rhs.snowDensity &&
    lhs.groundHumidityLevel == rhs.groundHumidityLevel &&
    lhs.groundDirtyLevel == rhs.groundDirtyLevel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::environment_<ContainerAllocator1> & lhs, const ::msg_gen::environment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::environment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9846c7f0d468fee5b520dd51af34476f";
  }

  static const char* value(const ::msg_gen::environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9846c7f0d468fee5ULL;
  static const uint64_t static_value2 = 0xb520dd51af34476fULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/environment";
  }

  static const char* value(const ::msg_gen::environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timeOfDay\n"
"float64 heightAngle\n"
"float64 directionalLight\n"
"float64 ambientLight\n"
"float64 artificialLight\n"
"float64 cloudDensity\n"
"float64 fogDensity\n"
"float64 rainDensity\n"
"float64 snowDensity\n"
"float64 groundHumidityLevel\n"
"float64 groundDirtyLevel\n"
;
  }

  static const char* value(const ::msg_gen::environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeOfDay);
      stream.next(m.heightAngle);
      stream.next(m.directionalLight);
      stream.next(m.ambientLight);
      stream.next(m.artificialLight);
      stream.next(m.cloudDensity);
      stream.next(m.fogDensity);
      stream.next(m.rainDensity);
      stream.next(m.snowDensity);
      stream.next(m.groundHumidityLevel);
      stream.next(m.groundDirtyLevel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::environment_<ContainerAllocator>& v)
  {
    s << indent << "timeOfDay: ";
    Printer<double>::stream(s, indent + "  ", v.timeOfDay);
    s << indent << "heightAngle: ";
    Printer<double>::stream(s, indent + "  ", v.heightAngle);
    s << indent << "directionalLight: ";
    Printer<double>::stream(s, indent + "  ", v.directionalLight);
    s << indent << "ambientLight: ";
    Printer<double>::stream(s, indent + "  ", v.ambientLight);
    s << indent << "artificialLight: ";
    Printer<double>::stream(s, indent + "  ", v.artificialLight);
    s << indent << "cloudDensity: ";
    Printer<double>::stream(s, indent + "  ", v.cloudDensity);
    s << indent << "fogDensity: ";
    Printer<double>::stream(s, indent + "  ", v.fogDensity);
    s << indent << "rainDensity: ";
    Printer<double>::stream(s, indent + "  ", v.rainDensity);
    s << indent << "snowDensity: ";
    Printer<double>::stream(s, indent + "  ", v.snowDensity);
    s << indent << "groundHumidityLevel: ";
    Printer<double>::stream(s, indent + "  ", v.groundHumidityLevel);
    s << indent << "groundDirtyLevel: ";
    Printer<double>::stream(s, indent + "  ", v.groundDirtyLevel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_ENVIRONMENT_H
