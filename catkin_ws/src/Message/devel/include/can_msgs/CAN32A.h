// Generated by gencpp from file can_msgs/CAN32A.msg
// DO NOT EDIT!


#ifndef CAN_MSGS_MESSAGE_CAN32A_H
#define CAN_MSGS_MESSAGE_CAN32A_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_msgs
{
template <class ContainerAllocator>
struct CAN32A_
{
  typedef CAN32A_<ContainerAllocator> Type;

  CAN32A_()
    : timestamp(0.0)
    , velocity(0.0)
    , acceleration(0.0)  {
    }
  CAN32A_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , velocity(0.0)
    , acceleration(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::can_msgs::CAN32A_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_msgs::CAN32A_<ContainerAllocator> const> ConstPtr;

}; // struct CAN32A_

typedef ::can_msgs::CAN32A_<std::allocator<void> > CAN32A;

typedef boost::shared_ptr< ::can_msgs::CAN32A > CAN32APtr;
typedef boost::shared_ptr< ::can_msgs::CAN32A const> CAN32AConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_msgs::CAN32A_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_msgs::CAN32A_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_msgs::CAN32A_<ContainerAllocator1> & lhs, const ::can_msgs::CAN32A_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_msgs::CAN32A_<ContainerAllocator1> & lhs, const ::can_msgs::CAN32A_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_msgs::CAN32A_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_msgs::CAN32A_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_msgs::CAN32A_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_msgs::CAN32A_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_msgs::CAN32A_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_msgs::CAN32A_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_msgs::CAN32A_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88a6f16d6b8103af9a21eb51e2c01d05";
  }

  static const char* value(const ::can_msgs::CAN32A_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88a6f16d6b8103afULL;
  static const uint64_t static_value2 = 0x9a21eb51e2c01d05ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_msgs::CAN32A_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_msgs/CAN32A";
  }

  static const char* value(const ::can_msgs::CAN32A_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_msgs::CAN32A_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n"
"float64 velocity\n"
"float64 acceleration\n"
;
  }

  static const char* value(const ::can_msgs::CAN32A_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_msgs::CAN32A_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.velocity);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAN32A_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_msgs::CAN32A_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_msgs::CAN32A_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_MSGS_MESSAGE_CAN32A_H
