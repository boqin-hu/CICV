// Generated by gencpp from file perception_msgs/PerceptionObjects.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBJECTS_H
#define PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBJECTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/Header.h>
#include <perception_msgs/Object.h>
#include <perception_msgs/ObstacleCell.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct PerceptionObjects_
{
  typedef PerceptionObjects_<ContainerAllocator> Type;

  PerceptionObjects_()
    : header()
    , objs()
    , cells()  {
    }
  PerceptionObjects_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objs(_alloc)
    , cells(_alloc)  {
  (void)_alloc;
    }



   typedef  ::common_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::perception_msgs::Object_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::perception_msgs::Object_<ContainerAllocator> >> _objs_type;
  _objs_type objs;

   typedef std::vector< ::perception_msgs::ObstacleCell_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::perception_msgs::ObstacleCell_<ContainerAllocator> >> _cells_type;
  _cells_type cells;





  typedef boost::shared_ptr< ::perception_msgs::PerceptionObjects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::PerceptionObjects_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionObjects_

typedef ::perception_msgs::PerceptionObjects_<std::allocator<void> > PerceptionObjects;

typedef boost::shared_ptr< ::perception_msgs::PerceptionObjects > PerceptionObjectsPtr;
typedef boost::shared_ptr< ::perception_msgs::PerceptionObjects const> PerceptionObjectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::PerceptionObjects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::PerceptionObjects_<ContainerAllocator1> & lhs, const ::perception_msgs::PerceptionObjects_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.objs == rhs.objs &&
    lhs.cells == rhs.cells;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::PerceptionObjects_<ContainerAllocator1> & lhs, const ::perception_msgs::PerceptionObjects_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PerceptionObjects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PerceptionObjects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PerceptionObjects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79908444545b6666f901065dc0df6345";
  }

  static const char* value(const ::perception_msgs::PerceptionObjects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79908444545b6666ULL;
  static const uint64_t static_value2 = 0xf901065dc0df6345ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/PerceptionObjects";
  }

  static const char* value(const ::perception_msgs::PerceptionObjects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Header header\n"
"Object[] objs\n"
"ObstacleCell[] cells\n"
"================================================================================\n"
"MSG: common_msgs/Header\n"
"int32 sequence_num\n"
"float64 time_stamp\n"
"string 	module_name\n"
"string 	version\n"
"FaultVec 	fault_vec\n"
"TimeStatistics 	time_statistics\n"
"================================================================================\n"
"MSG: common_msgs/FaultVec\n"
"FaultInfo[] 	info_vec\n"
"int32 	module_fault_level\n"
"\n"
"================================================================================\n"
"MSG: common_msgs/FaultInfo\n"
"float64 	timestamp_sec\n"
"string 	module_name\n"
"string 	version\n"
"int32 	error_code\n"
"string 	msg\n"
"int8 	fault_level\n"
"int8 	fault_type\n"
"================================================================================\n"
"MSG: common_msgs/TimeStatistics\n"
"TimeStatus[] 	dev_time_status_msg\n"
"float64 	sending_timestamp\n"
"================================================================================\n"
"MSG: common_msgs/TimeStatus\n"
"float64 	dtime\n"
"string 	source_node_name\n"
"string 	destination_node_name\n"
"================================================================================\n"
"MSG: perception_msgs/Object\n"
"uint32 id 						# obstacle ID.\n"
"float32 x  		# relative distance of x, VCS, unit: m\n"
"float32 y 		# relative distance of y, VCS, unit: m\n"
"float32 z 						# relative distance of z, VCS, unit: m\n"
"float32 vxrel     # relative speed of x, VCS, unit: m/s\n"
"float32 vyrel     # relative speed of y, VCS, unit: m/s\n"
"float64 xabs      # relative distance of x, VCS, unit: m\n"
"float64 yabs      # relative distance of y, VCS, unit: m\n"
"float32 vxabs     # relative speed of x, VCS, unit: m/s\n"
"float32 vyabs     # relative speed of y, VCS, unit: m/s\n"
"float32 width     # unit: m\n"
"float32 length    # unit: m\n"
"float32 height     				# unit: m\n"
"float32 speed      				# unit: m/s\n"
"float32 heading      			# unit: du\n"
"uint8 type 					# CAR_TYPE=0, TRUCK_TYPE=1, PEDESTRIAN_TYPE=2, CYCLIST_TYPE=3, UNKNOWN_TYPE=4, UNKNOWN_MOVABLE_TYPE=5, UNKNOWN_UNMOVABLE_TYPE=6\n"
"uint8 source 					# VISION=0x0000 MOBILEYE=0x0001 LIDAR=0x0100 RADAR=0x0200 ARS_0=0x0201   ARS_1=0x0202  ARS_2=0x0203  ARS_3=0x0204\n"
"float32 confidence				# 0.0~1.0\n"
"uint32 age						# \n"
"uint8 velocitystatus 			# \n"
"ObstacleCell[] cells \n"
"\n"
"# uint8 track_level\n"
"# uint8 invi_count\n"
"# uint8 vis_count\n"
"\n"
"# float32 acc_x\n"
"# float32 acc_y\n"
"\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/ObstacleCell\n"
"int32 idc\n"
"float64 x\n"
"float64 y\n"
"float64 xg\n"
"float64 yg\n"
;
  }

  static const char* value(const ::perception_msgs::PerceptionObjects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objs);
      stream.next(m.cells);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionObjects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::PerceptionObjects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::PerceptionObjects_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::common_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objs[]" << std::endl;
    for (size_t i = 0; i < v.objs.size(); ++i)
    {
      s << indent << "  objs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::Object_<ContainerAllocator> >::stream(s, indent + "    ", v.objs[i]);
    }
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::ObstacleCell_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBJECTS_H
