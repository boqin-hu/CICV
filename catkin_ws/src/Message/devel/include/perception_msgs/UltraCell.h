// Generated by gencpp from file perception_msgs/UltraCell.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_ULTRACELL_H
#define PERCEPTION_MSGS_MESSAGE_ULTRACELL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct UltraCell_
{
  typedef UltraCell_<ContainerAllocator> Type;

  UltraCell_()
    : id(0)
    , direct_dist(0.0)
    , indirect_dist(0.0)
    , status(0)  {
    }
  UltraCell_(const ContainerAllocator& _alloc)
    : id(0)
    , direct_dist(0.0)
    , indirect_dist(0.0)
    , status(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef float _direct_dist_type;
  _direct_dist_type direct_dist;

   typedef float _indirect_dist_type;
  _indirect_dist_type indirect_dist;

   typedef int32_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::perception_msgs::UltraCell_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::UltraCell_<ContainerAllocator> const> ConstPtr;

}; // struct UltraCell_

typedef ::perception_msgs::UltraCell_<std::allocator<void> > UltraCell;

typedef boost::shared_ptr< ::perception_msgs::UltraCell > UltraCellPtr;
typedef boost::shared_ptr< ::perception_msgs::UltraCell const> UltraCellConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::UltraCell_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::UltraCell_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::UltraCell_<ContainerAllocator1> & lhs, const ::perception_msgs::UltraCell_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.direct_dist == rhs.direct_dist &&
    lhs.indirect_dist == rhs.indirect_dist &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::UltraCell_<ContainerAllocator1> & lhs, const ::perception_msgs::UltraCell_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::UltraCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::UltraCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::UltraCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::UltraCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::UltraCell_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::UltraCell_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::UltraCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67a3d6d891c19fe871cf9831066c666a";
  }

  static const char* value(const ::perception_msgs::UltraCell_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67a3d6d891c19fe8ULL;
  static const uint64_t static_value2 = 0x71cf9831066c666aULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::UltraCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/UltraCell";
  }

  static const char* value(const ::perception_msgs::UltraCell_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::UltraCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   id\n"
"float32 direct_dist\n"
"float32 indirect_dist\n"
"int32   status\n"
;
  }

  static const char* value(const ::perception_msgs::UltraCell_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::UltraCell_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.direct_dist);
      stream.next(m.indirect_dist);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UltraCell_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::UltraCell_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::UltraCell_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "direct_dist: ";
    Printer<float>::stream(s, indent + "  ", v.direct_dist);
    s << indent << "indirect_dist: ";
    Printer<float>::stream(s, indent + "  ", v.indirect_dist);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_ULTRACELL_H
