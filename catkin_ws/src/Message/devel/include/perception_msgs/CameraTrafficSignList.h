// Generated by gencpp from file perception_msgs/CameraTrafficSignList.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_CAMERATRAFFICSIGNLIST_H
#define PERCEPTION_MSGS_MESSAGE_CAMERATRAFFICSIGNLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_msgs/CameraTrafficSign.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct CameraTrafficSignList_
{
  typedef CameraTrafficSignList_<ContainerAllocator> Type;

  CameraTrafficSignList_()
    : header()
    , frame_number(0)
    , sensor_source(0)
    , cameratrafficsigns()  {
    }
  CameraTrafficSignList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_number(0)
    , sensor_source(0)
    , cameratrafficsigns(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _frame_number_type;
  _frame_number_type frame_number;

   typedef int8_t _sensor_source_type;
  _sensor_source_type sensor_source;

   typedef std::vector< ::perception_msgs::CameraTrafficSign_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::perception_msgs::CameraTrafficSign_<ContainerAllocator> >> _cameratrafficsigns_type;
  _cameratrafficsigns_type cameratrafficsigns;





  typedef boost::shared_ptr< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> const> ConstPtr;

}; // struct CameraTrafficSignList_

typedef ::perception_msgs::CameraTrafficSignList_<std::allocator<void> > CameraTrafficSignList;

typedef boost::shared_ptr< ::perception_msgs::CameraTrafficSignList > CameraTrafficSignListPtr;
typedef boost::shared_ptr< ::perception_msgs::CameraTrafficSignList const> CameraTrafficSignListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator1> & lhs, const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_number == rhs.frame_number &&
    lhs.sensor_source == rhs.sensor_source &&
    lhs.cameratrafficsigns == rhs.cameratrafficsigns;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator1> & lhs, const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0958cb02585f0cef94cf9bbcfcf089f";
  }

  static const char* value(const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0958cb02585f0ceULL;
  static const uint64_t static_value2 = 0xf94cf9bbcfcf089fULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/CameraTrafficSignList";
  }

  static const char* value(const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint64 frame_number\n"
"int8 sensor_source\n"
"CameraTrafficSign[] cameratrafficsigns\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/CameraTrafficSign\n"
"Header header\n"
"int8 sensor_id\n"
"int32 object_id\n"
"float32 detect_confidence\n"
"float32 type_confidence\n"
"geometry_msgs/Point32 position  # relative position, car-body(R-F-U)\n"
"Point2D pixel_central_point \n"
"Point2D pixel_box_size\n"
"int32 type\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: perception_msgs/Point2D\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_number);
      stream.next(m.sensor_source);
      stream.next(m.cameratrafficsigns);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraTrafficSignList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::CameraTrafficSignList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::CameraTrafficSignList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_number: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_number);
    s << indent << "sensor_source: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sensor_source);
    s << indent << "cameratrafficsigns[]" << std::endl;
    for (size_t i = 0; i < v.cameratrafficsigns.size(); ++i)
    {
      s << indent << "  cameratrafficsigns[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::CameraTrafficSign_<ContainerAllocator> >::stream(s, indent + "    ", v.cameratrafficsigns[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_CAMERATRAFFICSIGNLIST_H
