// Generated by gencpp from file perception_msgs/PerceptionLocalization.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_PERCEPTIONLOCALIZATION_H
#define PERCEPTION_MSGS_MESSAGE_PERCEPTIONLOCALIZATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct PerceptionLocalization_
{
  typedef PerceptionLocalization_<ContainerAllocator> Type;

  PerceptionLocalization_()
    : header()
    , frame_unmber(0)
    , fusion_level(0)
    , status(0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , yaw_std(0.0)
    , qw(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , position_x_std(0.0)
    , position_y_std(0.0)
    , position_z_std(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)
    , velocity_x_std(0.0)
    , velocity_y_std(0.0)
    , velocity_z_std(0.0)
    , velocity_rx(0.0)
    , velocity_ry(0.0)
    , velocity_rz(0.0)
    , velocity_rx_std(0.0)
    , velocity_ry_std(0.0)
    , velocity_rz_std(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)  {
    }
  PerceptionLocalization_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_unmber(0)
    , fusion_level(0)
    , status(0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , yaw_std(0.0)
    , qw(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , position_x_std(0.0)
    , position_y_std(0.0)
    , position_z_std(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)
    , velocity_x_std(0.0)
    , velocity_y_std(0.0)
    , velocity_z_std(0.0)
    , velocity_rx(0.0)
    , velocity_ry(0.0)
    , velocity_rz(0.0)
    , velocity_rx_std(0.0)
    , velocity_ry_std(0.0)
    , velocity_rz_std(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _frame_unmber_type;
  _frame_unmber_type frame_unmber;

   typedef int8_t _fusion_level_type;
  _fusion_level_type fusion_level;

   typedef int8_t _status_type;
  _status_type status;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef float _roll_std_type;
  _roll_std_type roll_std;

   typedef float _pitch_std_type;
  _pitch_std_type pitch_std;

   typedef float _yaw_std_type;
  _yaw_std_type yaw_std;

   typedef double _qw_type;
  _qw_type qw;

   typedef double _qx_type;
  _qx_type qx;

   typedef double _qy_type;
  _qy_type qy;

   typedef double _qz_type;
  _qz_type qz;

   typedef double _angular_velocity_x_type;
  _angular_velocity_x_type angular_velocity_x;

   typedef double _angular_velocity_y_type;
  _angular_velocity_y_type angular_velocity_y;

   typedef double _angular_velocity_z_type;
  _angular_velocity_z_type angular_velocity_z;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef float _latitude_std_type;
  _latitude_std_type latitude_std;

   typedef float _longitude_std_type;
  _longitude_std_type longitude_std;

   typedef float _altitude_std_type;
  _altitude_std_type altitude_std;

   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_z_type;
  _position_z_type position_z;

   typedef float _position_x_std_type;
  _position_x_std_type position_x_std;

   typedef float _position_y_std_type;
  _position_y_std_type position_y_std;

   typedef float _position_z_std_type;
  _position_z_std_type position_z_std;

   typedef double _velocity_x_type;
  _velocity_x_type velocity_x;

   typedef double _velocity_y_type;
  _velocity_y_type velocity_y;

   typedef double _velocity_z_type;
  _velocity_z_type velocity_z;

   typedef float _velocity_x_std_type;
  _velocity_x_std_type velocity_x_std;

   typedef float _velocity_y_std_type;
  _velocity_y_std_type velocity_y_std;

   typedef float _velocity_z_std_type;
  _velocity_z_std_type velocity_z_std;

   typedef double _velocity_rx_type;
  _velocity_rx_type velocity_rx;

   typedef double _velocity_ry_type;
  _velocity_ry_type velocity_ry;

   typedef double _velocity_rz_type;
  _velocity_rz_type velocity_rz;

   typedef float _velocity_rx_std_type;
  _velocity_rx_std_type velocity_rx_std;

   typedef float _velocity_ry_std_type;
  _velocity_ry_std_type velocity_ry_std;

   typedef float _velocity_rz_std_type;
  _velocity_rz_std_type velocity_rz_std;

   typedef double _accel_x_type;
  _accel_x_type accel_x;

   typedef double _accel_y_type;
  _accel_y_type accel_y;

   typedef double _accel_z_type;
  _accel_z_type accel_z;





  typedef boost::shared_ptr< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionLocalization_

typedef ::perception_msgs::PerceptionLocalization_<std::allocator<void> > PerceptionLocalization;

typedef boost::shared_ptr< ::perception_msgs::PerceptionLocalization > PerceptionLocalizationPtr;
typedef boost::shared_ptr< ::perception_msgs::PerceptionLocalization const> PerceptionLocalizationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::PerceptionLocalization_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::PerceptionLocalization_<ContainerAllocator1> & lhs, const ::perception_msgs::PerceptionLocalization_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_unmber == rhs.frame_unmber &&
    lhs.fusion_level == rhs.fusion_level &&
    lhs.status == rhs.status &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.roll_std == rhs.roll_std &&
    lhs.pitch_std == rhs.pitch_std &&
    lhs.yaw_std == rhs.yaw_std &&
    lhs.qw == rhs.qw &&
    lhs.qx == rhs.qx &&
    lhs.qy == rhs.qy &&
    lhs.qz == rhs.qz &&
    lhs.angular_velocity_x == rhs.angular_velocity_x &&
    lhs.angular_velocity_y == rhs.angular_velocity_y &&
    lhs.angular_velocity_z == rhs.angular_velocity_z &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.latitude_std == rhs.latitude_std &&
    lhs.longitude_std == rhs.longitude_std &&
    lhs.altitude_std == rhs.altitude_std &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z &&
    lhs.position_x_std == rhs.position_x_std &&
    lhs.position_y_std == rhs.position_y_std &&
    lhs.position_z_std == rhs.position_z_std &&
    lhs.velocity_x == rhs.velocity_x &&
    lhs.velocity_y == rhs.velocity_y &&
    lhs.velocity_z == rhs.velocity_z &&
    lhs.velocity_x_std == rhs.velocity_x_std &&
    lhs.velocity_y_std == rhs.velocity_y_std &&
    lhs.velocity_z_std == rhs.velocity_z_std &&
    lhs.velocity_rx == rhs.velocity_rx &&
    lhs.velocity_ry == rhs.velocity_ry &&
    lhs.velocity_rz == rhs.velocity_rz &&
    lhs.velocity_rx_std == rhs.velocity_rx_std &&
    lhs.velocity_ry_std == rhs.velocity_ry_std &&
    lhs.velocity_rz_std == rhs.velocity_rz_std &&
    lhs.accel_x == rhs.accel_x &&
    lhs.accel_y == rhs.accel_y &&
    lhs.accel_z == rhs.accel_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::PerceptionLocalization_<ContainerAllocator1> & lhs, const ::perception_msgs::PerceptionLocalization_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b871ae769d4b537baab00d1c75ff3891";
  }

  static const char* value(const ::perception_msgs::PerceptionLocalization_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb871ae769d4b537bULL;
  static const uint64_t static_value2 = 0xaab00d1c75ff3891ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/PerceptionLocalization";
  }

  static const char* value(const ::perception_msgs::PerceptionLocalization_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"Header header\n"
"\n"
"uint64 frame_unmber\n"
"int8 fusion_level\n"
"int8 status  #4:固定解，5：浮点解，2：伪距差分，1：单点解\n"
"#rotation\n"
"float64 roll      # x,R, car body (FLU)\n"
"float64 pitch      # y,R, car body (FLU)\n"
"float64 yaw      # z,R, car body (FLU) utm (0,360)  0--east, 90--north\n"
"float32 roll_std	\n"
"float32 pitch_std\n"
"float32 yaw_std \n"
"\n"
"float64 qw          # w\n"
"float64 qx          # x\n"
"float64 qy          # y\n"
"float64 qz          # z\n"
"\n"
"float64 angular_velocity_x	\n"
"float64 angular_velocity_y\n"
"float64 angular_velocity_z \n"
"\n"
"\n"
"#position\n"
"float64 latitude	\n"
"float64 longitude\n"
"float64 altitude\n"
"float32 latitude_std	\n"
"float32 longitude_std\n"
"float32 altitude_std\n"
"\n"
"float64 position_x  # utm_east\n"
"float64 position_y  # utm_north\n"
"float64 position_z  # utm_up\n"
"float32 position_x_std	\n"
"float32 position_y_std\n"
"float32 position_z_std\n"
"\n"
"float64 velocity_x  # utm_east_speed\n"
"float64 velocity_y  # utm_north_speed\n"
"float64 velocity_z  # utm_up_speed\n"
"float32 velocity_x_std	\n"
"float32 velocity_y_std\n"
"float32 velocity_z_std\n"
"\n"
"float64 velocity_rx  # ins_x_speed\n"
"float64 velocity_ry  # ins_y_speed\n"
"float64 velocity_rz  # ins_z_speed\n"
"float32 velocity_rx_std	\n"
"float32 velocity_ry_std\n"
"float32 velocity_rz_std\n"
"\n"
"float64 accel_x     # R, car body (RFU)\n"
"float64 accel_y     # F, car body (RFU)\n"
"float64 accel_z     # U, car body (RFU)\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::perception_msgs::PerceptionLocalization_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_unmber);
      stream.next(m.fusion_level);
      stream.next(m.status);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.roll_std);
      stream.next(m.pitch_std);
      stream.next(m.yaw_std);
      stream.next(m.qw);
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.angular_velocity_x);
      stream.next(m.angular_velocity_y);
      stream.next(m.angular_velocity_z);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.latitude_std);
      stream.next(m.longitude_std);
      stream.next(m.altitude_std);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.position_x_std);
      stream.next(m.position_y_std);
      stream.next(m.position_z_std);
      stream.next(m.velocity_x);
      stream.next(m.velocity_y);
      stream.next(m.velocity_z);
      stream.next(m.velocity_x_std);
      stream.next(m.velocity_y_std);
      stream.next(m.velocity_z_std);
      stream.next(m.velocity_rx);
      stream.next(m.velocity_ry);
      stream.next(m.velocity_rz);
      stream.next(m.velocity_rx_std);
      stream.next(m.velocity_ry_std);
      stream.next(m.velocity_rz_std);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionLocalization_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::PerceptionLocalization_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::PerceptionLocalization_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_unmber: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_unmber);
    s << indent << "fusion_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fusion_level);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll_std: ";
    Printer<float>::stream(s, indent + "  ", v.roll_std);
    s << indent << "pitch_std: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std);
    s << indent << "yaw_std: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_std);
    s << indent << "qw: ";
    Printer<double>::stream(s, indent + "  ", v.qw);
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
    s << indent << "angular_velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_x);
    s << indent << "angular_velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_y);
    s << indent << "angular_velocity_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_z);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "latitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_std);
    s << indent << "longitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_std);
    s << indent << "altitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_std);
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<double>::stream(s, indent + "  ", v.position_z);
    s << indent << "position_x_std: ";
    Printer<float>::stream(s, indent + "  ", v.position_x_std);
    s << indent << "position_y_std: ";
    Printer<float>::stream(s, indent + "  ", v.position_y_std);
    s << indent << "position_z_std: ";
    Printer<float>::stream(s, indent + "  ", v.position_z_std);
    s << indent << "velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_y);
    s << indent << "velocity_z: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_z);
    s << indent << "velocity_x_std: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_x_std);
    s << indent << "velocity_y_std: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_y_std);
    s << indent << "velocity_z_std: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_z_std);
    s << indent << "velocity_rx: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_rx);
    s << indent << "velocity_ry: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_ry);
    s << indent << "velocity_rz: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_rz);
    s << indent << "velocity_rx_std: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_rx_std);
    s << indent << "velocity_ry_std: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_ry_std);
    s << indent << "velocity_rz_std: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_rz_std);
    s << indent << "accel_x: ";
    Printer<double>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<double>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<double>::stream(s, indent + "  ", v.accel_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_PERCEPTIONLOCALIZATION_H
