// Generated by gencpp from file perception_msgs/TrajectoryInfo.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_TRAJECTORYINFO_H
#define PERCEPTION_MSGS_MESSAGE_TRAJECTORYINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/TrajectoryPoint.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct TrajectoryInfo_
{
  typedef TrajectoryInfo_<ContainerAllocator> Type;

  TrajectoryInfo_()
    : path_id(0)
    , total_path_length(0.0)
    , total_path_time(0.0)
    , decision_type(0)
    , light_type(0)
    , lane_ids()
    , trajectorypoints()  {
    }
  TrajectoryInfo_(const ContainerAllocator& _alloc)
    : path_id(0)
    , total_path_length(0.0)
    , total_path_time(0.0)
    , decision_type(0)
    , light_type(0)
    , lane_ids(_alloc)
    , trajectorypoints(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _path_id_type;
  _path_id_type path_id;

   typedef float _total_path_length_type;
  _total_path_length_type total_path_length;

   typedef float _total_path_time_type;
  _total_path_time_type total_path_time;

   typedef int8_t _decision_type_type;
  _decision_type_type decision_type;

   typedef int8_t _light_type_type;
  _light_type_type light_type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _lane_ids_type;
  _lane_ids_type lane_ids;

   typedef std::vector< ::perception_msgs::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::perception_msgs::TrajectoryPoint_<ContainerAllocator> >> _trajectorypoints_type;
  _trajectorypoints_type trajectorypoints;





  typedef boost::shared_ptr< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryInfo_

typedef ::perception_msgs::TrajectoryInfo_<std::allocator<void> > TrajectoryInfo;

typedef boost::shared_ptr< ::perception_msgs::TrajectoryInfo > TrajectoryInfoPtr;
typedef boost::shared_ptr< ::perception_msgs::TrajectoryInfo const> TrajectoryInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::TrajectoryInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::TrajectoryInfo_<ContainerAllocator1> & lhs, const ::perception_msgs::TrajectoryInfo_<ContainerAllocator2> & rhs)
{
  return lhs.path_id == rhs.path_id &&
    lhs.total_path_length == rhs.total_path_length &&
    lhs.total_path_time == rhs.total_path_time &&
    lhs.decision_type == rhs.decision_type &&
    lhs.light_type == rhs.light_type &&
    lhs.lane_ids == rhs.lane_ids &&
    lhs.trajectorypoints == rhs.trajectorypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::TrajectoryInfo_<ContainerAllocator1> & lhs, const ::perception_msgs::TrajectoryInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7d900a70debd0d52467ed4c06e4dc57";
  }

  static const char* value(const ::perception_msgs::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7d900a70debd0d5ULL;
  static const uint64_t static_value2 = 0x2467ed4c06e4dc57ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/TrajectoryInfo";
  }

  static const char* value(const ::perception_msgs::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 path_id\n"
"float32 total_path_length\n"
"float32 total_path_time\n"
"int8 decision_type\n"
"int8 light_type\n"
"string[] lane_ids\n"
"TrajectoryPoint[] trajectorypoints\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/TrajectoryPoint\n"
"Point2D position\n"
"float32 velocity\n"
"float32 heading\n"
"float32 curvature\n"
"float32 s\n"
"float32 t\n"
"int8 point_type\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/Point2D\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::perception_msgs::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_id);
      stream.next(m.total_path_length);
      stream.next(m.total_path_time);
      stream.next(m.decision_type);
      stream.next(m.light_type);
      stream.next(m.lane_ids);
      stream.next(m.trajectorypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::TrajectoryInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::TrajectoryInfo_<ContainerAllocator>& v)
  {
    s << indent << "path_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.path_id);
    s << indent << "total_path_length: ";
    Printer<float>::stream(s, indent + "  ", v.total_path_length);
    s << indent << "total_path_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_path_time);
    s << indent << "decision_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.decision_type);
    s << indent << "light_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.light_type);
    s << indent << "lane_ids[]" << std::endl;
    for (size_t i = 0; i < v.lane_ids.size(); ++i)
    {
      s << indent << "  lane_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.lane_ids[i]);
    }
    s << indent << "trajectorypoints[]" << std::endl;
    for (size_t i = 0; i < v.trajectorypoints.size(); ++i)
    {
      s << indent << "  trajectorypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectorypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_TRAJECTORYINFO_H
