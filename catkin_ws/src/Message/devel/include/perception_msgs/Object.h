// Generated by gencpp from file perception_msgs/Object.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_OBJECT_H
#define PERCEPTION_MSGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/ObstacleCell.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , vxrel(0.0)
    , vyrel(0.0)
    , xabs(0.0)
    , yabs(0.0)
    , vxabs(0.0)
    , vyabs(0.0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , speed(0.0)
    , heading(0.0)
    , type(0)
    , source(0)
    , confidence(0.0)
    , age(0)
    , velocitystatus(0)
    , cells()  {
    }
  Object_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , vxrel(0.0)
    , vyrel(0.0)
    , xabs(0.0)
    , yabs(0.0)
    , vxabs(0.0)
    , vyabs(0.0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , speed(0.0)
    , heading(0.0)
    , type(0)
    , source(0)
    , confidence(0.0)
    , age(0)
    , velocitystatus(0)
    , cells(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _vxrel_type;
  _vxrel_type vxrel;

   typedef float _vyrel_type;
  _vyrel_type vyrel;

   typedef double _xabs_type;
  _xabs_type xabs;

   typedef double _yabs_type;
  _yabs_type yabs;

   typedef float _vxabs_type;
  _vxabs_type vxabs;

   typedef float _vyabs_type;
  _vyabs_type vyabs;

   typedef float _width_type;
  _width_type width;

   typedef float _length_type;
  _length_type length;

   typedef float _height_type;
  _height_type height;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _heading_type;
  _heading_type heading;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _source_type;
  _source_type source;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef uint32_t _age_type;
  _age_type age;

   typedef uint8_t _velocitystatus_type;
  _velocitystatus_type velocitystatus;

   typedef std::vector< ::perception_msgs::ObstacleCell_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::perception_msgs::ObstacleCell_<ContainerAllocator> >> _cells_type;
  _cells_type cells;





  typedef boost::shared_ptr< ::perception_msgs::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::perception_msgs::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::perception_msgs::Object > ObjectPtr;
typedef boost::shared_ptr< ::perception_msgs::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::Object_<ContainerAllocator1> & lhs, const ::perception_msgs::Object_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.vxrel == rhs.vxrel &&
    lhs.vyrel == rhs.vyrel &&
    lhs.xabs == rhs.xabs &&
    lhs.yabs == rhs.yabs &&
    lhs.vxabs == rhs.vxabs &&
    lhs.vyabs == rhs.vyabs &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.height == rhs.height &&
    lhs.speed == rhs.speed &&
    lhs.heading == rhs.heading &&
    lhs.type == rhs.type &&
    lhs.source == rhs.source &&
    lhs.confidence == rhs.confidence &&
    lhs.age == rhs.age &&
    lhs.velocitystatus == rhs.velocitystatus &&
    lhs.cells == rhs.cells;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::Object_<ContainerAllocator1> & lhs, const ::perception_msgs::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8076fab59ac243046da9a425a9cf9fc0";
  }

  static const char* value(const ::perception_msgs::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8076fab59ac24304ULL;
  static const uint64_t static_value2 = 0x6da9a425a9cf9fc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/Object";
  }

  static const char* value(const ::perception_msgs::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id 						# obstacle ID.\n"
"float32 x  		# relative distance of x, VCS, unit: m\n"
"float32 y 		# relative distance of y, VCS, unit: m\n"
"float32 z 						# relative distance of z, VCS, unit: m\n"
"float32 vxrel     # relative speed of x, VCS, unit: m/s\n"
"float32 vyrel     # relative speed of y, VCS, unit: m/s\n"
"float64 xabs      # relative distance of x, VCS, unit: m\n"
"float64 yabs      # relative distance of y, VCS, unit: m\n"
"float32 vxabs     # relative speed of x, VCS, unit: m/s\n"
"float32 vyabs     # relative speed of y, VCS, unit: m/s\n"
"float32 width     # unit: m\n"
"float32 length    # unit: m\n"
"float32 height     				# unit: m\n"
"float32 speed      				# unit: m/s\n"
"float32 heading      			# unit: du\n"
"uint8 type 					# CAR_TYPE=0, TRUCK_TYPE=1, PEDESTRIAN_TYPE=2, CYCLIST_TYPE=3, UNKNOWN_TYPE=4, UNKNOWN_MOVABLE_TYPE=5, UNKNOWN_UNMOVABLE_TYPE=6\n"
"uint8 source 					# VISION=0x0000 MOBILEYE=0x0001 LIDAR=0x0100 RADAR=0x0200 ARS_0=0x0201   ARS_1=0x0202  ARS_2=0x0203  ARS_3=0x0204\n"
"float32 confidence				# 0.0~1.0\n"
"uint32 age						# \n"
"uint8 velocitystatus 			# \n"
"ObstacleCell[] cells \n"
"\n"
"# uint8 track_level\n"
"# uint8 invi_count\n"
"# uint8 vis_count\n"
"\n"
"# float32 acc_x\n"
"# float32 acc_y\n"
"\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/ObstacleCell\n"
"int32 idc\n"
"float64 x\n"
"float64 y\n"
"float64 xg\n"
"float64 yg\n"
;
  }

  static const char* value(const ::perception_msgs::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.vxrel);
      stream.next(m.vyrel);
      stream.next(m.xabs);
      stream.next(m.yabs);
      stream.next(m.vxabs);
      stream.next(m.vyabs);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.height);
      stream.next(m.speed);
      stream.next(m.heading);
      stream.next(m.type);
      stream.next(m.source);
      stream.next(m.confidence);
      stream.next(m.age);
      stream.next(m.velocitystatus);
      stream.next(m.cells);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::Object_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "vxrel: ";
    Printer<float>::stream(s, indent + "  ", v.vxrel);
    s << indent << "vyrel: ";
    Printer<float>::stream(s, indent + "  ", v.vyrel);
    s << indent << "xabs: ";
    Printer<double>::stream(s, indent + "  ", v.xabs);
    s << indent << "yabs: ";
    Printer<double>::stream(s, indent + "  ", v.yabs);
    s << indent << "vxabs: ";
    Printer<float>::stream(s, indent + "  ", v.vxabs);
    s << indent << "vyabs: ";
    Printer<float>::stream(s, indent + "  ", v.vyabs);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.source);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "age: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.age);
    s << indent << "velocitystatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.velocitystatus);
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::ObstacleCell_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_OBJECT_H
