// Generated by gencpp from file navi_msgs/NaviHmi.msg
// DO NOT EDIT!


#ifndef NAVI_MSGS_MESSAGE_NAVIHMI_H
#define NAVI_MSGS_MESSAGE_NAVIHMI_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navi_msgs
{
template <class ContainerAllocator>
struct NaviHmi_
{
  typedef NaviHmi_<ContainerAllocator> Type;

  NaviHmi_()
    : timestamp_sec(0.0)
    , interactive(0)
    , event_type(0)
    , event_id(0)  {
    }
  NaviHmi_(const ContainerAllocator& _alloc)
    : timestamp_sec(0.0)
    , interactive(0)
    , event_type(0)
    , event_id(0)  {
  (void)_alloc;
    }



   typedef double _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef int32_t _interactive_type;
  _interactive_type interactive;

   typedef int32_t _event_type_type;
  _event_type_type event_type;

   typedef int32_t _event_id_type;
  _event_id_type event_id;





  typedef boost::shared_ptr< ::navi_msgs::NaviHmi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navi_msgs::NaviHmi_<ContainerAllocator> const> ConstPtr;

}; // struct NaviHmi_

typedef ::navi_msgs::NaviHmi_<std::allocator<void> > NaviHmi;

typedef boost::shared_ptr< ::navi_msgs::NaviHmi > NaviHmiPtr;
typedef boost::shared_ptr< ::navi_msgs::NaviHmi const> NaviHmiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navi_msgs::NaviHmi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navi_msgs::NaviHmi_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navi_msgs::NaviHmi_<ContainerAllocator1> & lhs, const ::navi_msgs::NaviHmi_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_sec == rhs.timestamp_sec &&
    lhs.interactive == rhs.interactive &&
    lhs.event_type == rhs.event_type &&
    lhs.event_id == rhs.event_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navi_msgs::NaviHmi_<ContainerAllocator1> & lhs, const ::navi_msgs::NaviHmi_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::NaviHmi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::NaviHmi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::NaviHmi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::NaviHmi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::NaviHmi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::NaviHmi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navi_msgs::NaviHmi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b2932c5457cada5cc44e42751723cc0";
  }

  static const char* value(const ::navi_msgs::NaviHmi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b2932c5457cada5ULL;
  static const uint64_t static_value2 = 0xcc44e42751723cc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::navi_msgs::NaviHmi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navi_msgs/NaviHmi";
  }

  static const char* value(const ::navi_msgs::NaviHmi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navi_msgs::NaviHmi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   timestamp_sec\n"
"int32     interactive #600:任务状态 800：播报\n"
"int32     event_type  #0：车辆进站 1：车辆起步 2：车辆清车 3：任务提醒\n"
"int32     event_id    #event_type = 0||1 id=\"站点id\"；event_type = 2 id=0；event_type=3 0:空闲/结束 1：执行 2：异常\n"
"\n"
;
  }

  static const char* value(const ::navi_msgs::NaviHmi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navi_msgs::NaviHmi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.interactive);
      stream.next(m.event_type);
      stream.next(m.event_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NaviHmi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navi_msgs::NaviHmi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navi_msgs::NaviHmi_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "interactive: ";
    Printer<int32_t>::stream(s, indent + "  ", v.interactive);
    s << indent << "event_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event_type);
    s << indent << "event_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVI_MSGS_MESSAGE_NAVIHMI_H
