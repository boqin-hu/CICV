// Generated by gencpp from file navi_msgs/NavParas.msg
// DO NOT EDIT!


#ifndef NAVI_MSGS_MESSAGE_NAVPARAS_H
#define NAVI_MSGS_MESSAGE_NAVPARAS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <navi_msgs/Point2D.h>

namespace navi_msgs
{
template <class ContainerAllocator>
struct NavParas_
{
  typedef NavParas_<ContainerAllocator> Type;

  NavParas_()
    : nav_operate()
    , station_id(0)
    , end_point()  {
    }
  NavParas_(const ContainerAllocator& _alloc)
    : nav_operate(_alloc)
    , station_id(0)
    , end_point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _nav_operate_type;
  _nav_operate_type nav_operate;

   typedef uint32_t _station_id_type;
  _station_id_type station_id;

   typedef  ::navi_msgs::Point2D_<ContainerAllocator>  _end_point_type;
  _end_point_type end_point;





  typedef boost::shared_ptr< ::navi_msgs::NavParas_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navi_msgs::NavParas_<ContainerAllocator> const> ConstPtr;

}; // struct NavParas_

typedef ::navi_msgs::NavParas_<std::allocator<void> > NavParas;

typedef boost::shared_ptr< ::navi_msgs::NavParas > NavParasPtr;
typedef boost::shared_ptr< ::navi_msgs::NavParas const> NavParasConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navi_msgs::NavParas_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navi_msgs::NavParas_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navi_msgs::NavParas_<ContainerAllocator1> & lhs, const ::navi_msgs::NavParas_<ContainerAllocator2> & rhs)
{
  return lhs.nav_operate == rhs.nav_operate &&
    lhs.station_id == rhs.station_id &&
    lhs.end_point == rhs.end_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navi_msgs::NavParas_<ContainerAllocator1> & lhs, const ::navi_msgs::NavParas_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::NavParas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::NavParas_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::NavParas_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::NavParas_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::NavParas_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::NavParas_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navi_msgs::NavParas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "922cf09137c76b3b8e2d97ff35c31b17";
  }

  static const char* value(const ::navi_msgs::NavParas_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x922cf09137c76b3bULL;
  static const uint64_t static_value2 = 0x8e2d97ff35c31b17ULL;
};

template<class ContainerAllocator>
struct DataType< ::navi_msgs::NavParas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navi_msgs/NavParas";
  }

  static const char* value(const ::navi_msgs::NavParas_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navi_msgs::NavParas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string nav_operate \n"
"uint32 station_id\n"
"Point2D end_point\n"
"\n"
"\n"
"================================================================================\n"
"MSG: navi_msgs/Point2D\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::navi_msgs::NavParas_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navi_msgs::NavParas_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nav_operate);
      stream.next(m.station_id);
      stream.next(m.end_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavParas_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navi_msgs::NavParas_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navi_msgs::NavParas_<ContainerAllocator>& v)
  {
    s << indent << "nav_operate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nav_operate);
    s << indent << "station_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.station_id);
    s << indent << "end_point: ";
    s << std::endl;
    Printer< ::navi_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.end_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVI_MSGS_MESSAGE_NAVPARAS_H
