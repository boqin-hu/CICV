// Generated by gencpp from file navi_msgs/WifiInfo.msg
// DO NOT EDIT!


#ifndef NAVI_MSGS_MESSAGE_WIFIINFO_H
#define NAVI_MSGS_MESSAGE_WIFIINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navi_msgs
{
template <class ContainerAllocator>
struct WifiInfo_
{
  typedef WifiInfo_<ContainerAllocator> Type;

  WifiInfo_()
    : wifi_name()
    , level(0)  {
    }
  WifiInfo_(const ContainerAllocator& _alloc)
    : wifi_name(_alloc)
    , level(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _wifi_name_type;
  _wifi_name_type wifi_name;

   typedef int32_t _level_type;
  _level_type level;





  typedef boost::shared_ptr< ::navi_msgs::WifiInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navi_msgs::WifiInfo_<ContainerAllocator> const> ConstPtr;

}; // struct WifiInfo_

typedef ::navi_msgs::WifiInfo_<std::allocator<void> > WifiInfo;

typedef boost::shared_ptr< ::navi_msgs::WifiInfo > WifiInfoPtr;
typedef boost::shared_ptr< ::navi_msgs::WifiInfo const> WifiInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navi_msgs::WifiInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navi_msgs::WifiInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navi_msgs::WifiInfo_<ContainerAllocator1> & lhs, const ::navi_msgs::WifiInfo_<ContainerAllocator2> & rhs)
{
  return lhs.wifi_name == rhs.wifi_name &&
    lhs.level == rhs.level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navi_msgs::WifiInfo_<ContainerAllocator1> & lhs, const ::navi_msgs::WifiInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::WifiInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::WifiInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::WifiInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::WifiInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::WifiInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::WifiInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navi_msgs::WifiInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2208983a79b60f616ffc67f0aae922b9";
  }

  static const char* value(const ::navi_msgs::WifiInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2208983a79b60f61ULL;
  static const uint64_t static_value2 = 0x6ffc67f0aae922b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::navi_msgs::WifiInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navi_msgs/WifiInfo";
  }

  static const char* value(const ::navi_msgs::WifiInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navi_msgs::WifiInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  wifi_name\n"
"int32  level\n"
;
  }

  static const char* value(const ::navi_msgs::WifiInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navi_msgs::WifiInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wifi_name);
      stream.next(m.level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WifiInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navi_msgs::WifiInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navi_msgs::WifiInfo_<ContainerAllocator>& v)
  {
    s << indent << "wifi_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.wifi_name);
    s << indent << "level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVI_MSGS_MESSAGE_WIFIINFO_H
