// Generated by gencpp from file navi_msgs/NaviTaskStatus.msg
// DO NOT EDIT!


#ifndef NAVI_MSGS_MESSAGE_NAVITASKSTATUS_H
#define NAVI_MSGS_MESSAGE_NAVITASKSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <navi_msgs/VehHeader.h>

namespace navi_msgs
{
template <class ContainerAllocator>
struct NaviTaskStatus_
{
  typedef NaviTaskStatus_<ContainerAllocator> Type;

  NaviTaskStatus_()
    : v_header()
    , status(0)  {
    }
  NaviTaskStatus_(const ContainerAllocator& _alloc)
    : v_header(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::navi_msgs::VehHeader_<ContainerAllocator>  _v_header_type;
  _v_header_type v_header;

   typedef int32_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NaviTaskStatus_

typedef ::navi_msgs::NaviTaskStatus_<std::allocator<void> > NaviTaskStatus;

typedef boost::shared_ptr< ::navi_msgs::NaviTaskStatus > NaviTaskStatusPtr;
typedef boost::shared_ptr< ::navi_msgs::NaviTaskStatus const> NaviTaskStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navi_msgs::NaviTaskStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navi_msgs::NaviTaskStatus_<ContainerAllocator1> & lhs, const ::navi_msgs::NaviTaskStatus_<ContainerAllocator2> & rhs)
{
  return lhs.v_header == rhs.v_header &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navi_msgs::NaviTaskStatus_<ContainerAllocator1> & lhs, const ::navi_msgs::NaviTaskStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "385f807662e68b44b2d006b0602e2751";
  }

  static const char* value(const ::navi_msgs::NaviTaskStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x385f807662e68b44ULL;
  static const uint64_t static_value2 = 0xb2d006b0602e2751ULL;
};

template<class ContainerAllocator>
struct DataType< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navi_msgs/NaviTaskStatus";
  }

  static const char* value(const ::navi_msgs::NaviTaskStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "VehHeader v_header\n"
"int32 status	 \n"
"\n"
"================================================================================\n"
"MSG: navi_msgs/VehHeader\n"
"uint16 veh_id\n"
"TimeStamp time\n"
"================================================================================\n"
"MSG: navi_msgs/TimeStamp\n"
"uint64 s\n"
"uint64 ns\n"
;
  }

  static const char* value(const ::navi_msgs::NaviTaskStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v_header);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NaviTaskStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navi_msgs::NaviTaskStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navi_msgs::NaviTaskStatus_<ContainerAllocator>& v)
  {
    s << indent << "v_header: ";
    s << std::endl;
    Printer< ::navi_msgs::VehHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.v_header);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVI_MSGS_MESSAGE_NAVITASKSTATUS_H
