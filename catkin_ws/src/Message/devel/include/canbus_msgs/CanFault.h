// Generated by gencpp from file canbus_msgs/CanFault.msg
// DO NOT EDIT!


#ifndef CANBUS_MSGS_MESSAGE_CANFAULT_H
#define CANBUS_MSGS_MESSAGE_CANFAULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace canbus_msgs
{
template <class ContainerAllocator>
struct CanFault_
{
  typedef CanFault_<ContainerAllocator> Type;

  CanFault_()
    : can_fault_flag(0)
    , can103_fault_flag(0)
    , mmw_lidar0_flag(0)
    , mmw_lidar1_flag(0)
    , mmw_lidar3_flag(0)
    , mmw_lidar5_flag(0)
    , mmw_lidar7_flag(0)
    , ult_5C8_flag(0)
    , ult_5C9_flag(0)
    , can_busoff_flag(0)
    , can103_busoff_flag(0)
    , canbus_module_level1_flag(0)
    , canbus_module_level2_flag(0)  {
    }
  CanFault_(const ContainerAllocator& _alloc)
    : can_fault_flag(0)
    , can103_fault_flag(0)
    , mmw_lidar0_flag(0)
    , mmw_lidar1_flag(0)
    , mmw_lidar3_flag(0)
    , mmw_lidar5_flag(0)
    , mmw_lidar7_flag(0)
    , ult_5C8_flag(0)
    , ult_5C9_flag(0)
    , can_busoff_flag(0)
    , can103_busoff_flag(0)
    , canbus_module_level1_flag(0)
    , canbus_module_level2_flag(0)  {
  (void)_alloc;
    }



   typedef int16_t _can_fault_flag_type;
  _can_fault_flag_type can_fault_flag;

   typedef int16_t _can103_fault_flag_type;
  _can103_fault_flag_type can103_fault_flag;

   typedef int16_t _mmw_lidar0_flag_type;
  _mmw_lidar0_flag_type mmw_lidar0_flag;

   typedef int16_t _mmw_lidar1_flag_type;
  _mmw_lidar1_flag_type mmw_lidar1_flag;

   typedef int16_t _mmw_lidar3_flag_type;
  _mmw_lidar3_flag_type mmw_lidar3_flag;

   typedef int16_t _mmw_lidar5_flag_type;
  _mmw_lidar5_flag_type mmw_lidar5_flag;

   typedef int16_t _mmw_lidar7_flag_type;
  _mmw_lidar7_flag_type mmw_lidar7_flag;

   typedef int16_t _ult_5C8_flag_type;
  _ult_5C8_flag_type ult_5C8_flag;

   typedef int16_t _ult_5C9_flag_type;
  _ult_5C9_flag_type ult_5C9_flag;

   typedef int16_t _can_busoff_flag_type;
  _can_busoff_flag_type can_busoff_flag;

   typedef int16_t _can103_busoff_flag_type;
  _can103_busoff_flag_type can103_busoff_flag;

   typedef int16_t _canbus_module_level1_flag_type;
  _canbus_module_level1_flag_type canbus_module_level1_flag;

   typedef int16_t _canbus_module_level2_flag_type;
  _canbus_module_level2_flag_type canbus_module_level2_flag;





  typedef boost::shared_ptr< ::canbus_msgs::CanFault_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::canbus_msgs::CanFault_<ContainerAllocator> const> ConstPtr;

}; // struct CanFault_

typedef ::canbus_msgs::CanFault_<std::allocator<void> > CanFault;

typedef boost::shared_ptr< ::canbus_msgs::CanFault > CanFaultPtr;
typedef boost::shared_ptr< ::canbus_msgs::CanFault const> CanFaultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::canbus_msgs::CanFault_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::canbus_msgs::CanFault_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::canbus_msgs::CanFault_<ContainerAllocator1> & lhs, const ::canbus_msgs::CanFault_<ContainerAllocator2> & rhs)
{
  return lhs.can_fault_flag == rhs.can_fault_flag &&
    lhs.can103_fault_flag == rhs.can103_fault_flag &&
    lhs.mmw_lidar0_flag == rhs.mmw_lidar0_flag &&
    lhs.mmw_lidar1_flag == rhs.mmw_lidar1_flag &&
    lhs.mmw_lidar3_flag == rhs.mmw_lidar3_flag &&
    lhs.mmw_lidar5_flag == rhs.mmw_lidar5_flag &&
    lhs.mmw_lidar7_flag == rhs.mmw_lidar7_flag &&
    lhs.ult_5C8_flag == rhs.ult_5C8_flag &&
    lhs.ult_5C9_flag == rhs.ult_5C9_flag &&
    lhs.can_busoff_flag == rhs.can_busoff_flag &&
    lhs.can103_busoff_flag == rhs.can103_busoff_flag &&
    lhs.canbus_module_level1_flag == rhs.canbus_module_level1_flag &&
    lhs.canbus_module_level2_flag == rhs.canbus_module_level2_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::canbus_msgs::CanFault_<ContainerAllocator1> & lhs, const ::canbus_msgs::CanFault_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace canbus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::canbus_msgs::CanFault_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canbus_msgs::CanFault_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::canbus_msgs::CanFault_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::canbus_msgs::CanFault_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus_msgs::CanFault_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus_msgs::CanFault_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::canbus_msgs::CanFault_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8ae15ad4df221ade0f55c8006aaa5ca";
  }

  static const char* value(const ::canbus_msgs::CanFault_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8ae15ad4df221adULL;
  static const uint64_t static_value2 = 0xe0f55c8006aaa5caULL;
};

template<class ContainerAllocator>
struct DataType< ::canbus_msgs::CanFault_<ContainerAllocator> >
{
  static const char* value()
  {
    return "canbus_msgs/CanFault";
  }

  static const char* value(const ::canbus_msgs::CanFault_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::canbus_msgs::CanFault_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16   can_fault_flag\n"
"int16   can103_fault_flag\n"
"int16   mmw_lidar0_flag\n"
"int16   mmw_lidar1_flag\n"
"int16   mmw_lidar3_flag\n"
"int16   mmw_lidar5_flag\n"
"int16   mmw_lidar7_flag\n"
"int16   ult_5C8_flag\n"
"int16   ult_5C9_flag\n"
"int16   can_busoff_flag\n"
"int16   can103_busoff_flag\n"
"int16   canbus_module_level1_flag\n"
"int16   canbus_module_level2_flag\n"
;
  }

  static const char* value(const ::canbus_msgs::CanFault_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::canbus_msgs::CanFault_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.can_fault_flag);
      stream.next(m.can103_fault_flag);
      stream.next(m.mmw_lidar0_flag);
      stream.next(m.mmw_lidar1_flag);
      stream.next(m.mmw_lidar3_flag);
      stream.next(m.mmw_lidar5_flag);
      stream.next(m.mmw_lidar7_flag);
      stream.next(m.ult_5C8_flag);
      stream.next(m.ult_5C9_flag);
      stream.next(m.can_busoff_flag);
      stream.next(m.can103_busoff_flag);
      stream.next(m.canbus_module_level1_flag);
      stream.next(m.canbus_module_level2_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanFault_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::canbus_msgs::CanFault_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::canbus_msgs::CanFault_<ContainerAllocator>& v)
  {
    s << indent << "can_fault_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.can_fault_flag);
    s << indent << "can103_fault_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.can103_fault_flag);
    s << indent << "mmw_lidar0_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mmw_lidar0_flag);
    s << indent << "mmw_lidar1_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mmw_lidar1_flag);
    s << indent << "mmw_lidar3_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mmw_lidar3_flag);
    s << indent << "mmw_lidar5_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mmw_lidar5_flag);
    s << indent << "mmw_lidar7_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mmw_lidar7_flag);
    s << indent << "ult_5C8_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ult_5C8_flag);
    s << indent << "ult_5C9_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ult_5C9_flag);
    s << indent << "can_busoff_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.can_busoff_flag);
    s << indent << "can103_busoff_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.can103_busoff_flag);
    s << indent << "canbus_module_level1_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.canbus_module_level1_flag);
    s << indent << "canbus_module_level2_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.canbus_module_level2_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CANBUS_MSGS_MESSAGE_CANFAULT_H
