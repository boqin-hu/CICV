// Generated by gencpp from file imu/LocalizationControl.msg
// DO NOT EDIT!


#ifndef IMU_MESSAGE_LOCALIZATIONCONTROL_H
#define IMU_MESSAGE_LOCALIZATIONCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu
{
template <class ContainerAllocator>
struct LocalizationControl_
{
  typedef LocalizationControl_<ContainerAllocator> Type;

  LocalizationControl_()
    : is_lidar_open(false)  {
    }
  LocalizationControl_(const ContainerAllocator& _alloc)
    : is_lidar_open(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_lidar_open_type;
  _is_lidar_open_type is_lidar_open;





  typedef boost::shared_ptr< ::imu::LocalizationControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu::LocalizationControl_<ContainerAllocator> const> ConstPtr;

}; // struct LocalizationControl_

typedef ::imu::LocalizationControl_<std::allocator<void> > LocalizationControl;

typedef boost::shared_ptr< ::imu::LocalizationControl > LocalizationControlPtr;
typedef boost::shared_ptr< ::imu::LocalizationControl const> LocalizationControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu::LocalizationControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu::LocalizationControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imu::LocalizationControl_<ContainerAllocator1> & lhs, const ::imu::LocalizationControl_<ContainerAllocator2> & rhs)
{
  return lhs.is_lidar_open == rhs.is_lidar_open;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imu::LocalizationControl_<ContainerAllocator1> & lhs, const ::imu::LocalizationControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imu::LocalizationControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu::LocalizationControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu::LocalizationControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu::LocalizationControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu::LocalizationControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu::LocalizationControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu::LocalizationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5bdebbf6b9fb5d72cc29e9f5a1240ac";
  }

  static const char* value(const ::imu::LocalizationControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5bdebbf6b9fb5d7ULL;
  static const uint64_t static_value2 = 0x2cc29e9f5a1240acULL;
};

template<class ContainerAllocator>
struct DataType< ::imu::LocalizationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu/LocalizationControl";
  }

  static const char* value(const ::imu::LocalizationControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu::LocalizationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_lidar_open\n"
;
  }

  static const char* value(const ::imu::LocalizationControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu::LocalizationControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_lidar_open);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalizationControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu::LocalizationControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu::LocalizationControl_<ContainerAllocator>& v)
  {
    s << indent << "is_lidar_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_lidar_open);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_MESSAGE_LOCALIZATIONCONTROL_H
