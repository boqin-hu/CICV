// Generated by gencpp from file imu/SensorImu.msg
// DO NOT EDIT!


#ifndef IMU_MESSAGE_SENSORIMU_H
#define IMU_MESSAGE_SENSORIMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/Header.h>
#include <common_msgs/LLH.h>
#include <common_msgs/Pose.h>
#include <common_msgs/Twist.h>
#include <common_msgs/Vector3.h>
#include <common_msgs/UnsureVar.h>
#include <common_msgs/NavStatus.h>
#include <common_msgs/DRPoseWithTime.h>
#include <imu/LocalizationControl.h>

namespace imu
{
template <class ContainerAllocator>
struct SensorImu_
{
  typedef SensorImu_<ContainerAllocator> Type;

  SensorImu_()
    : header()
    , llh()
    , pose()
    , twist()
    , acceleration()
    , v()
    , nav_status()
    , dr_pose_and_time()
    , localization_control()  {
    }
  SensorImu_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , llh(_alloc)
    , pose(_alloc)
    , twist(_alloc)
    , acceleration(_alloc)
    , v(_alloc)
    , nav_status(_alloc)
    , dr_pose_and_time(_alloc)
    , localization_control(_alloc)  {
  (void)_alloc;
    }



   typedef  ::common_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::common_msgs::LLH_<ContainerAllocator>  _llh_type;
  _llh_type llh;

   typedef  ::common_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::common_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::common_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::common_msgs::UnsureVar_<ContainerAllocator>  _v_type;
  _v_type v;

   typedef  ::common_msgs::NavStatus_<ContainerAllocator>  _nav_status_type;
  _nav_status_type nav_status;

   typedef  ::common_msgs::DRPoseWithTime_<ContainerAllocator>  _dr_pose_and_time_type;
  _dr_pose_and_time_type dr_pose_and_time;

   typedef  ::imu::LocalizationControl_<ContainerAllocator>  _localization_control_type;
  _localization_control_type localization_control;





  typedef boost::shared_ptr< ::imu::SensorImu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu::SensorImu_<ContainerAllocator> const> ConstPtr;

}; // struct SensorImu_

typedef ::imu::SensorImu_<std::allocator<void> > SensorImu;

typedef boost::shared_ptr< ::imu::SensorImu > SensorImuPtr;
typedef boost::shared_ptr< ::imu::SensorImu const> SensorImuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu::SensorImu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu::SensorImu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imu::SensorImu_<ContainerAllocator1> & lhs, const ::imu::SensorImu_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.llh == rhs.llh &&
    lhs.pose == rhs.pose &&
    lhs.twist == rhs.twist &&
    lhs.acceleration == rhs.acceleration &&
    lhs.v == rhs.v &&
    lhs.nav_status == rhs.nav_status &&
    lhs.dr_pose_and_time == rhs.dr_pose_and_time &&
    lhs.localization_control == rhs.localization_control;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imu::SensorImu_<ContainerAllocator1> & lhs, const ::imu::SensorImu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imu::SensorImu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu::SensorImu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu::SensorImu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu::SensorImu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu::SensorImu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu::SensorImu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu::SensorImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74871aed203561f29ce57a860f116fa6";
  }

  static const char* value(const ::imu::SensorImu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74871aed203561f2ULL;
  static const uint64_t static_value2 = 0x9ce57a860f116fa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu::SensorImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu/SensorImu";
  }

  static const char* value(const ::imu::SensorImu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu::SensorImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Header 	header\n"
"common_msgs/LLH 	llh\n"
"common_msgs/Pose 	pose\n"
"common_msgs/Twist 	twist\n"
"common_msgs/Vector3 	acceleration\n"
"common_msgs/UnsureVar 	v\n"
"common_msgs/NavStatus 	nav_status\n"
"common_msgs/DRPoseWithTime dr_pose_and_time\n"
"LocalizationControl localization_control\n"
"\n"
"================================================================================\n"
"MSG: common_msgs/Header\n"
"int32 sequence_num\n"
"float64 time_stamp\n"
"string 	module_name\n"
"string 	version\n"
"FaultVec 	fault_vec\n"
"TimeStatistics 	time_statistics\n"
"================================================================================\n"
"MSG: common_msgs/FaultVec\n"
"FaultInfo[] 	info_vec\n"
"int32 	module_fault_level\n"
"\n"
"================================================================================\n"
"MSG: common_msgs/FaultInfo\n"
"float64 	timestamp_sec\n"
"string 	module_name\n"
"string 	version\n"
"int32 	error_code\n"
"string 	msg\n"
"int8 	fault_level\n"
"int8 	fault_type\n"
"================================================================================\n"
"MSG: common_msgs/TimeStatistics\n"
"TimeStatus[] 	dev_time_status_msg\n"
"float64 	sending_timestamp\n"
"================================================================================\n"
"MSG: common_msgs/TimeStatus\n"
"float64 	dtime\n"
"string 	source_node_name\n"
"string 	destination_node_name\n"
"================================================================================\n"
"MSG: common_msgs/LLH\n"
"UnsureVar 	lat\n"
"UnsureVar 	lon\n"
"UnsureVar 	height\n"
"================================================================================\n"
"MSG: common_msgs/UnsureVar\n"
"float64 	variable\n"
"float64 	var_std\n"
"================================================================================\n"
"MSG: common_msgs/Pose\n"
"PoseEuler  	pose_euler\n"
"PoseQuaternion 	pose_quaternion\n"
"int8  	status   # 0-normal  1-error\n"
"================================================================================\n"
"MSG: common_msgs/PoseEuler\n"
"Vector3WithCovariance 	position\n"
"EulerWithCovariance 	rotation\n"
"================================================================================\n"
"MSG: common_msgs/Vector3WithCovariance\n"
"UnsureVar 	x\n"
"UnsureVar 	y\n"
"UnsureVar 	z\n"
"================================================================================\n"
"MSG: common_msgs/EulerWithCovariance\n"
"UnsureVar 	roll\n"
"UnsureVar 	pitch\n"
"UnsureVar 	yaw\n"
"================================================================================\n"
"MSG: common_msgs/PoseQuaternion\n"
"Vector3WithCovariance 	position\n"
"Quaternion 	quaternion\n"
"Vector3  rpy_covariance	\n"
"================================================================================\n"
"MSG: common_msgs/Quaternion\n"
"float64 	x\n"
"float64 	y\n"
"float64 	z\n"
"float64 	w\n"
"================================================================================\n"
"MSG: common_msgs/Vector3\n"
"float64 	x\n"
"float64 	y\n"
"float64 	z\n"
"================================================================================\n"
"MSG: common_msgs/Twist\n"
"Vector3WithCovariance 	velocity\n"
"Vector3WithCovariance 	angular_velocity\n"
"================================================================================\n"
"MSG: common_msgs/NavStatus\n"
"float64 	utc_time\n"
"int8 	gps_status # 0-nofix  1-single  2-psrdiff  3-code_diff  4-narrow_init  5-narrow_float\n"
"int32 	pos_status\n"
"int32  	att_status\n"
"int32  	init_status\n"
"int32  	sate_num\n"
"float32  	hdop\n"
"float32  	pdop\n"
"float32  	diff_age\n"
"================================================================================\n"
"MSG: common_msgs/DRPoseWithTime\n"
"int32      week\n"
"float64    utctime\n"
"float64    dr_time\n"
"PoseEuler  pose_euler\n"
"================================================================================\n"
"MSG: imu/LocalizationControl\n"
"bool is_lidar_open\n"
;
  }

  static const char* value(const ::imu::SensorImu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu::SensorImu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.llh);
      stream.next(m.pose);
      stream.next(m.twist);
      stream.next(m.acceleration);
      stream.next(m.v);
      stream.next(m.nav_status);
      stream.next(m.dr_pose_and_time);
      stream.next(m.localization_control);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorImu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu::SensorImu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu::SensorImu_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::common_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "llh: ";
    s << std::endl;
    Printer< ::common_msgs::LLH_<ContainerAllocator> >::stream(s, indent + "  ", v.llh);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::common_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::common_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::common_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "v: ";
    s << std::endl;
    Printer< ::common_msgs::UnsureVar_<ContainerAllocator> >::stream(s, indent + "  ", v.v);
    s << indent << "nav_status: ";
    s << std::endl;
    Printer< ::common_msgs::NavStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.nav_status);
    s << indent << "dr_pose_and_time: ";
    s << std::endl;
    Printer< ::common_msgs::DRPoseWithTime_<ContainerAllocator> >::stream(s, indent + "  ", v.dr_pose_and_time);
    s << indent << "localization_control: ";
    s << std::endl;
    Printer< ::imu::LocalizationControl_<ContainerAllocator> >::stream(s, indent + "  ", v.localization_control);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_MESSAGE_SENSORIMU_H
