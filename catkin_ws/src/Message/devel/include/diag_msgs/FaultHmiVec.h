// Generated by gencpp from file diag_msgs/FaultHmiVec.msg
// DO NOT EDIT!


#ifndef DIAG_MSGS_MESSAGE_FAULTHMIVEC_H
#define DIAG_MSGS_MESSAGE_FAULTHMIVEC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <diag_msgs/FaultHmi.h>

namespace diag_msgs
{
template <class ContainerAllocator>
struct FaultHmiVec_
{
  typedef FaultHmiVec_<ContainerAllocator> Type;

  FaultHmiVec_()
    : hmi_vec()  {
    }
  FaultHmiVec_(const ContainerAllocator& _alloc)
    : hmi_vec(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::diag_msgs::FaultHmi_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::diag_msgs::FaultHmi_<ContainerAllocator> >> _hmi_vec_type;
  _hmi_vec_type hmi_vec;





  typedef boost::shared_ptr< ::diag_msgs::FaultHmiVec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diag_msgs::FaultHmiVec_<ContainerAllocator> const> ConstPtr;

}; // struct FaultHmiVec_

typedef ::diag_msgs::FaultHmiVec_<std::allocator<void> > FaultHmiVec;

typedef boost::shared_ptr< ::diag_msgs::FaultHmiVec > FaultHmiVecPtr;
typedef boost::shared_ptr< ::diag_msgs::FaultHmiVec const> FaultHmiVecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diag_msgs::FaultHmiVec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diag_msgs::FaultHmiVec_<ContainerAllocator1> & lhs, const ::diag_msgs::FaultHmiVec_<ContainerAllocator2> & rhs)
{
  return lhs.hmi_vec == rhs.hmi_vec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diag_msgs::FaultHmiVec_<ContainerAllocator1> & lhs, const ::diag_msgs::FaultHmiVec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diag_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::FaultHmiVec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::FaultHmiVec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::FaultHmiVec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da59b13fe1c36e593adbfb404b2845a3";
  }

  static const char* value(const ::diag_msgs::FaultHmiVec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda59b13fe1c36e59ULL;
  static const uint64_t static_value2 = 0x3adbfb404b2845a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diag_msgs/FaultHmiVec";
  }

  static const char* value(const ::diag_msgs::FaultHmiVec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FaultHmi[] 	hmi_vec\n"
"\n"
"================================================================================\n"
"MSG: diag_msgs/FaultHmi\n"
"float64   timestamp_sec\n"
"int32     event_id\n"
"int32     interactive\n"
"int32     error_code\n"
"string    msg\n"
"int32     event_type\n"
;
  }

  static const char* value(const ::diag_msgs::FaultHmiVec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hmi_vec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultHmiVec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diag_msgs::FaultHmiVec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diag_msgs::FaultHmiVec_<ContainerAllocator>& v)
  {
    s << indent << "hmi_vec[]" << std::endl;
    for (size_t i = 0; i < v.hmi_vec.size(); ++i)
    {
      s << indent << "  hmi_vec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diag_msgs::FaultHmi_<ContainerAllocator> >::stream(s, indent + "    ", v.hmi_vec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIAG_MSGS_MESSAGE_FAULTHMIVEC_H
