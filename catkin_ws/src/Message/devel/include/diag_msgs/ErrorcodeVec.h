// Generated by gencpp from file diag_msgs/ErrorcodeVec.msg
// DO NOT EDIT!


#ifndef DIAG_MSGS_MESSAGE_ERRORCODEVEC_H
#define DIAG_MSGS_MESSAGE_ERRORCODEVEC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <diag_msgs/ErrorcodeInfo.h>

namespace diag_msgs
{
template <class ContainerAllocator>
struct ErrorcodeVec_
{
  typedef ErrorcodeVec_<ContainerAllocator> Type;

  ErrorcodeVec_()
    : error_vec()
    , interactive(0)  {
    }
  ErrorcodeVec_(const ContainerAllocator& _alloc)
    : error_vec(_alloc)
    , interactive(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::diag_msgs::ErrorcodeInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::diag_msgs::ErrorcodeInfo_<ContainerAllocator> >> _error_vec_type;
  _error_vec_type error_vec;

   typedef int32_t _interactive_type;
  _interactive_type interactive;





  typedef boost::shared_ptr< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorcodeVec_

typedef ::diag_msgs::ErrorcodeVec_<std::allocator<void> > ErrorcodeVec;

typedef boost::shared_ptr< ::diag_msgs::ErrorcodeVec > ErrorcodeVecPtr;
typedef boost::shared_ptr< ::diag_msgs::ErrorcodeVec const> ErrorcodeVecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diag_msgs::ErrorcodeVec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diag_msgs::ErrorcodeVec_<ContainerAllocator1> & lhs, const ::diag_msgs::ErrorcodeVec_<ContainerAllocator2> & rhs)
{
  return lhs.error_vec == rhs.error_vec &&
    lhs.interactive == rhs.interactive;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diag_msgs::ErrorcodeVec_<ContainerAllocator1> & lhs, const ::diag_msgs::ErrorcodeVec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diag_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d652d5f9dc7c3fdadce9102b2c47862";
  }

  static const char* value(const ::diag_msgs::ErrorcodeVec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d652d5f9dc7c3fdULL;
  static const uint64_t static_value2 = 0xadce9102b2c47862ULL;
};

template<class ContainerAllocator>
struct DataType< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diag_msgs/ErrorcodeVec";
  }

  static const char* value(const ::diag_msgs::ErrorcodeVec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ErrorcodeInfo[] 	error_vec\n"
"int32     interactive\n"
"\n"
"================================================================================\n"
"MSG: diag_msgs/ErrorcodeInfo\n"
"int32     error_code\n"
"int32     error_level\n"
"int32     error_level_hmi\n"
"\n"
;
  }

  static const char* value(const ::diag_msgs::ErrorcodeVec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_vec);
      stream.next(m.interactive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorcodeVec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diag_msgs::ErrorcodeVec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diag_msgs::ErrorcodeVec_<ContainerAllocator>& v)
  {
    s << indent << "error_vec[]" << std::endl;
    for (size_t i = 0; i < v.error_vec.size(); ++i)
    {
      s << indent << "  error_vec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diag_msgs::ErrorcodeInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.error_vec[i]);
    }
    s << indent << "interactive: ";
    Printer<int32_t>::stream(s, indent + "  ", v.interactive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIAG_MSGS_MESSAGE_ERRORCODEVEC_H
