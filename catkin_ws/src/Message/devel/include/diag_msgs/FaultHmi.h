// Generated by gencpp from file diag_msgs/FaultHmi.msg
// DO NOT EDIT!


#ifndef DIAG_MSGS_MESSAGE_FAULTHMI_H
#define DIAG_MSGS_MESSAGE_FAULTHMI_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diag_msgs
{
template <class ContainerAllocator>
struct FaultHmi_
{
  typedef FaultHmi_<ContainerAllocator> Type;

  FaultHmi_()
    : timestamp_sec(0.0)
    , event_id(0)
    , interactive(0)
    , error_code(0)
    , msg()
    , event_type(0)  {
    }
  FaultHmi_(const ContainerAllocator& _alloc)
    : timestamp_sec(0.0)
    , event_id(0)
    , interactive(0)
    , error_code(0)
    , msg(_alloc)
    , event_type(0)  {
  (void)_alloc;
    }



   typedef double _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef int32_t _event_id_type;
  _event_id_type event_id;

   typedef int32_t _interactive_type;
  _interactive_type interactive;

   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;

   typedef int32_t _event_type_type;
  _event_type_type event_type;





  typedef boost::shared_ptr< ::diag_msgs::FaultHmi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diag_msgs::FaultHmi_<ContainerAllocator> const> ConstPtr;

}; // struct FaultHmi_

typedef ::diag_msgs::FaultHmi_<std::allocator<void> > FaultHmi;

typedef boost::shared_ptr< ::diag_msgs::FaultHmi > FaultHmiPtr;
typedef boost::shared_ptr< ::diag_msgs::FaultHmi const> FaultHmiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diag_msgs::FaultHmi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diag_msgs::FaultHmi_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diag_msgs::FaultHmi_<ContainerAllocator1> & lhs, const ::diag_msgs::FaultHmi_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_sec == rhs.timestamp_sec &&
    lhs.event_id == rhs.event_id &&
    lhs.interactive == rhs.interactive &&
    lhs.error_code == rhs.error_code &&
    lhs.msg == rhs.msg &&
    lhs.event_type == rhs.event_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diag_msgs::FaultHmi_<ContainerAllocator1> & lhs, const ::diag_msgs::FaultHmi_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diag_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::FaultHmi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::FaultHmi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::FaultHmi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::FaultHmi_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::FaultHmi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::FaultHmi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diag_msgs::FaultHmi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30009e522ed486022cfeb6ce5fc06580";
  }

  static const char* value(const ::diag_msgs::FaultHmi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30009e522ed48602ULL;
  static const uint64_t static_value2 = 0x2cfeb6ce5fc06580ULL;
};

template<class ContainerAllocator>
struct DataType< ::diag_msgs::FaultHmi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diag_msgs/FaultHmi";
  }

  static const char* value(const ::diag_msgs::FaultHmi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diag_msgs::FaultHmi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64   timestamp_sec\n"
"int32     event_id\n"
"int32     interactive\n"
"int32     error_code\n"
"string    msg\n"
"int32     event_type\n"
;
  }

  static const char* value(const ::diag_msgs::FaultHmi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diag_msgs::FaultHmi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.event_id);
      stream.next(m.interactive);
      stream.next(m.error_code);
      stream.next(m.msg);
      stream.next(m.event_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultHmi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diag_msgs::FaultHmi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diag_msgs::FaultHmi_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "event_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event_id);
    s << indent << "interactive: ";
    Printer<int32_t>::stream(s, indent + "  ", v.interactive);
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
    s << indent << "event_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIAG_MSGS_MESSAGE_FAULTHMI_H
