// Generated by gencpp from file common_msgs/Trajectory.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_TRAJECTORY_H
#define COMMON_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/TrajectoryPoint.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : SimTim(0.0)
    , decision_type(0)
    , turn_light_type(0)
    , num(0)
    , trajectorypoints()  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : SimTim(0.0)
    , decision_type(0)
    , turn_light_type(0)
    , num(0)
    , trajectorypoints(_alloc)  {
  (void)_alloc;
    }



   typedef double _SimTim_type;
  _SimTim_type SimTim;

   typedef int32_t _decision_type_type;
  _decision_type_type decision_type;

   typedef int32_t _turn_light_type_type;
  _turn_light_type_type turn_light_type;

   typedef int32_t _num_type;
  _num_type num;

   typedef std::vector< ::common_msgs::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::common_msgs::TrajectoryPoint_<ContainerAllocator> >> _trajectorypoints_type;
  _trajectorypoints_type trajectorypoints;





  typedef boost::shared_ptr< ::common_msgs::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::common_msgs::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::common_msgs::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::common_msgs::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Trajectory_<ContainerAllocator1> & lhs, const ::common_msgs::Trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.SimTim == rhs.SimTim &&
    lhs.decision_type == rhs.decision_type &&
    lhs.turn_light_type == rhs.turn_light_type &&
    lhs.num == rhs.num &&
    lhs.trajectorypoints == rhs.trajectorypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Trajectory_<ContainerAllocator1> & lhs, const ::common_msgs::Trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bb05648bf98b981e26e4b22c2800b04";
  }

  static const char* value(const ::common_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bb05648bf98b981ULL;
  static const uint64_t static_value2 = 0xe26e4b22c2800b04ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Trajectory";
  }

  static const char* value(const ::common_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Trajectory of VtdToRos\n"
"\n"
"float64 SimTim\n"
"int32 decision_type\n"
"int32 turn_light_type\n"
"int32 num \n"
"TrajectoryPoint[] trajectorypoints\n"
"\n"
"================================================================================\n"
"MSG: common_msgs/TrajectoryPoint\n"
"# TrajectoryPoint of VtdToRos\n"
"\n"
"float32 Position_x   #道路点X向坐标\n"
"float32 Position_y   #道路点Y向坐标\n"
"float32 Velocity     #道路点合速度\n"
"float32 Heading      #道路点朝向\n"
"float32 Curvature    #路点曲率\n"
"float32 t_space      #路点相对时间\n"
"float32 s_along      #沿路线距离\n"
;
  }

  static const char* value(const ::common_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SimTim);
      stream.next(m.decision_type);
      stream.next(m.turn_light_type);
      stream.next(m.num);
      stream.next(m.trajectorypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "SimTim: ";
    Printer<double>::stream(s, indent + "  ", v.SimTim);
    s << indent << "decision_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.decision_type);
    s << indent << "turn_light_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn_light_type);
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "trajectorypoints[]" << std::endl;
    for (size_t i = 0; i < v.trajectorypoints.size(); ++i)
    {
      s << indent << "  trajectorypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectorypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_TRAJECTORY_H
