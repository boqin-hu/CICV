// Generated by gencpp from file common_msgs/LidarCalibrationResult.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_LIDARCALIBRATIONRESULT_H
#define COMMON_MSGS_MESSAGE_LIDARCALIBRATIONRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/PoseEuler.h>
#include <common_msgs/CalibrationResult.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct LidarCalibrationResult_
{
  typedef LidarCalibrationResult_<ContainerAllocator> Type;

  LidarCalibrationResult_()
    : pose()
    , result()  {
    }
  LidarCalibrationResult_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , result(_alloc)  {
  (void)_alloc;
    }



   typedef  ::common_msgs::PoseEuler_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::common_msgs::CalibrationResult_<ContainerAllocator>  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> const> ConstPtr;

}; // struct LidarCalibrationResult_

typedef ::common_msgs::LidarCalibrationResult_<std::allocator<void> > LidarCalibrationResult;

typedef boost::shared_ptr< ::common_msgs::LidarCalibrationResult > LidarCalibrationResultPtr;
typedef boost::shared_ptr< ::common_msgs::LidarCalibrationResult const> LidarCalibrationResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::LidarCalibrationResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::LidarCalibrationResult_<ContainerAllocator1> & lhs, const ::common_msgs::LidarCalibrationResult_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::LidarCalibrationResult_<ContainerAllocator1> & lhs, const ::common_msgs::LidarCalibrationResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc71203314fcc658fa8b4d2918277dff";
  }

  static const char* value(const ::common_msgs::LidarCalibrationResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc71203314fcc658ULL;
  static const uint64_t static_value2 = 0xfa8b4d2918277dffULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/LidarCalibrationResult";
  }

  static const char* value(const ::common_msgs::LidarCalibrationResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PoseEuler pose\n"
"CalibrationResult result\n"
"\n"
"================================================================================\n"
"MSG: common_msgs/PoseEuler\n"
"Vector3WithCovariance 	position\n"
"EulerWithCovariance 	rotation\n"
"================================================================================\n"
"MSG: common_msgs/Vector3WithCovariance\n"
"UnsureVar 	x\n"
"UnsureVar 	y\n"
"UnsureVar 	z\n"
"================================================================================\n"
"MSG: common_msgs/UnsureVar\n"
"float64 	variable\n"
"float64 	var_std\n"
"================================================================================\n"
"MSG: common_msgs/EulerWithCovariance\n"
"UnsureVar 	roll\n"
"UnsureVar 	pitch\n"
"UnsureVar 	yaw\n"
"================================================================================\n"
"MSG: common_msgs/CalibrationResult\n"
"float64  timestamp_sec\n"
"string 	module_name\n"
"string 	version\n"
"string 	info\n"
"int8 	status\n"
;
  }

  static const char* value(const ::common_msgs::LidarCalibrationResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LidarCalibrationResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::LidarCalibrationResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::LidarCalibrationResult_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::common_msgs::PoseEuler_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "result: ";
    s << std::endl;
    Printer< ::common_msgs::CalibrationResult_<ContainerAllocator> >::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_LIDARCALIBRATIONRESULT_H
