// Generated by gencpp from file common_msgs/TimeStatus.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_TIMESTATUS_H
#define COMMON_MSGS_MESSAGE_TIMESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct TimeStatus_
{
  typedef TimeStatus_<ContainerAllocator> Type;

  TimeStatus_()
    : dtime(0.0)
    , source_node_name()
    , destination_node_name()  {
    }
  TimeStatus_(const ContainerAllocator& _alloc)
    : dtime(0.0)
    , source_node_name(_alloc)
    , destination_node_name(_alloc)  {
  (void)_alloc;
    }



   typedef double _dtime_type;
  _dtime_type dtime;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_node_name_type;
  _source_node_name_type source_node_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _destination_node_name_type;
  _destination_node_name_type destination_node_name;





  typedef boost::shared_ptr< ::common_msgs::TimeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::TimeStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TimeStatus_

typedef ::common_msgs::TimeStatus_<std::allocator<void> > TimeStatus;

typedef boost::shared_ptr< ::common_msgs::TimeStatus > TimeStatusPtr;
typedef boost::shared_ptr< ::common_msgs::TimeStatus const> TimeStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::TimeStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::TimeStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::TimeStatus_<ContainerAllocator1> & lhs, const ::common_msgs::TimeStatus_<ContainerAllocator2> & rhs)
{
  return lhs.dtime == rhs.dtime &&
    lhs.source_node_name == rhs.source_node_name &&
    lhs.destination_node_name == rhs.destination_node_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::TimeStatus_<ContainerAllocator1> & lhs, const ::common_msgs::TimeStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::TimeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::TimeStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::TimeStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::TimeStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::TimeStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::TimeStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::TimeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "781f191435805db497e08aa1e68d3eff";
  }

  static const char* value(const ::common_msgs::TimeStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x781f191435805db4ULL;
  static const uint64_t static_value2 = 0x97e08aa1e68d3effULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::TimeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/TimeStatus";
  }

  static const char* value(const ::common_msgs::TimeStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::TimeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 	dtime\n"
"string 	source_node_name\n"
"string 	destination_node_name\n"
;
  }

  static const char* value(const ::common_msgs::TimeStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::TimeStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dtime);
      stream.next(m.source_node_name);
      stream.next(m.destination_node_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::TimeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::TimeStatus_<ContainerAllocator>& v)
  {
    s << indent << "dtime: ";
    Printer<double>::stream(s, indent + "  ", v.dtime);
    s << indent << "source_node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source_node_name);
    s << indent << "destination_node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.destination_node_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_TIMESTATUS_H
