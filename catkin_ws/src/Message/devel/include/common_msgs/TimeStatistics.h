// Generated by gencpp from file common_msgs/TimeStatistics.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_TIMESTATISTICS_H
#define COMMON_MSGS_MESSAGE_TIMESTATISTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/TimeStatus.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct TimeStatistics_
{
  typedef TimeStatistics_<ContainerAllocator> Type;

  TimeStatistics_()
    : dev_time_status_msg()
    , sending_timestamp(0.0)  {
    }
  TimeStatistics_(const ContainerAllocator& _alloc)
    : dev_time_status_msg(_alloc)
    , sending_timestamp(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::common_msgs::TimeStatus_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::common_msgs::TimeStatus_<ContainerAllocator> >> _dev_time_status_msg_type;
  _dev_time_status_msg_type dev_time_status_msg;

   typedef double _sending_timestamp_type;
  _sending_timestamp_type sending_timestamp;





  typedef boost::shared_ptr< ::common_msgs::TimeStatistics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::TimeStatistics_<ContainerAllocator> const> ConstPtr;

}; // struct TimeStatistics_

typedef ::common_msgs::TimeStatistics_<std::allocator<void> > TimeStatistics;

typedef boost::shared_ptr< ::common_msgs::TimeStatistics > TimeStatisticsPtr;
typedef boost::shared_ptr< ::common_msgs::TimeStatistics const> TimeStatisticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::TimeStatistics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::TimeStatistics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::TimeStatistics_<ContainerAllocator1> & lhs, const ::common_msgs::TimeStatistics_<ContainerAllocator2> & rhs)
{
  return lhs.dev_time_status_msg == rhs.dev_time_status_msg &&
    lhs.sending_timestamp == rhs.sending_timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::TimeStatistics_<ContainerAllocator1> & lhs, const ::common_msgs::TimeStatistics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::TimeStatistics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::TimeStatistics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::TimeStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::TimeStatistics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::TimeStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::TimeStatistics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::TimeStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92d8e806eb39fab86dbb2d3c912096f8";
  }

  static const char* value(const ::common_msgs::TimeStatistics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92d8e806eb39fab8ULL;
  static const uint64_t static_value2 = 0x6dbb2d3c912096f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::TimeStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/TimeStatistics";
  }

  static const char* value(const ::common_msgs::TimeStatistics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::TimeStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TimeStatus[] 	dev_time_status_msg\n"
"float64 	sending_timestamp\n"
"================================================================================\n"
"MSG: common_msgs/TimeStatus\n"
"float64 	dtime\n"
"string 	source_node_name\n"
"string 	destination_node_name\n"
;
  }

  static const char* value(const ::common_msgs::TimeStatistics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::TimeStatistics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dev_time_status_msg);
      stream.next(m.sending_timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeStatistics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::TimeStatistics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::TimeStatistics_<ContainerAllocator>& v)
  {
    s << indent << "dev_time_status_msg[]" << std::endl;
    for (size_t i = 0; i < v.dev_time_status_msg.size(); ++i)
    {
      s << indent << "  dev_time_status_msg[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::TimeStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.dev_time_status_msg[i]);
    }
    s << indent << "sending_timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.sending_timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_TIMESTATISTICS_H
