// Generated by gencpp from file common_msgs/SingleTrafficLight.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_SINGLETRAFFICLIGHT_H
#define COMMON_MSGS_MESSAGE_SINGLETRAFFICLIGHT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct SingleTrafficLight_
{
  typedef SingleTrafficLight_<ContainerAllocator> Type;

  SingleTrafficLight_()
    : color(0)
    , id(0)
    , confidence(0.0)
    , tracking_time(0.0)  {
    }
  SingleTrafficLight_(const ContainerAllocator& _alloc)
    : color(0)
    , id(0)
    , confidence(0.0)
    , tracking_time(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _color_type;
  _color_type color;

   typedef int32_t _id_type;
  _id_type id;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef float _tracking_time_type;
  _tracking_time_type tracking_time;





  typedef boost::shared_ptr< ::common_msgs::SingleTrafficLight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::SingleTrafficLight_<ContainerAllocator> const> ConstPtr;

}; // struct SingleTrafficLight_

typedef ::common_msgs::SingleTrafficLight_<std::allocator<void> > SingleTrafficLight;

typedef boost::shared_ptr< ::common_msgs::SingleTrafficLight > SingleTrafficLightPtr;
typedef boost::shared_ptr< ::common_msgs::SingleTrafficLight const> SingleTrafficLightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::SingleTrafficLight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::SingleTrafficLight_<ContainerAllocator1> & lhs, const ::common_msgs::SingleTrafficLight_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.id == rhs.id &&
    lhs.confidence == rhs.confidence &&
    lhs.tracking_time == rhs.tracking_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::SingleTrafficLight_<ContainerAllocator1> & lhs, const ::common_msgs::SingleTrafficLight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::SingleTrafficLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::SingleTrafficLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::SingleTrafficLight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2061b2d7b133ea8f4ea7826bb7846d41";
  }

  static const char* value(const ::common_msgs::SingleTrafficLight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2061b2d7b133ea8fULL;
  static const uint64_t static_value2 = 0x4ea7826bb7846d41ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/SingleTrafficLight";
  }

  static const char* value(const ::common_msgs::SingleTrafficLight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 color #UNKNOWN_COLOR = 0; RED = 1; YELLOW = 2; GREEN = 3; BLACK = 4;\n"
"int32 id # Traffic light string-ID in the map data.\n"
"float32 confidence  #How confidence about the detected results, between 0 and 1.\n"
"float32 tracking_time  # Duration of the traffic light since detected.\n"
;
  }

  static const char* value(const ::common_msgs::SingleTrafficLight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.id);
      stream.next(m.confidence);
      stream.next(m.tracking_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleTrafficLight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::SingleTrafficLight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::SingleTrafficLight_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<int8_t>::stream(s, indent + "  ", v.color);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "tracking_time: ";
    Printer<float>::stream(s, indent + "  ", v.tracking_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_SINGLETRAFFICLIGHT_H
