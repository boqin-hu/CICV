// Generated by gencpp from file common_msgs/UnsureVar.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_UNSUREVAR_H
#define COMMON_MSGS_MESSAGE_UNSUREVAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct UnsureVar_
{
  typedef UnsureVar_<ContainerAllocator> Type;

  UnsureVar_()
    : variable(0.0)
    , var_std(0.0)  {
    }
  UnsureVar_(const ContainerAllocator& _alloc)
    : variable(0.0)
    , var_std(0.0)  {
  (void)_alloc;
    }



   typedef double _variable_type;
  _variable_type variable;

   typedef double _var_std_type;
  _var_std_type var_std;





  typedef boost::shared_ptr< ::common_msgs::UnsureVar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::UnsureVar_<ContainerAllocator> const> ConstPtr;

}; // struct UnsureVar_

typedef ::common_msgs::UnsureVar_<std::allocator<void> > UnsureVar;

typedef boost::shared_ptr< ::common_msgs::UnsureVar > UnsureVarPtr;
typedef boost::shared_ptr< ::common_msgs::UnsureVar const> UnsureVarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::UnsureVar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::UnsureVar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::UnsureVar_<ContainerAllocator1> & lhs, const ::common_msgs::UnsureVar_<ContainerAllocator2> & rhs)
{
  return lhs.variable == rhs.variable &&
    lhs.var_std == rhs.var_std;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::UnsureVar_<ContainerAllocator1> & lhs, const ::common_msgs::UnsureVar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::UnsureVar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::UnsureVar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::UnsureVar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::UnsureVar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::UnsureVar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::UnsureVar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::UnsureVar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb873e7f683e84becffacbe8b9daf29a";
  }

  static const char* value(const ::common_msgs::UnsureVar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb873e7f683e84beULL;
  static const uint64_t static_value2 = 0xcffacbe8b9daf29aULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::UnsureVar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/UnsureVar";
  }

  static const char* value(const ::common_msgs::UnsureVar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::UnsureVar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 	variable\n"
"float64 	var_std\n"
;
  }

  static const char* value(const ::common_msgs::UnsureVar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::UnsureVar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.variable);
      stream.next(m.var_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnsureVar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::UnsureVar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::UnsureVar_<ContainerAllocator>& v)
  {
    s << indent << "variable: ";
    Printer<double>::stream(s, indent + "  ", v.variable);
    s << indent << "var_std: ";
    Printer<double>::stream(s, indent + "  ", v.var_std);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_UNSUREVAR_H
