// Generated by gencpp from file common_msgs/Perceptionobject.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_PERCEPTIONOBJECT_H
#define COMMON_MSGS_MESSAGE_PERCEPTIONOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct Perceptionobject_
{
  typedef Perceptionobject_<ContainerAllocator> Type;

  Perceptionobject_()
    : SimTim(0.0)
    , ID(0)
    , x(0.0)
    , y(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , xg(0.0)
    , yg(0.0)
    , v_xg(0.0)
    , v_yg(0.0)
    , heading(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , type(0)
    , xrel(0.0)
    , yrel(0.0)
    , v_xrel(0.0)
    , v_yrel(0.0)  {
    }
  Perceptionobject_(const ContainerAllocator& _alloc)
    : SimTim(0.0)
    , ID(0)
    , x(0.0)
    , y(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , xg(0.0)
    , yg(0.0)
    , v_xg(0.0)
    , v_yg(0.0)
    , heading(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , type(0)
    , xrel(0.0)
    , yrel(0.0)
    , v_xrel(0.0)
    , v_yrel(0.0)  {
  (void)_alloc;
    }



   typedef double _SimTim_type;
  _SimTim_type SimTim;

   typedef uint32_t _ID_type;
  _ID_type ID;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _v_x_type;
  _v_x_type v_x;

   typedef double _v_y_type;
  _v_y_type v_y;

   typedef double _xg_type;
  _xg_type xg;

   typedef double _yg_type;
  _yg_type yg;

   typedef double _v_xg_type;
  _v_xg_type v_xg;

   typedef double _v_yg_type;
  _v_yg_type v_yg;

   typedef float _heading_type;
  _heading_type heading;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef uint8_t _type_type;
  _type_type type;

   typedef double _xrel_type;
  _xrel_type xrel;

   typedef double _yrel_type;
  _yrel_type yrel;

   typedef double _v_xrel_type;
  _v_xrel_type v_xrel;

   typedef double _v_yrel_type;
  _v_yrel_type v_yrel;





  typedef boost::shared_ptr< ::common_msgs::Perceptionobject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Perceptionobject_<ContainerAllocator> const> ConstPtr;

}; // struct Perceptionobject_

typedef ::common_msgs::Perceptionobject_<std::allocator<void> > Perceptionobject;

typedef boost::shared_ptr< ::common_msgs::Perceptionobject > PerceptionobjectPtr;
typedef boost::shared_ptr< ::common_msgs::Perceptionobject const> PerceptionobjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Perceptionobject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Perceptionobject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Perceptionobject_<ContainerAllocator1> & lhs, const ::common_msgs::Perceptionobject_<ContainerAllocator2> & rhs)
{
  return lhs.SimTim == rhs.SimTim &&
    lhs.ID == rhs.ID &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.v_x == rhs.v_x &&
    lhs.v_y == rhs.v_y &&
    lhs.xg == rhs.xg &&
    lhs.yg == rhs.yg &&
    lhs.v_xg == rhs.v_xg &&
    lhs.v_yg == rhs.v_yg &&
    lhs.heading == rhs.heading &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.type == rhs.type &&
    lhs.xrel == rhs.xrel &&
    lhs.yrel == rhs.yrel &&
    lhs.v_xrel == rhs.v_xrel &&
    lhs.v_yrel == rhs.v_yrel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Perceptionobject_<ContainerAllocator1> & lhs, const ::common_msgs::Perceptionobject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Perceptionobject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Perceptionobject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Perceptionobject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Perceptionobject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Perceptionobject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Perceptionobject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Perceptionobject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e487cfd175ff6d18074f7b91bb10dc6";
  }

  static const char* value(const ::common_msgs::Perceptionobject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e487cfd175ff6d1ULL;
  static const uint64_t static_value2 = 0x8074f7b91bb10dc6ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Perceptionobject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Perceptionobject";
  }

  static const char* value(const ::common_msgs::Perceptionobject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Perceptionobject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 SimTim\n"
"uint32 ID \n"
"float64 x\n"
"float64 y\n"
"float64 v_x\n"
"float64 v_y\n"
"float64 xg	\n"
"float64 yg\n"
"float64 v_xg\n"
"float64 v_yg\n"
"float32 heading	\n"
"float64 length	\n"
"float64 width\n"
"float64 height\n"
"uint8 type\n"
"float64 xrel	\n"
"float64 yrel\n"
"float64 v_xrel\n"
"float64 v_yrel\n"
"\n"
"\n"
"\n"
"#ros消息时间戳转换成double类型的时间，单位:s	\n"
"#x坐标值 FLU车体坐标系,单位:m	\n"
"#y坐标值 FLU车体坐标系,单位:m	\n"
"#x方向绝对距离，单位:m	\n"
"#y方向绝对距离，单位:m	\n"
"#单位:度	\n"
"#单位:m	\n"
"#单位:m	\n"
"#\"类型(# 0--unknown 1--pedestrian 2--cyclist 3--car 4--truck)（0-未知,1-行人，\n"
"#2-叉车，3-物料箱，4-货架，5-AMR）\"	\n"
"#x方向绝对速度，单位:m/s	\n"
"#y方向绝对速度，单位:m/s	\n"
"#x方向相对速度，单位:m/s	\n"
"#y方向相对距离，单位:m/s	\n"
"#被激光雷达检测到的次数，乘以周期（100ms）是检测到的时间	\n"
"#在utm坐标系下的x坐标	\n"
"#在utm坐标系下的y坐标	\n"
"\n"
;
  }

  static const char* value(const ::common_msgs::Perceptionobject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Perceptionobject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SimTim);
      stream.next(m.ID);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.xg);
      stream.next(m.yg);
      stream.next(m.v_xg);
      stream.next(m.v_yg);
      stream.next(m.heading);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.type);
      stream.next(m.xrel);
      stream.next(m.yrel);
      stream.next(m.v_xrel);
      stream.next(m.v_yrel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Perceptionobject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Perceptionobject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Perceptionobject_<ContainerAllocator>& v)
  {
    s << indent << "SimTim: ";
    Printer<double>::stream(s, indent + "  ", v.SimTim);
    s << indent << "ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "v_x: ";
    Printer<double>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<double>::stream(s, indent + "  ", v.v_y);
    s << indent << "xg: ";
    Printer<double>::stream(s, indent + "  ", v.xg);
    s << indent << "yg: ";
    Printer<double>::stream(s, indent + "  ", v.yg);
    s << indent << "v_xg: ";
    Printer<double>::stream(s, indent + "  ", v.v_xg);
    s << indent << "v_yg: ";
    Printer<double>::stream(s, indent + "  ", v.v_yg);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "xrel: ";
    Printer<double>::stream(s, indent + "  ", v.xrel);
    s << indent << "yrel: ";
    Printer<double>::stream(s, indent + "  ", v.yrel);
    s << indent << "v_xrel: ";
    Printer<double>::stream(s, indent + "  ", v.v_xrel);
    s << indent << "v_yrel: ";
    Printer<double>::stream(s, indent + "  ", v.v_yrel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_PERCEPTIONOBJECT_H
