// Generated by gencpp from file common_msgs/Twist.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_TWIST_H
#define COMMON_MSGS_MESSAGE_TWIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/Vector3WithCovariance.h>
#include <common_msgs/Vector3WithCovariance.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct Twist_
{
  typedef Twist_<ContainerAllocator> Type;

  Twist_()
    : velocity()
    , angular_velocity()  {
    }
  Twist_(const ContainerAllocator& _alloc)
    : velocity(_alloc)
    , angular_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::common_msgs::Vector3WithCovariance_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::common_msgs::Vector3WithCovariance_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::common_msgs::Twist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Twist_<ContainerAllocator> const> ConstPtr;

}; // struct Twist_

typedef ::common_msgs::Twist_<std::allocator<void> > Twist;

typedef boost::shared_ptr< ::common_msgs::Twist > TwistPtr;
typedef boost::shared_ptr< ::common_msgs::Twist const> TwistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Twist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Twist_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Twist_<ContainerAllocator1> & lhs, const ::common_msgs::Twist_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Twist_<ContainerAllocator1> & lhs, const ::common_msgs::Twist_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Twist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Twist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Twist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Twist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Twist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Twist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Twist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89e6e36950801075ca0366daae3a0780";
  }

  static const char* value(const ::common_msgs::Twist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89e6e36950801075ULL;
  static const uint64_t static_value2 = 0xca0366daae3a0780ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Twist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Twist";
  }

  static const char* value(const ::common_msgs::Twist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Twist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector3WithCovariance 	velocity\n"
"Vector3WithCovariance 	angular_velocity\n"
"================================================================================\n"
"MSG: common_msgs/Vector3WithCovariance\n"
"UnsureVar 	x\n"
"UnsureVar 	y\n"
"UnsureVar 	z\n"
"================================================================================\n"
"MSG: common_msgs/UnsureVar\n"
"float64 	variable\n"
"float64 	var_std\n"
;
  }

  static const char* value(const ::common_msgs::Twist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Twist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Twist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Twist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Twist_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::common_msgs::Vector3WithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::common_msgs::Vector3WithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_TWIST_H
