# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/PerceptionLocalization.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PerceptionLocalization(genpy.Message):
  _md5sum = "b871ae769d4b537baab00d1c75ff3891"
  _type = "perception_msgs/PerceptionLocalization"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """
Header header

uint64 frame_unmber
int8 fusion_level
int8 status  #4:固定解，5：浮点解，2：伪距差分，1：单点解
#rotation
float64 roll      # x,R, car body (FLU)
float64 pitch      # y,R, car body (FLU)
float64 yaw      # z,R, car body (FLU) utm (0,360)  0--east, 90--north
float32 roll_std	
float32 pitch_std
float32 yaw_std 

float64 qw          # w
float64 qx          # x
float64 qy          # y
float64 qz          # z

float64 angular_velocity_x	
float64 angular_velocity_y
float64 angular_velocity_z 


#position
float64 latitude	
float64 longitude
float64 altitude
float32 latitude_std	
float32 longitude_std
float32 altitude_std

float64 position_x  # utm_east
float64 position_y  # utm_north
float64 position_z  # utm_up
float32 position_x_std	
float32 position_y_std
float32 position_z_std

float64 velocity_x  # utm_east_speed
float64 velocity_y  # utm_north_speed
float64 velocity_z  # utm_up_speed
float32 velocity_x_std	
float32 velocity_y_std
float32 velocity_z_std

float64 velocity_rx  # ins_x_speed
float64 velocity_ry  # ins_y_speed
float64 velocity_rz  # ins_z_speed
float32 velocity_rx_std	
float32 velocity_ry_std
float32 velocity_rz_std

float64 accel_x     # R, car body (RFU)
float64 accel_y     # F, car body (RFU)
float64 accel_z     # U, car body (RFU)




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','frame_unmber','fusion_level','status','roll','pitch','yaw','roll_std','pitch_std','yaw_std','qw','qx','qy','qz','angular_velocity_x','angular_velocity_y','angular_velocity_z','latitude','longitude','altitude','latitude_std','longitude_std','altitude_std','position_x','position_y','position_z','position_x_std','position_y_std','position_z_std','velocity_x','velocity_y','velocity_z','velocity_x_std','velocity_y_std','velocity_z_std','velocity_rx','velocity_ry','velocity_rz','velocity_rx_std','velocity_ry_std','velocity_rz_std','accel_x','accel_y','accel_z']
  _slot_types = ['std_msgs/Header','uint64','int8','int8','float64','float64','float64','float32','float32','float32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float32','float32','float32','float64','float64','float64','float32','float32','float32','float64','float64','float64','float32','float32','float32','float64','float64','float64','float32','float32','float32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_unmber,fusion_level,status,roll,pitch,yaw,roll_std,pitch_std,yaw_std,qw,qx,qy,qz,angular_velocity_x,angular_velocity_y,angular_velocity_z,latitude,longitude,altitude,latitude_std,longitude_std,altitude_std,position_x,position_y,position_z,position_x_std,position_y_std,position_z_std,velocity_x,velocity_y,velocity_z,velocity_x_std,velocity_y_std,velocity_z_std,velocity_rx,velocity_ry,velocity_rz,velocity_rx_std,velocity_ry_std,velocity_rz_std,accel_x,accel_y,accel_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PerceptionLocalization, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_unmber is None:
        self.frame_unmber = 0
      if self.fusion_level is None:
        self.fusion_level = 0
      if self.status is None:
        self.status = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.roll_std is None:
        self.roll_std = 0.
      if self.pitch_std is None:
        self.pitch_std = 0.
      if self.yaw_std is None:
        self.yaw_std = 0.
      if self.qw is None:
        self.qw = 0.
      if self.qx is None:
        self.qx = 0.
      if self.qy is None:
        self.qy = 0.
      if self.qz is None:
        self.qz = 0.
      if self.angular_velocity_x is None:
        self.angular_velocity_x = 0.
      if self.angular_velocity_y is None:
        self.angular_velocity_y = 0.
      if self.angular_velocity_z is None:
        self.angular_velocity_z = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.latitude_std is None:
        self.latitude_std = 0.
      if self.longitude_std is None:
        self.longitude_std = 0.
      if self.altitude_std is None:
        self.altitude_std = 0.
      if self.position_x is None:
        self.position_x = 0.
      if self.position_y is None:
        self.position_y = 0.
      if self.position_z is None:
        self.position_z = 0.
      if self.position_x_std is None:
        self.position_x_std = 0.
      if self.position_y_std is None:
        self.position_y_std = 0.
      if self.position_z_std is None:
        self.position_z_std = 0.
      if self.velocity_x is None:
        self.velocity_x = 0.
      if self.velocity_y is None:
        self.velocity_y = 0.
      if self.velocity_z is None:
        self.velocity_z = 0.
      if self.velocity_x_std is None:
        self.velocity_x_std = 0.
      if self.velocity_y_std is None:
        self.velocity_y_std = 0.
      if self.velocity_z_std is None:
        self.velocity_z_std = 0.
      if self.velocity_rx is None:
        self.velocity_rx = 0.
      if self.velocity_ry is None:
        self.velocity_ry = 0.
      if self.velocity_rz is None:
        self.velocity_rz = 0.
      if self.velocity_rx_std is None:
        self.velocity_rx_std = 0.
      if self.velocity_ry_std is None:
        self.velocity_ry_std = 0.
      if self.velocity_rz_std is None:
        self.velocity_rz_std = 0.
      if self.accel_x is None:
        self.accel_x = 0.
      if self.accel_y is None:
        self.accel_y = 0.
      if self.accel_z is None:
        self.accel_z = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.frame_unmber = 0
      self.fusion_level = 0
      self.status = 0
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.roll_std = 0.
      self.pitch_std = 0.
      self.yaw_std = 0.
      self.qw = 0.
      self.qx = 0.
      self.qy = 0.
      self.qz = 0.
      self.angular_velocity_x = 0.
      self.angular_velocity_y = 0.
      self.angular_velocity_z = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.latitude_std = 0.
      self.longitude_std = 0.
      self.altitude_std = 0.
      self.position_x = 0.
      self.position_y = 0.
      self.position_z = 0.
      self.position_x_std = 0.
      self.position_y_std = 0.
      self.position_z_std = 0.
      self.velocity_x = 0.
      self.velocity_y = 0.
      self.velocity_z = 0.
      self.velocity_x_std = 0.
      self.velocity_y_std = 0.
      self.velocity_z_std = 0.
      self.velocity_rx = 0.
      self.velocity_ry = 0.
      self.velocity_rz = 0.
      self.velocity_rx_std = 0.
      self.velocity_ry_std = 0.
      self.velocity_rz_std = 0.
      self.accel_x = 0.
      self.accel_y = 0.
      self.accel_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q2b3d3f10d3f3d3f3d3f3d3f3d().pack(_x.frame_unmber, _x.fusion_level, _x.status, _x.roll, _x.pitch, _x.yaw, _x.roll_std, _x.pitch_std, _x.yaw_std, _x.qw, _x.qx, _x.qy, _x.qz, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.latitude, _x.longitude, _x.altitude, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.position_x, _x.position_y, _x.position_z, _x.position_x_std, _x.position_y_std, _x.position_z_std, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_x_std, _x.velocity_y_std, _x.velocity_z_std, _x.velocity_rx, _x.velocity_ry, _x.velocity_rz, _x.velocity_rx_std, _x.velocity_ry_std, _x.velocity_rz_std, _x.accel_x, _x.accel_y, _x.accel_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 270
      (_x.frame_unmber, _x.fusion_level, _x.status, _x.roll, _x.pitch, _x.yaw, _x.roll_std, _x.pitch_std, _x.yaw_std, _x.qw, _x.qx, _x.qy, _x.qz, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.latitude, _x.longitude, _x.altitude, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.position_x, _x.position_y, _x.position_z, _x.position_x_std, _x.position_y_std, _x.position_z_std, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_x_std, _x.velocity_y_std, _x.velocity_z_std, _x.velocity_rx, _x.velocity_ry, _x.velocity_rz, _x.velocity_rx_std, _x.velocity_ry_std, _x.velocity_rz_std, _x.accel_x, _x.accel_y, _x.accel_z,) = _get_struct_Q2b3d3f10d3f3d3f3d3f3d3f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q2b3d3f10d3f3d3f3d3f3d3f3d().pack(_x.frame_unmber, _x.fusion_level, _x.status, _x.roll, _x.pitch, _x.yaw, _x.roll_std, _x.pitch_std, _x.yaw_std, _x.qw, _x.qx, _x.qy, _x.qz, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.latitude, _x.longitude, _x.altitude, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.position_x, _x.position_y, _x.position_z, _x.position_x_std, _x.position_y_std, _x.position_z_std, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_x_std, _x.velocity_y_std, _x.velocity_z_std, _x.velocity_rx, _x.velocity_ry, _x.velocity_rz, _x.velocity_rx_std, _x.velocity_ry_std, _x.velocity_rz_std, _x.accel_x, _x.accel_y, _x.accel_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 270
      (_x.frame_unmber, _x.fusion_level, _x.status, _x.roll, _x.pitch, _x.yaw, _x.roll_std, _x.pitch_std, _x.yaw_std, _x.qw, _x.qx, _x.qy, _x.qz, _x.angular_velocity_x, _x.angular_velocity_y, _x.angular_velocity_z, _x.latitude, _x.longitude, _x.altitude, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.position_x, _x.position_y, _x.position_z, _x.position_x_std, _x.position_y_std, _x.position_z_std, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.velocity_x_std, _x.velocity_y_std, _x.velocity_z_std, _x.velocity_rx, _x.velocity_ry, _x.velocity_rz, _x.velocity_rx_std, _x.velocity_ry_std, _x.velocity_rz_std, _x.accel_x, _x.accel_y, _x.accel_z,) = _get_struct_Q2b3d3f10d3f3d3f3d3f3d3f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Q2b3d3f10d3f3d3f3d3f3d3f3d = None
def _get_struct_Q2b3d3f10d3f3d3f3d3f3d3f3d():
    global _struct_Q2b3d3f10d3f3d3f3d3f3d3f3d
    if _struct_Q2b3d3f10d3f3d3f3d3f3d3f3d is None:
        _struct_Q2b3d3f10d3f3d3f3d3f3d3f3d = struct.Struct("<Q2b3d3f10d3f3d3f3d3f3d3f3d")
    return _struct_Q2b3d3f10d3f3d3f3d3f3d3f3d
