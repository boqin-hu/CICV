# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/TrajectoryInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_msgs.msg

class TrajectoryInfo(genpy.Message):
  _md5sum = "c7d900a70debd0d52467ed4c06e4dc57"
  _type = "perception_msgs/TrajectoryInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 path_id
float32 total_path_length
float32 total_path_time
int8 decision_type
int8 light_type
string[] lane_ids
TrajectoryPoint[] trajectorypoints

================================================================================
MSG: perception_msgs/TrajectoryPoint
Point2D position
float32 velocity
float32 heading
float32 curvature
float32 s
float32 t
int8 point_type

================================================================================
MSG: perception_msgs/Point2D
float64 x
float64 y
"""
  __slots__ = ['path_id','total_path_length','total_path_time','decision_type','light_type','lane_ids','trajectorypoints']
  _slot_types = ['int32','float32','float32','int8','int8','string[]','perception_msgs/TrajectoryPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path_id,total_path_length,total_path_time,decision_type,light_type,lane_ids,trajectorypoints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path_id is None:
        self.path_id = 0
      if self.total_path_length is None:
        self.total_path_length = 0.
      if self.total_path_time is None:
        self.total_path_time = 0.
      if self.decision_type is None:
        self.decision_type = 0
      if self.light_type is None:
        self.light_type = 0
      if self.lane_ids is None:
        self.lane_ids = []
      if self.trajectorypoints is None:
        self.trajectorypoints = []
    else:
      self.path_id = 0
      self.total_path_length = 0.
      self.total_path_time = 0.
      self.decision_type = 0
      self.light_type = 0
      self.lane_ids = []
      self.trajectorypoints = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2f2b().pack(_x.path_id, _x.total_path_length, _x.total_path_time, _x.decision_type, _x.light_type))
      length = len(self.lane_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.trajectorypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectorypoints:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_5fb().pack(_x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectorypoints is None:
        self.trajectorypoints = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.path_id, _x.total_path_length, _x.total_path_time, _x.decision_type, _x.light_type,) = _get_struct_i2f2b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.lane_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectorypoints = []
      for i in range(0, length):
        val1 = perception_msgs.msg.TrajectoryPoint()
        _v2 = val1.position
        _x = _v2
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 21
        (_x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type,) = _get_struct_5fb().unpack(str[start:end])
        self.trajectorypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2f2b().pack(_x.path_id, _x.total_path_length, _x.total_path_time, _x.decision_type, _x.light_type))
      length = len(self.lane_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.trajectorypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectorypoints:
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_5fb().pack(_x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectorypoints is None:
        self.trajectorypoints = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.path_id, _x.total_path_length, _x.total_path_time, _x.decision_type, _x.light_type,) = _get_struct_i2f2b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.lane_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectorypoints = []
      for i in range(0, length):
        val1 = perception_msgs.msg.TrajectoryPoint()
        _v4 = val1.position
        _x = _v4
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 21
        (_x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type,) = _get_struct_5fb().unpack(str[start:end])
        self.trajectorypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_5fb = None
def _get_struct_5fb():
    global _struct_5fb
    if _struct_5fb is None:
        _struct_5fb = struct.Struct("<5fb")
    return _struct_5fb
_struct_i2f2b = None
def _get_struct_i2f2b():
    global _struct_i2f2b
    if _struct_i2f2b is None:
        _struct_i2f2b = struct.Struct("<i2f2b")
    return _struct_i2f2b
