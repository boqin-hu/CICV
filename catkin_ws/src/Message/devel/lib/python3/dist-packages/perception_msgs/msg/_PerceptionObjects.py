# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/PerceptionObjects.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import common_msgs.msg
import perception_msgs.msg

class PerceptionObjects(genpy.Message):
  _md5sum = "79908444545b6666f901065dc0df6345"
  _type = "perception_msgs/PerceptionObjects"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """common_msgs/Header header
Object[] objs
ObstacleCell[] cells
================================================================================
MSG: common_msgs/Header
int32 sequence_num
float64 time_stamp
string 	module_name
string 	version
FaultVec 	fault_vec
TimeStatistics 	time_statistics
================================================================================
MSG: common_msgs/FaultVec
FaultInfo[] 	info_vec
int32 	module_fault_level

================================================================================
MSG: common_msgs/FaultInfo
float64 	timestamp_sec
string 	module_name
string 	version
int32 	error_code
string 	msg
int8 	fault_level
int8 	fault_type
================================================================================
MSG: common_msgs/TimeStatistics
TimeStatus[] 	dev_time_status_msg
float64 	sending_timestamp
================================================================================
MSG: common_msgs/TimeStatus
float64 	dtime
string 	source_node_name
string 	destination_node_name
================================================================================
MSG: perception_msgs/Object
uint32 id 						# obstacle ID.
float32 x  		# relative distance of x, VCS, unit: m
float32 y 		# relative distance of y, VCS, unit: m
float32 z 						# relative distance of z, VCS, unit: m
float32 vxrel     # relative speed of x, VCS, unit: m/s
float32 vyrel     # relative speed of y, VCS, unit: m/s
float64 xabs      # relative distance of x, VCS, unit: m
float64 yabs      # relative distance of y, VCS, unit: m
float32 vxabs     # relative speed of x, VCS, unit: m/s
float32 vyabs     # relative speed of y, VCS, unit: m/s
float32 width     # unit: m
float32 length    # unit: m
float32 height     				# unit: m
float32 speed      				# unit: m/s
float32 heading      			# unit: du
uint8 type 					# CAR_TYPE=0, TRUCK_TYPE=1, PEDESTRIAN_TYPE=2, CYCLIST_TYPE=3, UNKNOWN_TYPE=4, UNKNOWN_MOVABLE_TYPE=5, UNKNOWN_UNMOVABLE_TYPE=6
uint8 source 					# VISION=0x0000 MOBILEYE=0x0001 LIDAR=0x0100 RADAR=0x0200 ARS_0=0x0201   ARS_1=0x0202  ARS_2=0x0203  ARS_3=0x0204
float32 confidence				# 0.0~1.0
uint32 age						# 
uint8 velocitystatus 			# 
ObstacleCell[] cells 

# uint8 track_level
# uint8 invi_count
# uint8 vis_count

# float32 acc_x
# float32 acc_y


================================================================================
MSG: perception_msgs/ObstacleCell
int32 idc
float64 x
float64 y
float64 xg
float64 yg"""
  __slots__ = ['header','objs','cells']
  _slot_types = ['common_msgs/Header','perception_msgs/Object[]','perception_msgs/ObstacleCell[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objs,cells

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PerceptionObjects, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.objs is None:
        self.objs = []
      if self.cells is None:
        self.cells = []
    else:
      self.header = common_msgs.msg.Header()
      self.objs = []
      self.cells = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_id().pack(_x.header.sequence_num, _x.header.time_stamp))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.header.fault_vec.info_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.fault_vec.info_vec:
        _x = val1.timestamp_sec
        buff.write(_get_struct_d().pack(_x))
        _x = val1.module_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = val1.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.fault_level, _x.fault_type))
      _x = self.header.fault_vec.module_fault_level
      buff.write(_get_struct_i().pack(_x))
      length = len(self.header.time_statistics.dev_time_status_msg)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.time_statistics.dev_time_status_msg:
        _x = val1.dtime
        buff.write(_get_struct_d().pack(_x))
        _x = val1.source_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.destination_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.time_statistics.sending_timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.objs)
      buff.write(_struct_I.pack(length))
      for val1 in self.objs:
        _x = val1
        buff.write(_get_struct_I5f2d7f2BfIB().pack(_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus))
        length = len(val1.cells)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cells:
          _x = val2
          buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.objs is None:
        self.objs = None
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.sequence_num, _x.header.time_stamp,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.fault_vec.info_vec = []
      for i in range(0, length):
        val1 = common_msgs.msg.FaultInfo()
        start = end
        end += 8
        (val1.timestamp_sec,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.module_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.module_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.version = str[start:end]
        start = end
        end += 4
        (val1.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.msg = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.fault_level, _x.fault_type,) = _get_struct_2b().unpack(str[start:end])
        self.header.fault_vec.info_vec.append(val1)
      start = end
      end += 4
      (self.header.fault_vec.module_fault_level,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.time_statistics.dev_time_status_msg = []
      for i in range(0, length):
        val1 = common_msgs.msg.TimeStatus()
        start = end
        end += 8
        (val1.dtime,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.source_node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.destination_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.destination_node_name = str[start:end]
        self.header.time_statistics.dev_time_status_msg.append(val1)
      start = end
      end += 8
      (self.header.time_statistics.sending_timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objs = []
      for i in range(0, length):
        val1 = perception_msgs.msg.Object()
        _x = val1
        start = end
        end += 79
        (_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus,) = _get_struct_I5f2d7f2BfIB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cells = []
        for i in range(0, length):
          val2 = perception_msgs.msg.ObstacleCell()
          _x = val2
          start = end
          end += 36
          (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
          val1.cells.append(val2)
        self.objs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ObstacleCell()
        _x = val1
        start = end
        end += 36
        (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_id().pack(_x.header.sequence_num, _x.header.time_stamp))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.header.fault_vec.info_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.fault_vec.info_vec:
        _x = val1.timestamp_sec
        buff.write(_get_struct_d().pack(_x))
        _x = val1.module_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = val1.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.fault_level, _x.fault_type))
      _x = self.header.fault_vec.module_fault_level
      buff.write(_get_struct_i().pack(_x))
      length = len(self.header.time_statistics.dev_time_status_msg)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.time_statistics.dev_time_status_msg:
        _x = val1.dtime
        buff.write(_get_struct_d().pack(_x))
        _x = val1.source_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.destination_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.time_statistics.sending_timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.objs)
      buff.write(_struct_I.pack(length))
      for val1 in self.objs:
        _x = val1
        buff.write(_get_struct_I5f2d7f2BfIB().pack(_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus))
        length = len(val1.cells)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cells:
          _x = val2
          buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.objs is None:
        self.objs = None
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.sequence_num, _x.header.time_stamp,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.fault_vec.info_vec = []
      for i in range(0, length):
        val1 = common_msgs.msg.FaultInfo()
        start = end
        end += 8
        (val1.timestamp_sec,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.module_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.module_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.version = str[start:end]
        start = end
        end += 4
        (val1.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.msg = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.fault_level, _x.fault_type,) = _get_struct_2b().unpack(str[start:end])
        self.header.fault_vec.info_vec.append(val1)
      start = end
      end += 4
      (self.header.fault_vec.module_fault_level,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.time_statistics.dev_time_status_msg = []
      for i in range(0, length):
        val1 = common_msgs.msg.TimeStatus()
        start = end
        end += 8
        (val1.dtime,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.source_node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.destination_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.destination_node_name = str[start:end]
        self.header.time_statistics.dev_time_status_msg.append(val1)
      start = end
      end += 8
      (self.header.time_statistics.sending_timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objs = []
      for i in range(0, length):
        val1 = perception_msgs.msg.Object()
        _x = val1
        start = end
        end += 79
        (_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus,) = _get_struct_I5f2d7f2BfIB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cells = []
        for i in range(0, length):
          val2 = perception_msgs.msg.ObstacleCell()
          _x = val2
          start = end
          end += 36
          (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
          val1.cells.append(val2)
        self.objs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ObstacleCell()
        _x = val1
        start = end
        end += 36
        (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_I5f2d7f2BfIB = None
def _get_struct_I5f2d7f2BfIB():
    global _struct_I5f2d7f2BfIB
    if _struct_I5f2d7f2BfIB is None:
        _struct_I5f2d7f2BfIB = struct.Struct("<I5f2d7f2BfIB")
    return _struct_I5f2d7f2BfIB
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i4d = None
def _get_struct_i4d():
    global _struct_i4d
    if _struct_i4d is None:
        _struct_i4d = struct.Struct("<i4d")
    return _struct_i4d
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
