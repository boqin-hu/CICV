# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/Object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_msgs.msg

class Object(genpy.Message):
  _md5sum = "8076fab59ac243046da9a425a9cf9fc0"
  _type = "perception_msgs/Object"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id 						# obstacle ID.
float32 x  		# relative distance of x, VCS, unit: m
float32 y 		# relative distance of y, VCS, unit: m
float32 z 						# relative distance of z, VCS, unit: m
float32 vxrel     # relative speed of x, VCS, unit: m/s
float32 vyrel     # relative speed of y, VCS, unit: m/s
float64 xabs      # relative distance of x, VCS, unit: m
float64 yabs      # relative distance of y, VCS, unit: m
float32 vxabs     # relative speed of x, VCS, unit: m/s
float32 vyabs     # relative speed of y, VCS, unit: m/s
float32 width     # unit: m
float32 length    # unit: m
float32 height     				# unit: m
float32 speed      				# unit: m/s
float32 heading      			# unit: du
uint8 type 					# CAR_TYPE=0, TRUCK_TYPE=1, PEDESTRIAN_TYPE=2, CYCLIST_TYPE=3, UNKNOWN_TYPE=4, UNKNOWN_MOVABLE_TYPE=5, UNKNOWN_UNMOVABLE_TYPE=6
uint8 source 					# VISION=0x0000 MOBILEYE=0x0001 LIDAR=0x0100 RADAR=0x0200 ARS_0=0x0201   ARS_1=0x0202  ARS_2=0x0203  ARS_3=0x0204
float32 confidence				# 0.0~1.0
uint32 age						# 
uint8 velocitystatus 			# 
ObstacleCell[] cells 

# uint8 track_level
# uint8 invi_count
# uint8 vis_count

# float32 acc_x
# float32 acc_y


================================================================================
MSG: perception_msgs/ObstacleCell
int32 idc
float64 x
float64 y
float64 xg
float64 yg"""
  __slots__ = ['id','x','y','z','vxrel','vyrel','xabs','yabs','vxabs','vyabs','width','length','height','speed','heading','type','source','confidence','age','velocitystatus','cells']
  _slot_types = ['uint32','float32','float32','float32','float32','float32','float64','float64','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','float32','uint32','uint8','perception_msgs/ObstacleCell[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,x,y,z,vxrel,vyrel,xabs,yabs,vxabs,vyabs,width,length,height,speed,heading,type,source,confidence,age,velocitystatus,cells

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.vxrel is None:
        self.vxrel = 0.
      if self.vyrel is None:
        self.vyrel = 0.
      if self.xabs is None:
        self.xabs = 0.
      if self.yabs is None:
        self.yabs = 0.
      if self.vxabs is None:
        self.vxabs = 0.
      if self.vyabs is None:
        self.vyabs = 0.
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.height is None:
        self.height = 0.
      if self.speed is None:
        self.speed = 0.
      if self.heading is None:
        self.heading = 0.
      if self.type is None:
        self.type = 0
      if self.source is None:
        self.source = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.age is None:
        self.age = 0
      if self.velocitystatus is None:
        self.velocitystatus = 0
      if self.cells is None:
        self.cells = []
    else:
      self.id = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.vxrel = 0.
      self.vyrel = 0.
      self.xabs = 0.
      self.yabs = 0.
      self.vxabs = 0.
      self.vyabs = 0.
      self.width = 0.
      self.length = 0.
      self.height = 0.
      self.speed = 0.
      self.heading = 0.
      self.type = 0
      self.source = 0
      self.confidence = 0.
      self.age = 0
      self.velocitystatus = 0
      self.cells = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I5f2d7f2BfIB().pack(_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 79
      (_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus,) = _get_struct_I5f2d7f2BfIB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ObstacleCell()
        _x = val1
        start = end
        end += 36
        (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I5f2d7f2BfIB().pack(_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 79
      (_x.id, _x.x, _x.y, _x.z, _x.vxrel, _x.vyrel, _x.xabs, _x.yabs, _x.vxabs, _x.vyabs, _x.width, _x.length, _x.height, _x.speed, _x.heading, _x.type, _x.source, _x.confidence, _x.age, _x.velocitystatus,) = _get_struct_I5f2d7f2BfIB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ObstacleCell()
        _x = val1
        start = end
        end += 36
        (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I5f2d7f2BfIB = None
def _get_struct_I5f2d7f2BfIB():
    global _struct_I5f2d7f2BfIB
    if _struct_I5f2d7f2BfIB is None:
        _struct_I5f2d7f2BfIB = struct.Struct("<I5f2d7f2BfIB")
    return _struct_I5f2d7f2BfIB
_struct_i4d = None
def _get_struct_i4d():
    global _struct_i4d
    if _struct_i4d is None:
        _struct_i4d = struct.Struct("<i4d")
    return _struct_i4d
