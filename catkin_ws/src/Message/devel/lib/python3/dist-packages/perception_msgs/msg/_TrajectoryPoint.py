# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/TrajectoryPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_msgs.msg

class TrajectoryPoint(genpy.Message):
  _md5sum = "308fbdfad21569e0af17819e9dd2a2d2"
  _type = "perception_msgs/TrajectoryPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Point2D position
float32 velocity
float32 heading
float32 curvature
float32 s
float32 t
int8 point_type

================================================================================
MSG: perception_msgs/Point2D
float64 x
float64 y
"""
  __slots__ = ['position','velocity','heading','curvature','s','t','point_type']
  _slot_types = ['perception_msgs/Point2D','float32','float32','float32','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,velocity,heading,curvature,s,t,point_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = perception_msgs.msg.Point2D()
      if self.velocity is None:
        self.velocity = 0.
      if self.heading is None:
        self.heading = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.s is None:
        self.s = 0.
      if self.t is None:
        self.t = 0.
      if self.point_type is None:
        self.point_type = 0
    else:
      self.position = perception_msgs.msg.Point2D()
      self.velocity = 0.
      self.heading = 0.
      self.curvature = 0.
      self.s = 0.
      self.t = 0.
      self.point_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d5fb().pack(_x.position.x, _x.position.y, _x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = perception_msgs.msg.Point2D()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.position.x, _x.position.y, _x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type,) = _get_struct_2d5fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d5fb().pack(_x.position.x, _x.position.y, _x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = perception_msgs.msg.Point2D()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.position.x, _x.position.y, _x.velocity, _x.heading, _x.curvature, _x.s, _x.t, _x.point_type,) = _get_struct_2d5fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d5fb = None
def _get_struct_2d5fb():
    global _struct_2d5fb
    if _struct_2d5fb is None:
        _struct_2d5fb = struct.Struct("<2d5fb")
    return _struct_2d5fb
