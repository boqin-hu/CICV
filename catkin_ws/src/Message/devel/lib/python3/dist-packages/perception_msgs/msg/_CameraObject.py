# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/CameraObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import perception_msgs.msg
import std_msgs.msg

class CameraObject(genpy.Message):
  _md5sum = "411f3ce7123561d2bd0f9079d3ec3e83"
  _type = "perception_msgs/CameraObject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

uint8  sensor_id  # sensor id, 0-front_long_focus, 1-front_short_focus, 2-right, 3-rear, 4-left
uint32 object_id
float32 detect_confidence
float32 type_confidence
float32 azimuth
float32 yaw  # car-body(R-F-U)  R--0, F--90,  (0,360)

uint8 type  # 0--unknown 1--pedestrian 2--cyclist 3--car 4--truck
float32 tracking_time   #
int8 tracking_level     #
int8 lane_assignment    #

geometry_msgs/Point32 position  # relative position, car-body(R-F-U)
geometry_msgs/Vector3 velocity  # relative velocity, car-body(R-F-U)
geometry_msgs/Vector3 acceleration  # relative acceleration, car-body(R-F-U)
geometry_msgs/Vector3 dimensions  # the scale of obj  x--length, y--width, z--height

Point2D pixel_central_point 
Point2D pixel_box_size


 



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: perception_msgs/Point2D
float64 x
float64 y
"""
  __slots__ = ['header','sensor_id','object_id','detect_confidence','type_confidence','azimuth','yaw','type','tracking_time','tracking_level','lane_assignment','position','velocity','acceleration','dimensions','pixel_central_point','pixel_box_size']
  _slot_types = ['std_msgs/Header','uint8','uint32','float32','float32','float32','float32','uint8','float32','int8','int8','geometry_msgs/Point32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','perception_msgs/Point2D','perception_msgs/Point2D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sensor_id,object_id,detect_confidence,type_confidence,azimuth,yaw,type,tracking_time,tracking_level,lane_assignment,position,velocity,acceleration,dimensions,pixel_central_point,pixel_box_size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.object_id is None:
        self.object_id = 0
      if self.detect_confidence is None:
        self.detect_confidence = 0.
      if self.type_confidence is None:
        self.type_confidence = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.type is None:
        self.type = 0
      if self.tracking_time is None:
        self.tracking_time = 0.
      if self.tracking_level is None:
        self.tracking_level = 0
      if self.lane_assignment is None:
        self.lane_assignment = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.pixel_central_point is None:
        self.pixel_central_point = perception_msgs.msg.Point2D()
      if self.pixel_box_size is None:
        self.pixel_box_size = perception_msgs.msg.Point2D()
    else:
      self.header = std_msgs.msg.Header()
      self.sensor_id = 0
      self.object_id = 0
      self.detect_confidence = 0.
      self.type_confidence = 0.
      self.azimuth = 0.
      self.yaw = 0.
      self.type = 0
      self.tracking_time = 0.
      self.tracking_level = 0
      self.lane_assignment = 0
      self.position = geometry_msgs.msg.Point32()
      self.velocity = geometry_msgs.msg.Vector3()
      self.acceleration = geometry_msgs.msg.Vector3()
      self.dimensions = geometry_msgs.msg.Vector3()
      self.pixel_central_point = perception_msgs.msg.Point2D()
      self.pixel_box_size = perception_msgs.msg.Point2D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI4fBf2b3f13d().pack(_x.sensor_id, _x.object_id, _x.detect_confidence, _x.type_confidence, _x.azimuth, _x.yaw, _x.type, _x.tracking_time, _x.tracking_level, _x.lane_assignment, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.pixel_central_point.x, _x.pixel_central_point.y, _x.pixel_box_size.x, _x.pixel_box_size.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.pixel_central_point is None:
        self.pixel_central_point = perception_msgs.msg.Point2D()
      if self.pixel_box_size is None:
        self.pixel_box_size = perception_msgs.msg.Point2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 144
      (_x.sensor_id, _x.object_id, _x.detect_confidence, _x.type_confidence, _x.azimuth, _x.yaw, _x.type, _x.tracking_time, _x.tracking_level, _x.lane_assignment, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.pixel_central_point.x, _x.pixel_central_point.y, _x.pixel_box_size.x, _x.pixel_box_size.y,) = _get_struct_BI4fBf2b3f13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI4fBf2b3f13d().pack(_x.sensor_id, _x.object_id, _x.detect_confidence, _x.type_confidence, _x.azimuth, _x.yaw, _x.type, _x.tracking_time, _x.tracking_level, _x.lane_assignment, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.pixel_central_point.x, _x.pixel_central_point.y, _x.pixel_box_size.x, _x.pixel_box_size.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point32()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.pixel_central_point is None:
        self.pixel_central_point = perception_msgs.msg.Point2D()
      if self.pixel_box_size is None:
        self.pixel_box_size = perception_msgs.msg.Point2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 144
      (_x.sensor_id, _x.object_id, _x.detect_confidence, _x.type_confidence, _x.azimuth, _x.yaw, _x.type, _x.tracking_time, _x.tracking_level, _x.lane_assignment, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.pixel_central_point.x, _x.pixel_central_point.y, _x.pixel_box_size.x, _x.pixel_box_size.y,) = _get_struct_BI4fBf2b3f13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BI4fBf2b3f13d = None
def _get_struct_BI4fBf2b3f13d():
    global _struct_BI4fBf2b3f13d
    if _struct_BI4fBf2b3f13d is None:
        _struct_BI4fBf2b3f13d = struct.Struct("<BI4fBf2b3f13d")
    return _struct_BI4fBf2b3f13d
