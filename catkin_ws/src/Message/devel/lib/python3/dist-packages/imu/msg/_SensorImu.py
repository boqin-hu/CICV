# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imu/SensorImu.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import common_msgs.msg
import imu.msg

class SensorImu(genpy.Message):
  _md5sum = "74871aed203561f29ce57a860f116fa6"
  _type = "imu/SensorImu"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """common_msgs/Header 	header
common_msgs/LLH 	llh
common_msgs/Pose 	pose
common_msgs/Twist 	twist
common_msgs/Vector3 	acceleration
common_msgs/UnsureVar 	v
common_msgs/NavStatus 	nav_status
common_msgs/DRPoseWithTime dr_pose_and_time
LocalizationControl localization_control

================================================================================
MSG: common_msgs/Header
int32 sequence_num
float64 time_stamp
string 	module_name
string 	version
FaultVec 	fault_vec
TimeStatistics 	time_statistics
================================================================================
MSG: common_msgs/FaultVec
FaultInfo[] 	info_vec
int32 	module_fault_level

================================================================================
MSG: common_msgs/FaultInfo
float64 	timestamp_sec
string 	module_name
string 	version
int32 	error_code
string 	msg
int8 	fault_level
int8 	fault_type
================================================================================
MSG: common_msgs/TimeStatistics
TimeStatus[] 	dev_time_status_msg
float64 	sending_timestamp
================================================================================
MSG: common_msgs/TimeStatus
float64 	dtime
string 	source_node_name
string 	destination_node_name
================================================================================
MSG: common_msgs/LLH
UnsureVar 	lat
UnsureVar 	lon
UnsureVar 	height
================================================================================
MSG: common_msgs/UnsureVar
float64 	variable
float64 	var_std
================================================================================
MSG: common_msgs/Pose
PoseEuler  	pose_euler
PoseQuaternion 	pose_quaternion
int8  	status   # 0-normal  1-error
================================================================================
MSG: common_msgs/PoseEuler
Vector3WithCovariance 	position
EulerWithCovariance 	rotation
================================================================================
MSG: common_msgs/Vector3WithCovariance
UnsureVar 	x
UnsureVar 	y
UnsureVar 	z
================================================================================
MSG: common_msgs/EulerWithCovariance
UnsureVar 	roll
UnsureVar 	pitch
UnsureVar 	yaw
================================================================================
MSG: common_msgs/PoseQuaternion
Vector3WithCovariance 	position
Quaternion 	quaternion
Vector3  rpy_covariance	
================================================================================
MSG: common_msgs/Quaternion
float64 	x
float64 	y
float64 	z
float64 	w
================================================================================
MSG: common_msgs/Vector3
float64 	x
float64 	y
float64 	z
================================================================================
MSG: common_msgs/Twist
Vector3WithCovariance 	velocity
Vector3WithCovariance 	angular_velocity
================================================================================
MSG: common_msgs/NavStatus
float64 	utc_time
int8 	gps_status # 0-nofix  1-single  2-psrdiff  3-code_diff  4-narrow_init  5-narrow_float
int32 	pos_status
int32  	att_status
int32  	init_status
int32  	sate_num
float32  	hdop
float32  	pdop
float32  	diff_age
================================================================================
MSG: common_msgs/DRPoseWithTime
int32      week
float64    utctime
float64    dr_time
PoseEuler  pose_euler
================================================================================
MSG: imu/LocalizationControl
bool is_lidar_open"""
  __slots__ = ['header','llh','pose','twist','acceleration','v','nav_status','dr_pose_and_time','localization_control']
  _slot_types = ['common_msgs/Header','common_msgs/LLH','common_msgs/Pose','common_msgs/Twist','common_msgs/Vector3','common_msgs/UnsureVar','common_msgs/NavStatus','common_msgs/DRPoseWithTime','imu/LocalizationControl']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,llh,pose,twist,acceleration,v,nav_status,dr_pose_and_time,localization_control

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorImu, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.llh is None:
        self.llh = common_msgs.msg.LLH()
      if self.pose is None:
        self.pose = common_msgs.msg.Pose()
      if self.twist is None:
        self.twist = common_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = common_msgs.msg.Vector3()
      if self.v is None:
        self.v = common_msgs.msg.UnsureVar()
      if self.nav_status is None:
        self.nav_status = common_msgs.msg.NavStatus()
      if self.dr_pose_and_time is None:
        self.dr_pose_and_time = common_msgs.msg.DRPoseWithTime()
      if self.localization_control is None:
        self.localization_control = imu.msg.LocalizationControl()
    else:
      self.header = common_msgs.msg.Header()
      self.llh = common_msgs.msg.LLH()
      self.pose = common_msgs.msg.Pose()
      self.twist = common_msgs.msg.Twist()
      self.acceleration = common_msgs.msg.Vector3()
      self.v = common_msgs.msg.UnsureVar()
      self.nav_status = common_msgs.msg.NavStatus()
      self.dr_pose_and_time = common_msgs.msg.DRPoseWithTime()
      self.localization_control = imu.msg.LocalizationControl()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_id().pack(_x.header.sequence_num, _x.header.time_stamp))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.header.fault_vec.info_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.fault_vec.info_vec:
        _x = val1.timestamp_sec
        buff.write(_get_struct_d().pack(_x))
        _x = val1.module_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = val1.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.fault_level, _x.fault_type))
      _x = self.header.fault_vec.module_fault_level
      buff.write(_get_struct_i().pack(_x))
      length = len(self.header.time_statistics.dev_time_status_msg)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.time_statistics.dev_time_status_msg:
        _x = val1.dtime
        buff.write(_get_struct_d().pack(_x))
        _x = val1.source_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.destination_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_32db18db4i3fi14dB().pack(_x.header.time_statistics.sending_timestamp, _x.llh.lat.variable, _x.llh.lat.var_std, _x.llh.lon.variable, _x.llh.lon.var_std, _x.llh.height.variable, _x.llh.height.var_std, _x.pose.pose_euler.position.x.variable, _x.pose.pose_euler.position.x.var_std, _x.pose.pose_euler.position.y.variable, _x.pose.pose_euler.position.y.var_std, _x.pose.pose_euler.position.z.variable, _x.pose.pose_euler.position.z.var_std, _x.pose.pose_euler.rotation.roll.variable, _x.pose.pose_euler.rotation.roll.var_std, _x.pose.pose_euler.rotation.pitch.variable, _x.pose.pose_euler.rotation.pitch.var_std, _x.pose.pose_euler.rotation.yaw.variable, _x.pose.pose_euler.rotation.yaw.var_std, _x.pose.pose_quaternion.position.x.variable, _x.pose.pose_quaternion.position.x.var_std, _x.pose.pose_quaternion.position.y.variable, _x.pose.pose_quaternion.position.y.var_std, _x.pose.pose_quaternion.position.z.variable, _x.pose.pose_quaternion.position.z.var_std, _x.pose.pose_quaternion.quaternion.x, _x.pose.pose_quaternion.quaternion.y, _x.pose.pose_quaternion.quaternion.z, _x.pose.pose_quaternion.quaternion.w, _x.pose.pose_quaternion.rpy_covariance.x, _x.pose.pose_quaternion.rpy_covariance.y, _x.pose.pose_quaternion.rpy_covariance.z, _x.pose.status, _x.twist.velocity.x.variable, _x.twist.velocity.x.var_std, _x.twist.velocity.y.variable, _x.twist.velocity.y.var_std, _x.twist.velocity.z.variable, _x.twist.velocity.z.var_std, _x.twist.angular_velocity.x.variable, _x.twist.angular_velocity.x.var_std, _x.twist.angular_velocity.y.variable, _x.twist.angular_velocity.y.var_std, _x.twist.angular_velocity.z.variable, _x.twist.angular_velocity.z.var_std, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.v.variable, _x.v.var_std, _x.nav_status.utc_time, _x.nav_status.gps_status, _x.nav_status.pos_status, _x.nav_status.att_status, _x.nav_status.init_status, _x.nav_status.sate_num, _x.nav_status.hdop, _x.nav_status.pdop, _x.nav_status.diff_age, _x.dr_pose_and_time.week, _x.dr_pose_and_time.utctime, _x.dr_pose_and_time.dr_time, _x.dr_pose_and_time.pose_euler.position.x.variable, _x.dr_pose_and_time.pose_euler.position.x.var_std, _x.dr_pose_and_time.pose_euler.position.y.variable, _x.dr_pose_and_time.pose_euler.position.y.var_std, _x.dr_pose_and_time.pose_euler.position.z.variable, _x.dr_pose_and_time.pose_euler.position.z.var_std, _x.dr_pose_and_time.pose_euler.rotation.roll.variable, _x.dr_pose_and_time.pose_euler.rotation.roll.var_std, _x.dr_pose_and_time.pose_euler.rotation.pitch.variable, _x.dr_pose_and_time.pose_euler.rotation.pitch.var_std, _x.dr_pose_and_time.pose_euler.rotation.yaw.variable, _x.dr_pose_and_time.pose_euler.rotation.yaw.var_std, _x.localization_control.is_lidar_open))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.llh is None:
        self.llh = common_msgs.msg.LLH()
      if self.pose is None:
        self.pose = common_msgs.msg.Pose()
      if self.twist is None:
        self.twist = common_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = common_msgs.msg.Vector3()
      if self.v is None:
        self.v = common_msgs.msg.UnsureVar()
      if self.nav_status is None:
        self.nav_status = common_msgs.msg.NavStatus()
      if self.dr_pose_and_time is None:
        self.dr_pose_and_time = common_msgs.msg.DRPoseWithTime()
      if self.localization_control is None:
        self.localization_control = imu.msg.LocalizationControl()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.sequence_num, _x.header.time_stamp,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.fault_vec.info_vec = []
      for i in range(0, length):
        val1 = common_msgs.msg.FaultInfo()
        start = end
        end += 8
        (val1.timestamp_sec,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.module_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.module_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.version = str[start:end]
        start = end
        end += 4
        (val1.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.msg = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.fault_level, _x.fault_type,) = _get_struct_2b().unpack(str[start:end])
        self.header.fault_vec.info_vec.append(val1)
      start = end
      end += 4
      (self.header.fault_vec.module_fault_level,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.time_statistics.dev_time_status_msg = []
      for i in range(0, length):
        val1 = common_msgs.msg.TimeStatus()
        start = end
        end += 8
        (val1.dtime,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.source_node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.destination_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.destination_node_name = str[start:end]
        self.header.time_statistics.dev_time_status_msg.append(val1)
      _x = self
      start = end
      end += 547
      (_x.header.time_statistics.sending_timestamp, _x.llh.lat.variable, _x.llh.lat.var_std, _x.llh.lon.variable, _x.llh.lon.var_std, _x.llh.height.variable, _x.llh.height.var_std, _x.pose.pose_euler.position.x.variable, _x.pose.pose_euler.position.x.var_std, _x.pose.pose_euler.position.y.variable, _x.pose.pose_euler.position.y.var_std, _x.pose.pose_euler.position.z.variable, _x.pose.pose_euler.position.z.var_std, _x.pose.pose_euler.rotation.roll.variable, _x.pose.pose_euler.rotation.roll.var_std, _x.pose.pose_euler.rotation.pitch.variable, _x.pose.pose_euler.rotation.pitch.var_std, _x.pose.pose_euler.rotation.yaw.variable, _x.pose.pose_euler.rotation.yaw.var_std, _x.pose.pose_quaternion.position.x.variable, _x.pose.pose_quaternion.position.x.var_std, _x.pose.pose_quaternion.position.y.variable, _x.pose.pose_quaternion.position.y.var_std, _x.pose.pose_quaternion.position.z.variable, _x.pose.pose_quaternion.position.z.var_std, _x.pose.pose_quaternion.quaternion.x, _x.pose.pose_quaternion.quaternion.y, _x.pose.pose_quaternion.quaternion.z, _x.pose.pose_quaternion.quaternion.w, _x.pose.pose_quaternion.rpy_covariance.x, _x.pose.pose_quaternion.rpy_covariance.y, _x.pose.pose_quaternion.rpy_covariance.z, _x.pose.status, _x.twist.velocity.x.variable, _x.twist.velocity.x.var_std, _x.twist.velocity.y.variable, _x.twist.velocity.y.var_std, _x.twist.velocity.z.variable, _x.twist.velocity.z.var_std, _x.twist.angular_velocity.x.variable, _x.twist.angular_velocity.x.var_std, _x.twist.angular_velocity.y.variable, _x.twist.angular_velocity.y.var_std, _x.twist.angular_velocity.z.variable, _x.twist.angular_velocity.z.var_std, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.v.variable, _x.v.var_std, _x.nav_status.utc_time, _x.nav_status.gps_status, _x.nav_status.pos_status, _x.nav_status.att_status, _x.nav_status.init_status, _x.nav_status.sate_num, _x.nav_status.hdop, _x.nav_status.pdop, _x.nav_status.diff_age, _x.dr_pose_and_time.week, _x.dr_pose_and_time.utctime, _x.dr_pose_and_time.dr_time, _x.dr_pose_and_time.pose_euler.position.x.variable, _x.dr_pose_and_time.pose_euler.position.x.var_std, _x.dr_pose_and_time.pose_euler.position.y.variable, _x.dr_pose_and_time.pose_euler.position.y.var_std, _x.dr_pose_and_time.pose_euler.position.z.variable, _x.dr_pose_and_time.pose_euler.position.z.var_std, _x.dr_pose_and_time.pose_euler.rotation.roll.variable, _x.dr_pose_and_time.pose_euler.rotation.roll.var_std, _x.dr_pose_and_time.pose_euler.rotation.pitch.variable, _x.dr_pose_and_time.pose_euler.rotation.pitch.var_std, _x.dr_pose_and_time.pose_euler.rotation.yaw.variable, _x.dr_pose_and_time.pose_euler.rotation.yaw.var_std, _x.localization_control.is_lidar_open,) = _get_struct_32db18db4i3fi14dB().unpack(str[start:end])
      self.localization_control.is_lidar_open = bool(self.localization_control.is_lidar_open)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_id().pack(_x.header.sequence_num, _x.header.time_stamp))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.header.fault_vec.info_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.fault_vec.info_vec:
        _x = val1.timestamp_sec
        buff.write(_get_struct_d().pack(_x))
        _x = val1.module_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = val1.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.fault_level, _x.fault_type))
      _x = self.header.fault_vec.module_fault_level
      buff.write(_get_struct_i().pack(_x))
      length = len(self.header.time_statistics.dev_time_status_msg)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.time_statistics.dev_time_status_msg:
        _x = val1.dtime
        buff.write(_get_struct_d().pack(_x))
        _x = val1.source_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.destination_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_32db18db4i3fi14dB().pack(_x.header.time_statistics.sending_timestamp, _x.llh.lat.variable, _x.llh.lat.var_std, _x.llh.lon.variable, _x.llh.lon.var_std, _x.llh.height.variable, _x.llh.height.var_std, _x.pose.pose_euler.position.x.variable, _x.pose.pose_euler.position.x.var_std, _x.pose.pose_euler.position.y.variable, _x.pose.pose_euler.position.y.var_std, _x.pose.pose_euler.position.z.variable, _x.pose.pose_euler.position.z.var_std, _x.pose.pose_euler.rotation.roll.variable, _x.pose.pose_euler.rotation.roll.var_std, _x.pose.pose_euler.rotation.pitch.variable, _x.pose.pose_euler.rotation.pitch.var_std, _x.pose.pose_euler.rotation.yaw.variable, _x.pose.pose_euler.rotation.yaw.var_std, _x.pose.pose_quaternion.position.x.variable, _x.pose.pose_quaternion.position.x.var_std, _x.pose.pose_quaternion.position.y.variable, _x.pose.pose_quaternion.position.y.var_std, _x.pose.pose_quaternion.position.z.variable, _x.pose.pose_quaternion.position.z.var_std, _x.pose.pose_quaternion.quaternion.x, _x.pose.pose_quaternion.quaternion.y, _x.pose.pose_quaternion.quaternion.z, _x.pose.pose_quaternion.quaternion.w, _x.pose.pose_quaternion.rpy_covariance.x, _x.pose.pose_quaternion.rpy_covariance.y, _x.pose.pose_quaternion.rpy_covariance.z, _x.pose.status, _x.twist.velocity.x.variable, _x.twist.velocity.x.var_std, _x.twist.velocity.y.variable, _x.twist.velocity.y.var_std, _x.twist.velocity.z.variable, _x.twist.velocity.z.var_std, _x.twist.angular_velocity.x.variable, _x.twist.angular_velocity.x.var_std, _x.twist.angular_velocity.y.variable, _x.twist.angular_velocity.y.var_std, _x.twist.angular_velocity.z.variable, _x.twist.angular_velocity.z.var_std, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.v.variable, _x.v.var_std, _x.nav_status.utc_time, _x.nav_status.gps_status, _x.nav_status.pos_status, _x.nav_status.att_status, _x.nav_status.init_status, _x.nav_status.sate_num, _x.nav_status.hdop, _x.nav_status.pdop, _x.nav_status.diff_age, _x.dr_pose_and_time.week, _x.dr_pose_and_time.utctime, _x.dr_pose_and_time.dr_time, _x.dr_pose_and_time.pose_euler.position.x.variable, _x.dr_pose_and_time.pose_euler.position.x.var_std, _x.dr_pose_and_time.pose_euler.position.y.variable, _x.dr_pose_and_time.pose_euler.position.y.var_std, _x.dr_pose_and_time.pose_euler.position.z.variable, _x.dr_pose_and_time.pose_euler.position.z.var_std, _x.dr_pose_and_time.pose_euler.rotation.roll.variable, _x.dr_pose_and_time.pose_euler.rotation.roll.var_std, _x.dr_pose_and_time.pose_euler.rotation.pitch.variable, _x.dr_pose_and_time.pose_euler.rotation.pitch.var_std, _x.dr_pose_and_time.pose_euler.rotation.yaw.variable, _x.dr_pose_and_time.pose_euler.rotation.yaw.var_std, _x.localization_control.is_lidar_open))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.llh is None:
        self.llh = common_msgs.msg.LLH()
      if self.pose is None:
        self.pose = common_msgs.msg.Pose()
      if self.twist is None:
        self.twist = common_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = common_msgs.msg.Vector3()
      if self.v is None:
        self.v = common_msgs.msg.UnsureVar()
      if self.nav_status is None:
        self.nav_status = common_msgs.msg.NavStatus()
      if self.dr_pose_and_time is None:
        self.dr_pose_and_time = common_msgs.msg.DRPoseWithTime()
      if self.localization_control is None:
        self.localization_control = imu.msg.LocalizationControl()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.sequence_num, _x.header.time_stamp,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.fault_vec.info_vec = []
      for i in range(0, length):
        val1 = common_msgs.msg.FaultInfo()
        start = end
        end += 8
        (val1.timestamp_sec,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.module_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.module_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.version = str[start:end]
        start = end
        end += 4
        (val1.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.msg = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.fault_level, _x.fault_type,) = _get_struct_2b().unpack(str[start:end])
        self.header.fault_vec.info_vec.append(val1)
      start = end
      end += 4
      (self.header.fault_vec.module_fault_level,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.time_statistics.dev_time_status_msg = []
      for i in range(0, length):
        val1 = common_msgs.msg.TimeStatus()
        start = end
        end += 8
        (val1.dtime,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.source_node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.destination_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.destination_node_name = str[start:end]
        self.header.time_statistics.dev_time_status_msg.append(val1)
      _x = self
      start = end
      end += 547
      (_x.header.time_statistics.sending_timestamp, _x.llh.lat.variable, _x.llh.lat.var_std, _x.llh.lon.variable, _x.llh.lon.var_std, _x.llh.height.variable, _x.llh.height.var_std, _x.pose.pose_euler.position.x.variable, _x.pose.pose_euler.position.x.var_std, _x.pose.pose_euler.position.y.variable, _x.pose.pose_euler.position.y.var_std, _x.pose.pose_euler.position.z.variable, _x.pose.pose_euler.position.z.var_std, _x.pose.pose_euler.rotation.roll.variable, _x.pose.pose_euler.rotation.roll.var_std, _x.pose.pose_euler.rotation.pitch.variable, _x.pose.pose_euler.rotation.pitch.var_std, _x.pose.pose_euler.rotation.yaw.variable, _x.pose.pose_euler.rotation.yaw.var_std, _x.pose.pose_quaternion.position.x.variable, _x.pose.pose_quaternion.position.x.var_std, _x.pose.pose_quaternion.position.y.variable, _x.pose.pose_quaternion.position.y.var_std, _x.pose.pose_quaternion.position.z.variable, _x.pose.pose_quaternion.position.z.var_std, _x.pose.pose_quaternion.quaternion.x, _x.pose.pose_quaternion.quaternion.y, _x.pose.pose_quaternion.quaternion.z, _x.pose.pose_quaternion.quaternion.w, _x.pose.pose_quaternion.rpy_covariance.x, _x.pose.pose_quaternion.rpy_covariance.y, _x.pose.pose_quaternion.rpy_covariance.z, _x.pose.status, _x.twist.velocity.x.variable, _x.twist.velocity.x.var_std, _x.twist.velocity.y.variable, _x.twist.velocity.y.var_std, _x.twist.velocity.z.variable, _x.twist.velocity.z.var_std, _x.twist.angular_velocity.x.variable, _x.twist.angular_velocity.x.var_std, _x.twist.angular_velocity.y.variable, _x.twist.angular_velocity.y.var_std, _x.twist.angular_velocity.z.variable, _x.twist.angular_velocity.z.var_std, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.v.variable, _x.v.var_std, _x.nav_status.utc_time, _x.nav_status.gps_status, _x.nav_status.pos_status, _x.nav_status.att_status, _x.nav_status.init_status, _x.nav_status.sate_num, _x.nav_status.hdop, _x.nav_status.pdop, _x.nav_status.diff_age, _x.dr_pose_and_time.week, _x.dr_pose_and_time.utctime, _x.dr_pose_and_time.dr_time, _x.dr_pose_and_time.pose_euler.position.x.variable, _x.dr_pose_and_time.pose_euler.position.x.var_std, _x.dr_pose_and_time.pose_euler.position.y.variable, _x.dr_pose_and_time.pose_euler.position.y.var_std, _x.dr_pose_and_time.pose_euler.position.z.variable, _x.dr_pose_and_time.pose_euler.position.z.var_std, _x.dr_pose_and_time.pose_euler.rotation.roll.variable, _x.dr_pose_and_time.pose_euler.rotation.roll.var_std, _x.dr_pose_and_time.pose_euler.rotation.pitch.variable, _x.dr_pose_and_time.pose_euler.rotation.pitch.var_std, _x.dr_pose_and_time.pose_euler.rotation.yaw.variable, _x.dr_pose_and_time.pose_euler.rotation.yaw.var_std, _x.localization_control.is_lidar_open,) = _get_struct_32db18db4i3fi14dB().unpack(str[start:end])
      self.localization_control.is_lidar_open = bool(self.localization_control.is_lidar_open)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_32db18db4i3fi14dB = None
def _get_struct_32db18db4i3fi14dB():
    global _struct_32db18db4i3fi14dB
    if _struct_32db18db4i3fi14dB is None:
        _struct_32db18db4i3fi14dB = struct.Struct("<32db18db4i3fi14dB")
    return _struct_32db18db4i3fi14dB
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
