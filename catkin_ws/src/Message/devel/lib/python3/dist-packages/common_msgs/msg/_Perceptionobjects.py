# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/Perceptionobjects.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import common_msgs.msg
import std_msgs.msg

class Perceptionobjects(genpy.Message):
  _md5sum = "f73590366c45733461115f9c5d54e381"
  _type = "common_msgs/Perceptionobjects"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header  header
int32 num                                #目标数量
Perceptionobject[] Perceptionobjects     #目标描述

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: common_msgs/Perceptionobject
float64 SimTim
uint32 ID 
float64 x
float64 y
float64 v_x
float64 v_y
float64 xg	
float64 yg
float64 v_xg
float64 v_yg
float32 heading	
float64 length	
float64 width
float64 height
uint8 type
float64 xrel	
float64 yrel
float64 v_xrel
float64 v_yrel



#ros消息时间戳转换成double类型的时间，单位:s	
#x坐标值 FLU车体坐标系,单位:m	
#y坐标值 FLU车体坐标系,单位:m	
#x方向绝对距离，单位:m	
#y方向绝对距离，单位:m	
#单位:度	
#单位:m	
#单位:m	
#"类型(# 0--unknown 1--pedestrian 2--cyclist 3--car 4--truck)（0-未知,1-行人，
#2-叉车，3-物料箱，4-货架，5-AMR）"	
#x方向绝对速度，单位:m/s	
#y方向绝对速度，单位:m/s	
#x方向相对速度，单位:m/s	
#y方向相对距离，单位:m/s	
#被激光雷达检测到的次数，乘以周期（100ms）是检测到的时间	
#在utm坐标系下的x坐标	
#在utm坐标系下的y坐标	

"""
  __slots__ = ['header','num','Perceptionobjects']
  _slot_types = ['std_msgs/Header','int32','common_msgs/Perceptionobject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,num,Perceptionobjects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Perceptionobjects, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.num is None:
        self.num = 0
      if self.Perceptionobjects is None:
        self.Perceptionobjects = []
    else:
      self.header = std_msgs.msg.Header()
      self.num = 0
      self.Perceptionobjects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
      length = len(self.Perceptionobjects)
      buff.write(_struct_I.pack(length))
      for val1 in self.Perceptionobjects:
        _x = val1
        buff.write(_get_struct_dI8df3dB4d().pack(_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Perceptionobjects is None:
        self.Perceptionobjects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Perceptionobjects = []
      for i in range(0, length):
        val1 = common_msgs.msg.Perceptionobject()
        _x = val1
        start = end
        end += 137
        (_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel,) = _get_struct_dI8df3dB4d().unpack(str[start:end])
        self.Perceptionobjects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
      length = len(self.Perceptionobjects)
      buff.write(_struct_I.pack(length))
      for val1 in self.Perceptionobjects:
        _x = val1
        buff.write(_get_struct_dI8df3dB4d().pack(_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Perceptionobjects is None:
        self.Perceptionobjects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Perceptionobjects = []
      for i in range(0, length):
        val1 = common_msgs.msg.Perceptionobject()
        _x = val1
        start = end
        end += 137
        (_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel,) = _get_struct_dI8df3dB4d().unpack(str[start:end])
        self.Perceptionobjects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_dI8df3dB4d = None
def _get_struct_dI8df3dB4d():
    global _struct_dI8df3dB4d
    if _struct_dI8df3dB4d is None:
        _struct_dI8df3dB4d = struct.Struct("<dI8df3dB4d")
    return _struct_dI8df3dB4d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
