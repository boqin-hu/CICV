# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/Perceptionobject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Perceptionobject(genpy.Message):
  _md5sum = "3e487cfd175ff6d18074f7b91bb10dc6"
  _type = "common_msgs/Perceptionobject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 SimTim
uint32 ID 
float64 x
float64 y
float64 v_x
float64 v_y
float64 xg	
float64 yg
float64 v_xg
float64 v_yg
float32 heading	
float64 length	
float64 width
float64 height
uint8 type
float64 xrel	
float64 yrel
float64 v_xrel
float64 v_yrel



#ros消息时间戳转换成double类型的时间，单位:s	
#x坐标值 FLU车体坐标系,单位:m	
#y坐标值 FLU车体坐标系,单位:m	
#x方向绝对距离，单位:m	
#y方向绝对距离，单位:m	
#单位:度	
#单位:m	
#单位:m	
#"类型(# 0--unknown 1--pedestrian 2--cyclist 3--car 4--truck)（0-未知,1-行人，
#2-叉车，3-物料箱，4-货架，5-AMR）"	
#x方向绝对速度，单位:m/s	
#y方向绝对速度，单位:m/s	
#x方向相对速度，单位:m/s	
#y方向相对距离，单位:m/s	
#被激光雷达检测到的次数，乘以周期（100ms）是检测到的时间	
#在utm坐标系下的x坐标	
#在utm坐标系下的y坐标	

"""
  __slots__ = ['SimTim','ID','x','y','v_x','v_y','xg','yg','v_xg','v_yg','heading','length','width','height','type','xrel','yrel','v_xrel','v_yrel']
  _slot_types = ['float64','uint32','float64','float64','float64','float64','float64','float64','float64','float64','float32','float64','float64','float64','uint8','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SimTim,ID,x,y,v_x,v_y,xg,yg,v_xg,v_yg,heading,length,width,height,type,xrel,yrel,v_xrel,v_yrel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Perceptionobject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SimTim is None:
        self.SimTim = 0.
      if self.ID is None:
        self.ID = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
      if self.xg is None:
        self.xg = 0.
      if self.yg is None:
        self.yg = 0.
      if self.v_xg is None:
        self.v_xg = 0.
      if self.v_yg is None:
        self.v_yg = 0.
      if self.heading is None:
        self.heading = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.type is None:
        self.type = 0
      if self.xrel is None:
        self.xrel = 0.
      if self.yrel is None:
        self.yrel = 0.
      if self.v_xrel is None:
        self.v_xrel = 0.
      if self.v_yrel is None:
        self.v_yrel = 0.
    else:
      self.SimTim = 0.
      self.ID = 0
      self.x = 0.
      self.y = 0.
      self.v_x = 0.
      self.v_y = 0.
      self.xg = 0.
      self.yg = 0.
      self.v_xg = 0.
      self.v_yg = 0.
      self.heading = 0.
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.type = 0
      self.xrel = 0.
      self.yrel = 0.
      self.v_xrel = 0.
      self.v_yrel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dI8df3dB4d().pack(_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 137
      (_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel,) = _get_struct_dI8df3dB4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dI8df3dB4d().pack(_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 137
      (_x.SimTim, _x.ID, _x.x, _x.y, _x.v_x, _x.v_y, _x.xg, _x.yg, _x.v_xg, _x.v_yg, _x.heading, _x.length, _x.width, _x.height, _x.type, _x.xrel, _x.yrel, _x.v_xrel, _x.v_yrel,) = _get_struct_dI8df3dB4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dI8df3dB4d = None
def _get_struct_dI8df3dB4d():
    global _struct_dI8df3dB4d
    if _struct_dI8df3dB4d is None:
        _struct_dI8df3dB4d = struct.Struct("<dI8df3dB4d")
    return _struct_dI8df3dB4d
