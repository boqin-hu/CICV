# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/PoseQuaternion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import common_msgs.msg

class PoseQuaternion(genpy.Message):
  _md5sum = "c198d5fc129720a7ae62198ae0b52dfa"
  _type = "common_msgs/PoseQuaternion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Vector3WithCovariance 	position
Quaternion 	quaternion
Vector3  rpy_covariance	
================================================================================
MSG: common_msgs/Vector3WithCovariance
UnsureVar 	x
UnsureVar 	y
UnsureVar 	z
================================================================================
MSG: common_msgs/UnsureVar
float64 	variable
float64 	var_std
================================================================================
MSG: common_msgs/Quaternion
float64 	x
float64 	y
float64 	z
float64 	w
================================================================================
MSG: common_msgs/Vector3
float64 	x
float64 	y
float64 	z"""
  __slots__ = ['position','quaternion','rpy_covariance']
  _slot_types = ['common_msgs/Vector3WithCovariance','common_msgs/Quaternion','common_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,quaternion,rpy_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PoseQuaternion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = common_msgs.msg.Vector3WithCovariance()
      if self.quaternion is None:
        self.quaternion = common_msgs.msg.Quaternion()
      if self.rpy_covariance is None:
        self.rpy_covariance = common_msgs.msg.Vector3()
    else:
      self.position = common_msgs.msg.Vector3WithCovariance()
      self.quaternion = common_msgs.msg.Quaternion()
      self.rpy_covariance = common_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.position.x.variable, _x.position.x.var_std, _x.position.y.variable, _x.position.y.var_std, _x.position.z.variable, _x.position.z.var_std, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.rpy_covariance.x, _x.rpy_covariance.y, _x.rpy_covariance.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = common_msgs.msg.Vector3WithCovariance()
      if self.quaternion is None:
        self.quaternion = common_msgs.msg.Quaternion()
      if self.rpy_covariance is None:
        self.rpy_covariance = common_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.position.x.variable, _x.position.x.var_std, _x.position.y.variable, _x.position.y.var_std, _x.position.z.variable, _x.position.z.var_std, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.rpy_covariance.x, _x.rpy_covariance.y, _x.rpy_covariance.z,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.position.x.variable, _x.position.x.var_std, _x.position.y.variable, _x.position.y.var_std, _x.position.z.variable, _x.position.z.var_std, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.rpy_covariance.x, _x.rpy_covariance.y, _x.rpy_covariance.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = common_msgs.msg.Vector3WithCovariance()
      if self.quaternion is None:
        self.quaternion = common_msgs.msg.Quaternion()
      if self.rpy_covariance is None:
        self.rpy_covariance = common_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.position.x.variable, _x.position.x.var_std, _x.position.y.variable, _x.position.y.var_std, _x.position.z.variable, _x.position.z.var_std, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.rpy_covariance.x, _x.rpy_covariance.y, _x.rpy_covariance.z,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
