# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/NavStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavStatus(genpy.Message):
  _md5sum = "66cf32030c6e7f18df10ff34df97d9cc"
  _type = "common_msgs/NavStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 	utc_time
int8 	gps_status # 0-nofix  1-single  2-psrdiff  3-code_diff  4-narrow_init  5-narrow_float
int32 	pos_status
int32  	att_status
int32  	init_status
int32  	sate_num
float32  	hdop
float32  	pdop
float32  	diff_age"""
  __slots__ = ['utc_time','gps_status','pos_status','att_status','init_status','sate_num','hdop','pdop','diff_age']
  _slot_types = ['float64','int8','int32','int32','int32','int32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       utc_time,gps_status,pos_status,att_status,init_status,sate_num,hdop,pdop,diff_age

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.utc_time is None:
        self.utc_time = 0.
      if self.gps_status is None:
        self.gps_status = 0
      if self.pos_status is None:
        self.pos_status = 0
      if self.att_status is None:
        self.att_status = 0
      if self.init_status is None:
        self.init_status = 0
      if self.sate_num is None:
        self.sate_num = 0
      if self.hdop is None:
        self.hdop = 0.
      if self.pdop is None:
        self.pdop = 0.
      if self.diff_age is None:
        self.diff_age = 0.
    else:
      self.utc_time = 0.
      self.gps_status = 0
      self.pos_status = 0
      self.att_status = 0
      self.init_status = 0
      self.sate_num = 0
      self.hdop = 0.
      self.pdop = 0.
      self.diff_age = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_db4i3f().pack(_x.utc_time, _x.gps_status, _x.pos_status, _x.att_status, _x.init_status, _x.sate_num, _x.hdop, _x.pdop, _x.diff_age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.utc_time, _x.gps_status, _x.pos_status, _x.att_status, _x.init_status, _x.sate_num, _x.hdop, _x.pdop, _x.diff_age,) = _get_struct_db4i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_db4i3f().pack(_x.utc_time, _x.gps_status, _x.pos_status, _x.att_status, _x.init_status, _x.sate_num, _x.hdop, _x.pdop, _x.diff_age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.utc_time, _x.gps_status, _x.pos_status, _x.att_status, _x.init_status, _x.sate_num, _x.hdop, _x.pdop, _x.diff_age,) = _get_struct_db4i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_db4i3f = None
def _get_struct_db4i3f():
    global _struct_db4i3f
    if _struct_db4i3f is None:
        _struct_db4i3f = struct.Struct("<db4i3f")
    return _struct_db4i3f
