# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from map_msgs/RoutePlan.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import common_msgs.msg
import map_msgs.msg

class RoutePlan(genpy.Message):
  _md5sum = "1649acf7166b841933455501b38710c4"
  _type = "map_msgs/RoutePlan"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """common_msgs/Header header
int32 id
int32 result
MissionPoint point
string[] global_road
float64 length
================================================================================
MSG: common_msgs/Header
int32 sequence_num
float64 time_stamp
string 	module_name
string 	version
FaultVec 	fault_vec
TimeStatistics 	time_statistics
================================================================================
MSG: common_msgs/FaultVec
FaultInfo[] 	info_vec
int32 	module_fault_level

================================================================================
MSG: common_msgs/FaultInfo
float64 	timestamp_sec
string 	module_name
string 	version
int32 	error_code
string 	msg
int8 	fault_level
int8 	fault_type
================================================================================
MSG: common_msgs/TimeStatistics
TimeStatus[] 	dev_time_status_msg
float64 	sending_timestamp
================================================================================
MSG: common_msgs/TimeStatus
float64 	dtime
string 	source_node_name
string 	destination_node_name
================================================================================
MSG: map_msgs/MissionPoint
float64 xg
float64 yg
float64 heading"""
  __slots__ = ['header','id','result','point','global_road','length']
  _slot_types = ['common_msgs/Header','int32','int32','map_msgs/MissionPoint','string[]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,result,point,global_road,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoutePlan, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.result is None:
        self.result = 0
      if self.point is None:
        self.point = map_msgs.msg.MissionPoint()
      if self.global_road is None:
        self.global_road = []
      if self.length is None:
        self.length = 0.
    else:
      self.header = common_msgs.msg.Header()
      self.id = 0
      self.result = 0
      self.point = map_msgs.msg.MissionPoint()
      self.global_road = []
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_id().pack(_x.header.sequence_num, _x.header.time_stamp))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.header.fault_vec.info_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.fault_vec.info_vec:
        _x = val1.timestamp_sec
        buff.write(_get_struct_d().pack(_x))
        _x = val1.module_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = val1.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.fault_level, _x.fault_type))
      _x = self.header.fault_vec.module_fault_level
      buff.write(_get_struct_i().pack(_x))
      length = len(self.header.time_statistics.dev_time_status_msg)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.time_statistics.dev_time_status_msg:
        _x = val1.dtime
        buff.write(_get_struct_d().pack(_x))
        _x = val1.source_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.destination_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2i3d().pack(_x.header.time_statistics.sending_timestamp, _x.id, _x.result, _x.point.xg, _x.point.yg, _x.point.heading))
      length = len(self.global_road)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_road:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.length
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.point is None:
        self.point = map_msgs.msg.MissionPoint()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.sequence_num, _x.header.time_stamp,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.fault_vec.info_vec = []
      for i in range(0, length):
        val1 = common_msgs.msg.FaultInfo()
        start = end
        end += 8
        (val1.timestamp_sec,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.module_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.module_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.version = str[start:end]
        start = end
        end += 4
        (val1.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.msg = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.fault_level, _x.fault_type,) = _get_struct_2b().unpack(str[start:end])
        self.header.fault_vec.info_vec.append(val1)
      start = end
      end += 4
      (self.header.fault_vec.module_fault_level,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.time_statistics.dev_time_status_msg = []
      for i in range(0, length):
        val1 = common_msgs.msg.TimeStatus()
        start = end
        end += 8
        (val1.dtime,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.source_node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.destination_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.destination_node_name = str[start:end]
        self.header.time_statistics.dev_time_status_msg.append(val1)
      _x = self
      start = end
      end += 40
      (_x.header.time_statistics.sending_timestamp, _x.id, _x.result, _x.point.xg, _x.point.yg, _x.point.heading,) = _get_struct_d2i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_road = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.global_road.append(val1)
      start = end
      end += 8
      (self.length,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_id().pack(_x.header.sequence_num, _x.header.time_stamp))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.header.fault_vec.info_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.fault_vec.info_vec:
        _x = val1.timestamp_sec
        buff.write(_get_struct_d().pack(_x))
        _x = val1.module_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = val1.msg
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.fault_level, _x.fault_type))
      _x = self.header.fault_vec.module_fault_level
      buff.write(_get_struct_i().pack(_x))
      length = len(self.header.time_statistics.dev_time_status_msg)
      buff.write(_struct_I.pack(length))
      for val1 in self.header.time_statistics.dev_time_status_msg:
        _x = val1.dtime
        buff.write(_get_struct_d().pack(_x))
        _x = val1.source_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.destination_node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2i3d().pack(_x.header.time_statistics.sending_timestamp, _x.id, _x.result, _x.point.xg, _x.point.yg, _x.point.heading))
      length = len(self.global_road)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_road:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.length
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = common_msgs.msg.Header()
      if self.point is None:
        self.point = map_msgs.msg.MissionPoint()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.sequence_num, _x.header.time_stamp,) = _get_struct_id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.fault_vec.info_vec = []
      for i in range(0, length):
        val1 = common_msgs.msg.FaultInfo()
        start = end
        end += 8
        (val1.timestamp_sec,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.module_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.module_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.version = str[start:end]
        start = end
        end += 4
        (val1.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.msg = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.msg = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.fault_level, _x.fault_type,) = _get_struct_2b().unpack(str[start:end])
        self.header.fault_vec.info_vec.append(val1)
      start = end
      end += 4
      (self.header.fault_vec.module_fault_level,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.header.time_statistics.dev_time_status_msg = []
      for i in range(0, length):
        val1 = common_msgs.msg.TimeStatus()
        start = end
        end += 8
        (val1.dtime,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.source_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.source_node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.destination_node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.destination_node_name = str[start:end]
        self.header.time_statistics.dev_time_status_msg.append(val1)
      _x = self
      start = end
      end += 40
      (_x.header.time_statistics.sending_timestamp, _x.id, _x.result, _x.point.xg, _x.point.yg, _x.point.heading,) = _get_struct_d2i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_road = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.global_road.append(val1)
      start = end
      end += 8
      (self.length,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d2i3d = None
def _get_struct_d2i3d():
    global _struct_d2i3d
    if _struct_d2i3d is None:
        _struct_d2i3d = struct.Struct("<d2i3d")
    return _struct_d2i3d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
