# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lidar_msgs/DetectedObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import perception_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class DetectedObject(genpy.Message):
  _md5sum = "d9aeea43fbddadcbfb4c8da6ce992363"
  _type = "lidar_msgs/DetectedObject"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header                 header

uint32                          id
string                          label
uint8                           type   # 0--car, 1--truck, 2--pedestrian, 3--cyclist, 4--unknown
float32                         score   
std_msgs/ColorRGBA              color   # Define this object specific color
bool                            valid   # Defines if this object is valid, or invalid as defined by the filtering


geometry_msgs/Pose              pose
geometry_msgs/Pose              tracked_pose
geometry_msgs/Pose              output_pose
float32                         yaw
geometry_msgs/Vector3           dimensions
geometry_msgs/Twist             velocity
geometry_msgs/Twist             acceleration

float32                         angle       # Angle [0 to 2*PI), allow rotated rects
############### Behavior State of the Detected Object
uint8                           behavior_state # FORWARD_STATE = 0, STOPPING_STATE = 1, BRANCH_LEFT_STATE = 2, BRANCH_RIGHT_STATE = 3, YIELDING_STATE = 4, ACCELERATING_STATE = 5, SLOWDOWN_STATE = 6

uint32                          age
uint8                           velocitystatus  # speed confidence  0--low, 1--normal, 2--high
float32                         confidence    # confidence of obstacle

sensor_msgs/PointCloud2         pointcloud
perception_msgs/ObstacleCell[]  cells
geometry_msgs/PolygonStamped    convex_hull

bool                            pose_reliable
bool                            velocity_reliable
bool                            acceleration_reliable



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: perception_msgs/ObstacleCell
int32 idc
float64 x
float64 y
float64 xg
float64 yg
================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','id','label','type','score','color','valid','pose','tracked_pose','output_pose','yaw','dimensions','velocity','acceleration','angle','behavior_state','age','velocitystatus','confidence','pointcloud','cells','convex_hull','pose_reliable','velocity_reliable','acceleration_reliable']
  _slot_types = ['std_msgs/Header','uint32','string','uint8','float32','std_msgs/ColorRGBA','bool','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','float32','geometry_msgs/Vector3','geometry_msgs/Twist','geometry_msgs/Twist','float32','uint8','uint32','uint8','float32','sensor_msgs/PointCloud2','perception_msgs/ObstacleCell[]','geometry_msgs/PolygonStamped','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,label,type,score,color,valid,pose,tracked_pose,output_pose,yaw,dimensions,velocity,acceleration,angle,behavior_state,age,velocitystatus,confidence,pointcloud,cells,convex_hull,pose_reliable,velocity_reliable,acceleration_reliable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.label is None:
        self.label = ''
      if self.type is None:
        self.type = 0
      if self.score is None:
        self.score = 0.
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.valid is None:
        self.valid = False
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.tracked_pose is None:
        self.tracked_pose = geometry_msgs.msg.Pose()
      if self.output_pose is None:
        self.output_pose = geometry_msgs.msg.Pose()
      if self.yaw is None:
        self.yaw = 0.
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.angle is None:
        self.angle = 0.
      if self.behavior_state is None:
        self.behavior_state = 0
      if self.age is None:
        self.age = 0
      if self.velocitystatus is None:
        self.velocitystatus = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.pointcloud is None:
        self.pointcloud = sensor_msgs.msg.PointCloud2()
      if self.cells is None:
        self.cells = []
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      if self.pose_reliable is None:
        self.pose_reliable = False
      if self.velocity_reliable is None:
        self.velocity_reliable = False
      if self.acceleration_reliable is None:
        self.acceleration_reliable = False
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.label = ''
      self.type = 0
      self.score = 0.
      self.color = std_msgs.msg.ColorRGBA()
      self.valid = False
      self.pose = geometry_msgs.msg.Pose()
      self.tracked_pose = geometry_msgs.msg.Pose()
      self.output_pose = geometry_msgs.msg.Pose()
      self.yaw = 0.
      self.dimensions = geometry_msgs.msg.Vector3()
      self.velocity = geometry_msgs.msg.Twist()
      self.acceleration = geometry_msgs.msg.Twist()
      self.angle = 0.
      self.behavior_state = 0
      self.age = 0
      self.velocitystatus = 0
      self.confidence = 0.
      self.pointcloud = sensor_msgs.msg.PointCloud2()
      self.cells = []
      self.convex_hull = geometry_msgs.msg.PolygonStamped()
      self.pose_reliable = False
      self.velocity_reliable = False
      self.acceleration_reliable = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B5fB21df15dfBIBf3I().pack(_x.type, _x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.tracked_pose.position.x, _x.tracked_pose.position.y, _x.tracked_pose.position.z, _x.tracked_pose.orientation.x, _x.tracked_pose.orientation.y, _x.tracked_pose.orientation.z, _x.tracked_pose.orientation.w, _x.output_pose.position.x, _x.output_pose.position.y, _x.output_pose.position.z, _x.output_pose.orientation.x, _x.output_pose.orientation.y, _x.output_pose.orientation.z, _x.output_pose.orientation.w, _x.yaw, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.angle, _x.behavior_state, _x.age, _x.velocitystatus, _x.confidence, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs))
      _x = self.pointcloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.pointcloud.height, _x.pointcloud.width))
      length = len(self.pointcloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointcloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step))
      _x = self.pointcloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pointcloud.is_dense
      buff.write(_get_struct_B().pack(_x))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
      _x = self
      buff.write(_get_struct_3I().pack(_x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs))
      _x = self.convex_hull.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.convex_hull.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.convex_hull.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3B().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.tracked_pose is None:
        self.tracked_pose = geometry_msgs.msg.Pose()
      if self.output_pose is None:
        self.output_pose = geometry_msgs.msg.Pose()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.pointcloud is None:
        self.pointcloud = sensor_msgs.msg.PointCloud2()
      if self.cells is None:
        self.cells = None
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 340
      (_x.type, _x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.tracked_pose.position.x, _x.tracked_pose.position.y, _x.tracked_pose.position.z, _x.tracked_pose.orientation.x, _x.tracked_pose.orientation.y, _x.tracked_pose.orientation.z, _x.tracked_pose.orientation.w, _x.output_pose.position.x, _x.output_pose.position.y, _x.output_pose.position.z, _x.output_pose.orientation.x, _x.output_pose.orientation.y, _x.output_pose.orientation.z, _x.output_pose.orientation.w, _x.yaw, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.angle, _x.behavior_state, _x.age, _x.velocitystatus, _x.confidence, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs,) = _get_struct_B5fB21df15dfBIBf3I().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointcloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pointcloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pointcloud.height, _x.pointcloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointcloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.pointcloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.pointcloud.is_bigendian = bool(self.pointcloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pointcloud.data = str[start:end]
      start = end
      end += 1
      (self.pointcloud.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.pointcloud.is_dense = bool(self.pointcloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ObstacleCell()
        _x = val1
        start = end
        end += 36
        (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
        self.cells.append(val1)
      _x = self
      start = end
      end += 12
      (_x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.convex_hull.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.convex_hull.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.convex_hull.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.convex_hull.polygon.points.append(val1)
      _x = self
      start = end
      end += 3
      (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable,) = _get_struct_3B().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      self.velocity_reliable = bool(self.velocity_reliable)
      self.acceleration_reliable = bool(self.acceleration_reliable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B5fB21df15dfBIBf3I().pack(_x.type, _x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.tracked_pose.position.x, _x.tracked_pose.position.y, _x.tracked_pose.position.z, _x.tracked_pose.orientation.x, _x.tracked_pose.orientation.y, _x.tracked_pose.orientation.z, _x.tracked_pose.orientation.w, _x.output_pose.position.x, _x.output_pose.position.y, _x.output_pose.position.z, _x.output_pose.orientation.x, _x.output_pose.orientation.y, _x.output_pose.orientation.z, _x.output_pose.orientation.w, _x.yaw, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.angle, _x.behavior_state, _x.age, _x.velocitystatus, _x.confidence, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs))
      _x = self.pointcloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.pointcloud.height, _x.pointcloud.width))
      length = len(self.pointcloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointcloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step))
      _x = self.pointcloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pointcloud.is_dense
      buff.write(_get_struct_B().pack(_x))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_i4d().pack(_x.idc, _x.x, _x.y, _x.xg, _x.yg))
      _x = self
      buff.write(_get_struct_3I().pack(_x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs))
      _x = self.convex_hull.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.convex_hull.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.convex_hull.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3B().pack(_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.tracked_pose is None:
        self.tracked_pose = geometry_msgs.msg.Pose()
      if self.output_pose is None:
        self.output_pose = geometry_msgs.msg.Pose()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Twist()
      if self.pointcloud is None:
        self.pointcloud = sensor_msgs.msg.PointCloud2()
      if self.cells is None:
        self.cells = None
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 340
      (_x.type, _x.score, _x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.valid, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.tracked_pose.position.x, _x.tracked_pose.position.y, _x.tracked_pose.position.z, _x.tracked_pose.orientation.x, _x.tracked_pose.orientation.y, _x.tracked_pose.orientation.z, _x.tracked_pose.orientation.w, _x.output_pose.position.x, _x.output_pose.position.y, _x.output_pose.position.z, _x.output_pose.orientation.x, _x.output_pose.orientation.y, _x.output_pose.orientation.z, _x.output_pose.orientation.w, _x.yaw, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.angle, _x.behavior_state, _x.age, _x.velocitystatus, _x.confidence, _x.pointcloud.header.seq, _x.pointcloud.header.stamp.secs, _x.pointcloud.header.stamp.nsecs,) = _get_struct_B5fB21df15dfBIBf3I().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pointcloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pointcloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pointcloud.height, _x.pointcloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointcloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.pointcloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pointcloud.is_bigendian, _x.pointcloud.point_step, _x.pointcloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.pointcloud.is_bigendian = bool(self.pointcloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pointcloud.data = str[start:end]
      start = end
      end += 1
      (self.pointcloud.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.pointcloud.is_dense = bool(self.pointcloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ObstacleCell()
        _x = val1
        start = end
        end += 36
        (_x.idc, _x.x, _x.y, _x.xg, _x.yg,) = _get_struct_i4d().unpack(str[start:end])
        self.cells.append(val1)
      _x = self
      start = end
      end += 12
      (_x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.convex_hull.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.convex_hull.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.convex_hull.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.convex_hull.polygon.points.append(val1)
      _x = self
      start = end
      end += 3
      (_x.pose_reliable, _x.velocity_reliable, _x.acceleration_reliable,) = _get_struct_3B().unpack(str[start:end])
      self.pose_reliable = bool(self.pose_reliable)
      self.velocity_reliable = bool(self.velocity_reliable)
      self.acceleration_reliable = bool(self.acceleration_reliable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_B5fB21df15dfBIBf3I = None
def _get_struct_B5fB21df15dfBIBf3I():
    global _struct_B5fB21df15dfBIBf3I
    if _struct_B5fB21df15dfBIBf3I is None:
        _struct_B5fB21df15dfBIBf3I = struct.Struct("<B5fB21df15dfBIBf3I")
    return _struct_B5fB21df15dfBIBf3I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_i4d = None
def _get_struct_i4d():
    global _struct_i4d
    if _struct_i4d is None:
        _struct_i4d = struct.Struct("<i4d")
    return _struct_i4d
