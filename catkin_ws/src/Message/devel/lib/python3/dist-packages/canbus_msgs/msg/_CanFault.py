# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from canbus_msgs/CanFault.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CanFault(genpy.Message):
  _md5sum = "c8ae15ad4df221ade0f55c8006aaa5ca"
  _type = "canbus_msgs/CanFault"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16   can_fault_flag
int16   can103_fault_flag
int16   mmw_lidar0_flag
int16   mmw_lidar1_flag
int16   mmw_lidar3_flag
int16   mmw_lidar5_flag
int16   mmw_lidar7_flag
int16   ult_5C8_flag
int16   ult_5C9_flag
int16   can_busoff_flag
int16   can103_busoff_flag
int16   canbus_module_level1_flag
int16   canbus_module_level2_flag
"""
  __slots__ = ['can_fault_flag','can103_fault_flag','mmw_lidar0_flag','mmw_lidar1_flag','mmw_lidar3_flag','mmw_lidar5_flag','mmw_lidar7_flag','ult_5C8_flag','ult_5C9_flag','can_busoff_flag','can103_busoff_flag','canbus_module_level1_flag','canbus_module_level2_flag']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       can_fault_flag,can103_fault_flag,mmw_lidar0_flag,mmw_lidar1_flag,mmw_lidar3_flag,mmw_lidar5_flag,mmw_lidar7_flag,ult_5C8_flag,ult_5C9_flag,can_busoff_flag,can103_busoff_flag,canbus_module_level1_flag,canbus_module_level2_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CanFault, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.can_fault_flag is None:
        self.can_fault_flag = 0
      if self.can103_fault_flag is None:
        self.can103_fault_flag = 0
      if self.mmw_lidar0_flag is None:
        self.mmw_lidar0_flag = 0
      if self.mmw_lidar1_flag is None:
        self.mmw_lidar1_flag = 0
      if self.mmw_lidar3_flag is None:
        self.mmw_lidar3_flag = 0
      if self.mmw_lidar5_flag is None:
        self.mmw_lidar5_flag = 0
      if self.mmw_lidar7_flag is None:
        self.mmw_lidar7_flag = 0
      if self.ult_5C8_flag is None:
        self.ult_5C8_flag = 0
      if self.ult_5C9_flag is None:
        self.ult_5C9_flag = 0
      if self.can_busoff_flag is None:
        self.can_busoff_flag = 0
      if self.can103_busoff_flag is None:
        self.can103_busoff_flag = 0
      if self.canbus_module_level1_flag is None:
        self.canbus_module_level1_flag = 0
      if self.canbus_module_level2_flag is None:
        self.canbus_module_level2_flag = 0
    else:
      self.can_fault_flag = 0
      self.can103_fault_flag = 0
      self.mmw_lidar0_flag = 0
      self.mmw_lidar1_flag = 0
      self.mmw_lidar3_flag = 0
      self.mmw_lidar5_flag = 0
      self.mmw_lidar7_flag = 0
      self.ult_5C8_flag = 0
      self.ult_5C9_flag = 0
      self.can_busoff_flag = 0
      self.can103_busoff_flag = 0
      self.canbus_module_level1_flag = 0
      self.canbus_module_level2_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13h().pack(_x.can_fault_flag, _x.can103_fault_flag, _x.mmw_lidar0_flag, _x.mmw_lidar1_flag, _x.mmw_lidar3_flag, _x.mmw_lidar5_flag, _x.mmw_lidar7_flag, _x.ult_5C8_flag, _x.ult_5C9_flag, _x.can_busoff_flag, _x.can103_busoff_flag, _x.canbus_module_level1_flag, _x.canbus_module_level2_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.can_fault_flag, _x.can103_fault_flag, _x.mmw_lidar0_flag, _x.mmw_lidar1_flag, _x.mmw_lidar3_flag, _x.mmw_lidar5_flag, _x.mmw_lidar7_flag, _x.ult_5C8_flag, _x.ult_5C9_flag, _x.can_busoff_flag, _x.can103_busoff_flag, _x.canbus_module_level1_flag, _x.canbus_module_level2_flag,) = _get_struct_13h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13h().pack(_x.can_fault_flag, _x.can103_fault_flag, _x.mmw_lidar0_flag, _x.mmw_lidar1_flag, _x.mmw_lidar3_flag, _x.mmw_lidar5_flag, _x.mmw_lidar7_flag, _x.ult_5C8_flag, _x.ult_5C9_flag, _x.can_busoff_flag, _x.can103_busoff_flag, _x.canbus_module_level1_flag, _x.canbus_module_level2_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.can_fault_flag, _x.can103_fault_flag, _x.mmw_lidar0_flag, _x.mmw_lidar1_flag, _x.mmw_lidar3_flag, _x.mmw_lidar5_flag, _x.mmw_lidar7_flag, _x.ult_5C8_flag, _x.ult_5C9_flag, _x.can_busoff_flag, _x.can103_busoff_flag, _x.canbus_module_level1_flag, _x.canbus_module_level2_flag,) = _get_struct_13h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13h = None
def _get_struct_13h():
    global _struct_13h
    if _struct_13h is None:
        _struct_13h = struct.Struct("<13h")
    return _struct_13h
