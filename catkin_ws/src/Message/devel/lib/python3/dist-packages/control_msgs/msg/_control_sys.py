# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_msgs/control_sys.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_sys(genpy.Message):
  _md5sum = "d52a3c865eee57fb22d3fe059b3266b6"
  _type = "control_msgs/control_sys"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32   lat_targetangle
float32   lat_targettorque
int16     vehicle_shiftposition
int16     vehicle_sys_status
int16     actuatormode
int16     shiftposition
int16     brakelight
int16     reverselight
int16     epb_status
bool      vehicle_auto_enable
bool      vehicle_lat_enable
bool      vehicle_lon_enable
bool      vehicle_epb_status
bool      road_vaild_flag
bool      calibration_flag
bool      write_enable_flag
int16     PowerFault
int16     ComFault
int16     USSFault
int16     ChassisFault
"""
  __slots__ = ['lat_targetangle','lat_targettorque','vehicle_shiftposition','vehicle_sys_status','actuatormode','shiftposition','brakelight','reverselight','epb_status','vehicle_auto_enable','vehicle_lat_enable','vehicle_lon_enable','vehicle_epb_status','road_vaild_flag','calibration_flag','write_enable_flag','PowerFault','ComFault','USSFault','ChassisFault']
  _slot_types = ['float32','float32','int16','int16','int16','int16','int16','int16','int16','bool','bool','bool','bool','bool','bool','bool','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lat_targetangle,lat_targettorque,vehicle_shiftposition,vehicle_sys_status,actuatormode,shiftposition,brakelight,reverselight,epb_status,vehicle_auto_enable,vehicle_lat_enable,vehicle_lon_enable,vehicle_epb_status,road_vaild_flag,calibration_flag,write_enable_flag,PowerFault,ComFault,USSFault,ChassisFault

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_sys, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lat_targetangle is None:
        self.lat_targetangle = 0.
      if self.lat_targettorque is None:
        self.lat_targettorque = 0.
      if self.vehicle_shiftposition is None:
        self.vehicle_shiftposition = 0
      if self.vehicle_sys_status is None:
        self.vehicle_sys_status = 0
      if self.actuatormode is None:
        self.actuatormode = 0
      if self.shiftposition is None:
        self.shiftposition = 0
      if self.brakelight is None:
        self.brakelight = 0
      if self.reverselight is None:
        self.reverselight = 0
      if self.epb_status is None:
        self.epb_status = 0
      if self.vehicle_auto_enable is None:
        self.vehicle_auto_enable = False
      if self.vehicle_lat_enable is None:
        self.vehicle_lat_enable = False
      if self.vehicle_lon_enable is None:
        self.vehicle_lon_enable = False
      if self.vehicle_epb_status is None:
        self.vehicle_epb_status = False
      if self.road_vaild_flag is None:
        self.road_vaild_flag = False
      if self.calibration_flag is None:
        self.calibration_flag = False
      if self.write_enable_flag is None:
        self.write_enable_flag = False
      if self.PowerFault is None:
        self.PowerFault = 0
      if self.ComFault is None:
        self.ComFault = 0
      if self.USSFault is None:
        self.USSFault = 0
      if self.ChassisFault is None:
        self.ChassisFault = 0
    else:
      self.lat_targetangle = 0.
      self.lat_targettorque = 0.
      self.vehicle_shiftposition = 0
      self.vehicle_sys_status = 0
      self.actuatormode = 0
      self.shiftposition = 0
      self.brakelight = 0
      self.reverselight = 0
      self.epb_status = 0
      self.vehicle_auto_enable = False
      self.vehicle_lat_enable = False
      self.vehicle_lon_enable = False
      self.vehicle_epb_status = False
      self.road_vaild_flag = False
      self.calibration_flag = False
      self.write_enable_flag = False
      self.PowerFault = 0
      self.ComFault = 0
      self.USSFault = 0
      self.ChassisFault = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f7h7B4h().pack(_x.lat_targetangle, _x.lat_targettorque, _x.vehicle_shiftposition, _x.vehicle_sys_status, _x.actuatormode, _x.shiftposition, _x.brakelight, _x.reverselight, _x.epb_status, _x.vehicle_auto_enable, _x.vehicle_lat_enable, _x.vehicle_lon_enable, _x.vehicle_epb_status, _x.road_vaild_flag, _x.calibration_flag, _x.write_enable_flag, _x.PowerFault, _x.ComFault, _x.USSFault, _x.ChassisFault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.lat_targetangle, _x.lat_targettorque, _x.vehicle_shiftposition, _x.vehicle_sys_status, _x.actuatormode, _x.shiftposition, _x.brakelight, _x.reverselight, _x.epb_status, _x.vehicle_auto_enable, _x.vehicle_lat_enable, _x.vehicle_lon_enable, _x.vehicle_epb_status, _x.road_vaild_flag, _x.calibration_flag, _x.write_enable_flag, _x.PowerFault, _x.ComFault, _x.USSFault, _x.ChassisFault,) = _get_struct_2f7h7B4h().unpack(str[start:end])
      self.vehicle_auto_enable = bool(self.vehicle_auto_enable)
      self.vehicle_lat_enable = bool(self.vehicle_lat_enable)
      self.vehicle_lon_enable = bool(self.vehicle_lon_enable)
      self.vehicle_epb_status = bool(self.vehicle_epb_status)
      self.road_vaild_flag = bool(self.road_vaild_flag)
      self.calibration_flag = bool(self.calibration_flag)
      self.write_enable_flag = bool(self.write_enable_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f7h7B4h().pack(_x.lat_targetangle, _x.lat_targettorque, _x.vehicle_shiftposition, _x.vehicle_sys_status, _x.actuatormode, _x.shiftposition, _x.brakelight, _x.reverselight, _x.epb_status, _x.vehicle_auto_enable, _x.vehicle_lat_enable, _x.vehicle_lon_enable, _x.vehicle_epb_status, _x.road_vaild_flag, _x.calibration_flag, _x.write_enable_flag, _x.PowerFault, _x.ComFault, _x.USSFault, _x.ChassisFault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.lat_targetangle, _x.lat_targettorque, _x.vehicle_shiftposition, _x.vehicle_sys_status, _x.actuatormode, _x.shiftposition, _x.brakelight, _x.reverselight, _x.epb_status, _x.vehicle_auto_enable, _x.vehicle_lat_enable, _x.vehicle_lon_enable, _x.vehicle_epb_status, _x.road_vaild_flag, _x.calibration_flag, _x.write_enable_flag, _x.PowerFault, _x.ComFault, _x.USSFault, _x.ChassisFault,) = _get_struct_2f7h7B4h().unpack(str[start:end])
      self.vehicle_auto_enable = bool(self.vehicle_auto_enable)
      self.vehicle_lat_enable = bool(self.vehicle_lat_enable)
      self.vehicle_lon_enable = bool(self.vehicle_lon_enable)
      self.vehicle_epb_status = bool(self.vehicle_epb_status)
      self.road_vaild_flag = bool(self.road_vaild_flag)
      self.calibration_flag = bool(self.calibration_flag)
      self.write_enable_flag = bool(self.write_enable_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f7h7B4h = None
def _get_struct_2f7h7B4h():
    global _struct_2f7h7B4h
    if _struct_2f7h7B4h is None:
        _struct_2f7h7B4h = struct.Struct("<2f7h7B4h")
    return _struct_2f7h7B4h
