// Generated by gencpp from file common_msgs/CICV_Location.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_CICV_LOCATION_H
#define COMMON_MSGS_MESSAGE_CICV_LOCATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct CICV_Location_
{
  typedef CICV_Location_<ContainerAllocator> Type;

  CICV_Location_()
    : header()
    , SimTim(0.0)
    , Position_x(0.0)
    , Position_y(0.0)
    , Velocity_x(0.0)
    , Velocity_y(0.0)
    , Accel_x(0.0)
    , Accel_y(0.0)
    , Yaw(0.0)
    , Angular_velocity_z(0.0)  {
    }
  CICV_Location_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , SimTim(0.0)
    , Position_x(0.0)
    , Position_y(0.0)
    , Velocity_x(0.0)
    , Velocity_y(0.0)
    , Accel_x(0.0)
    , Accel_y(0.0)
    , Yaw(0.0)
    , Angular_velocity_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _SimTim_type;
  _SimTim_type SimTim;

   typedef double _Position_x_type;
  _Position_x_type Position_x;

   typedef double _Position_y_type;
  _Position_y_type Position_y;

   typedef double _Velocity_x_type;
  _Velocity_x_type Velocity_x;

   typedef double _Velocity_y_type;
  _Velocity_y_type Velocity_y;

   typedef double _Accel_x_type;
  _Accel_x_type Accel_x;

   typedef double _Accel_y_type;
  _Accel_y_type Accel_y;

   typedef double _Yaw_type;
  _Yaw_type Yaw;

   typedef double _Angular_velocity_z_type;
  _Angular_velocity_z_type Angular_velocity_z;





  typedef boost::shared_ptr< ::common_msgs::CICV_Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::CICV_Location_<ContainerAllocator> const> ConstPtr;

}; // struct CICV_Location_

typedef ::common_msgs::CICV_Location_<std::allocator<void> > CICV_Location;

typedef boost::shared_ptr< ::common_msgs::CICV_Location > CICV_LocationPtr;
typedef boost::shared_ptr< ::common_msgs::CICV_Location const> CICV_LocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::CICV_Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::CICV_Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::CICV_Location_<ContainerAllocator1> & lhs, const ::common_msgs::CICV_Location_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.SimTim == rhs.SimTim &&
    lhs.Position_x == rhs.Position_x &&
    lhs.Position_y == rhs.Position_y &&
    lhs.Velocity_x == rhs.Velocity_x &&
    lhs.Velocity_y == rhs.Velocity_y &&
    lhs.Accel_x == rhs.Accel_x &&
    lhs.Accel_y == rhs.Accel_y &&
    lhs.Yaw == rhs.Yaw &&
    lhs.Angular_velocity_z == rhs.Angular_velocity_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::CICV_Location_<ContainerAllocator1> & lhs, const ::common_msgs::CICV_Location_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::CICV_Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::CICV_Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::CICV_Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::CICV_Location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::CICV_Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::CICV_Location_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::CICV_Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebf8c055c1ba72efc55306e155279a03";
  }

  static const char* value(const ::common_msgs::CICV_Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebf8c055c1ba72efULL;
  static const uint64_t static_value2 = 0xc55306e155279a03ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::CICV_Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/CICV_Location";
  }

  static const char* value(const ::common_msgs::CICV_Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::CICV_Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header  header\n"
"float64 SimTim\n"
"float64 Position_x   #本车X向坐标\n"
"float64 Position_y   #本车Y向坐标\n"
"float64 Velocity_x   #本车X向车速\n"
"float64 Velocity_y   #本车Y向车速\n"
"float64 Accel_x      #本车纵向加速度\n"
"float64 Accel_y      #本车横向加速度\n"
"float64 Yaw          #本车航向角\n"
"float64 Angular_velocity_z    #本车沿Z轴角速度\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::common_msgs::CICV_Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::CICV_Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.SimTim);
      stream.next(m.Position_x);
      stream.next(m.Position_y);
      stream.next(m.Velocity_x);
      stream.next(m.Velocity_y);
      stream.next(m.Accel_x);
      stream.next(m.Accel_y);
      stream.next(m.Yaw);
      stream.next(m.Angular_velocity_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CICV_Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::CICV_Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::CICV_Location_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "SimTim: ";
    Printer<double>::stream(s, indent + "  ", v.SimTim);
    s << indent << "Position_x: ";
    Printer<double>::stream(s, indent + "  ", v.Position_x);
    s << indent << "Position_y: ";
    Printer<double>::stream(s, indent + "  ", v.Position_y);
    s << indent << "Velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.Velocity_x);
    s << indent << "Velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.Velocity_y);
    s << indent << "Accel_x: ";
    Printer<double>::stream(s, indent + "  ", v.Accel_x);
    s << indent << "Accel_y: ";
    Printer<double>::stream(s, indent + "  ", v.Accel_y);
    s << indent << "Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw);
    s << indent << "Angular_velocity_z: ";
    Printer<double>::stream(s, indent + "  ", v.Angular_velocity_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_CICV_LOCATION_H
