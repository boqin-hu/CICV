// Generated by gencpp from file msg_gen/gps.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_GPS_H
#define MSG_GEN_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct gps_
{
  typedef gps_<ContainerAllocator> Type;

  gps_()
    : posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , oriX(0.0)
    , oriY(0.0)
    , oriZ(0.0)
    , velX(0.0)
    , velY(0.0)
    , velZ(0.0)
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)
    , gear(0)
    , accelX(0.0)
    , accelY(0.0)
    , accelZ(0.0)
    , angVelX(0.0)
    , angVelY(0.0)
    , angVelZ(0.0)
    , wheelSpeedFL(0.0)
    , wheelSpeedFR(0.0)
    , wheelSpeedRL(0.0)
    , wheelSpeedRR(0.0)
    , engineRpm(0.0)
    , odometer(0.0)
    , extraStateSize(0)
    , extraStates()  {
    }
  gps_(const ContainerAllocator& _alloc)
    : posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , oriX(0.0)
    , oriY(0.0)
    , oriZ(0.0)
    , velX(0.0)
    , velY(0.0)
    , velZ(0.0)
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)
    , gear(0)
    , accelX(0.0)
    , accelY(0.0)
    , accelZ(0.0)
    , angVelX(0.0)
    , angVelY(0.0)
    , angVelZ(0.0)
    , wheelSpeedFL(0.0)
    , wheelSpeedFR(0.0)
    , wheelSpeedRL(0.0)
    , wheelSpeedRR(0.0)
    , engineRpm(0.0)
    , odometer(0.0)
    , extraStateSize(0)
    , extraStates(_alloc)  {
  (void)_alloc;
    }



   typedef double _posX_type;
  _posX_type posX;

   typedef double _posY_type;
  _posY_type posY;

   typedef double _posZ_type;
  _posZ_type posZ;

   typedef double _oriX_type;
  _oriX_type oriX;

   typedef double _oriY_type;
  _oriY_type oriY;

   typedef double _oriZ_type;
  _oriZ_type oriZ;

   typedef double _velX_type;
  _velX_type velX;

   typedef double _velY_type;
  _velY_type velY;

   typedef double _velZ_type;
  _velZ_type velZ;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef double _brake_type;
  _brake_type brake;

   typedef double _steering_type;
  _steering_type steering;

   typedef int32_t _gear_type;
  _gear_type gear;

   typedef double _accelX_type;
  _accelX_type accelX;

   typedef double _accelY_type;
  _accelY_type accelY;

   typedef double _accelZ_type;
  _accelZ_type accelZ;

   typedef double _angVelX_type;
  _angVelX_type angVelX;

   typedef double _angVelY_type;
  _angVelY_type angVelY;

   typedef double _angVelZ_type;
  _angVelZ_type angVelZ;

   typedef double _wheelSpeedFL_type;
  _wheelSpeedFL_type wheelSpeedFL;

   typedef double _wheelSpeedFR_type;
  _wheelSpeedFR_type wheelSpeedFR;

   typedef double _wheelSpeedRL_type;
  _wheelSpeedRL_type wheelSpeedRL;

   typedef double _wheelSpeedRR_type;
  _wheelSpeedRR_type wheelSpeedRR;

   typedef double _engineRpm_type;
  _engineRpm_type engineRpm;

   typedef double _odometer_type;
  _odometer_type odometer;

   typedef int32_t _extraStateSize_type;
  _extraStateSize_type extraStateSize;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _extraStates_type;
  _extraStates_type extraStates;





  typedef boost::shared_ptr< ::msg_gen::gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::gps_<ContainerAllocator> const> ConstPtr;

}; // struct gps_

typedef ::msg_gen::gps_<std::allocator<void> > gps;

typedef boost::shared_ptr< ::msg_gen::gps > gpsPtr;
typedef boost::shared_ptr< ::msg_gen::gps const> gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::gps_<ContainerAllocator1> & lhs, const ::msg_gen::gps_<ContainerAllocator2> & rhs)
{
  return lhs.posX == rhs.posX &&
    lhs.posY == rhs.posY &&
    lhs.posZ == rhs.posZ &&
    lhs.oriX == rhs.oriX &&
    lhs.oriY == rhs.oriY &&
    lhs.oriZ == rhs.oriZ &&
    lhs.velX == rhs.velX &&
    lhs.velY == rhs.velY &&
    lhs.velZ == rhs.velZ &&
    lhs.throttle == rhs.throttle &&
    lhs.brake == rhs.brake &&
    lhs.steering == rhs.steering &&
    lhs.gear == rhs.gear &&
    lhs.accelX == rhs.accelX &&
    lhs.accelY == rhs.accelY &&
    lhs.accelZ == rhs.accelZ &&
    lhs.angVelX == rhs.angVelX &&
    lhs.angVelY == rhs.angVelY &&
    lhs.angVelZ == rhs.angVelZ &&
    lhs.wheelSpeedFL == rhs.wheelSpeedFL &&
    lhs.wheelSpeedFR == rhs.wheelSpeedFR &&
    lhs.wheelSpeedRL == rhs.wheelSpeedRL &&
    lhs.wheelSpeedRR == rhs.wheelSpeedRR &&
    lhs.engineRpm == rhs.engineRpm &&
    lhs.odometer == rhs.odometer &&
    lhs.extraStateSize == rhs.extraStateSize &&
    lhs.extraStates == rhs.extraStates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::gps_<ContainerAllocator1> & lhs, const ::msg_gen::gps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::gps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbb6cfd8f99e6d665a1542a3424b2ed6";
  }

  static const char* value(const ::msg_gen::gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbb6cfd8f99e6d66ULL;
  static const uint64_t static_value2 = 0x5a1542a3424b2ed6ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/gps";
  }

  static const char* value(const ::msg_gen::gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "	float64 posX\n"
"	float64 posY\n"
"	float64 posZ\n"
"	float64 oriX\n"
"	float64 oriY\n"
"	float64 oriZ\n"
"	float64 velX\n"
"	float64 velY\n"
"	float64 velZ\n"
"	float64 throttle\n"
"	float64 brake\n"
"	float64 steering\n"
"	int32 gear\n"
"	float64 accelX\n"
"	float64 accelY\n"
"	float64 accelZ\n"
"	float64 angVelX\n"
"	float64 angVelY\n"
"	float64 angVelZ\n"
"	float64 wheelSpeedFL\n"
"	float64 wheelSpeedFR\n"
"	float64 wheelSpeedRL\n"
"	float64 wheelSpeedRR\n"
"	float64 engineRpm\n"
"	float64 odometer\n"
"	int32 extraStateSize\n"
"	float64[] extraStates\n"
;
  }

  static const char* value(const ::msg_gen::gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posX);
      stream.next(m.posY);
      stream.next(m.posZ);
      stream.next(m.oriX);
      stream.next(m.oriY);
      stream.next(m.oriZ);
      stream.next(m.velX);
      stream.next(m.velY);
      stream.next(m.velZ);
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.steering);
      stream.next(m.gear);
      stream.next(m.accelX);
      stream.next(m.accelY);
      stream.next(m.accelZ);
      stream.next(m.angVelX);
      stream.next(m.angVelY);
      stream.next(m.angVelZ);
      stream.next(m.wheelSpeedFL);
      stream.next(m.wheelSpeedFR);
      stream.next(m.wheelSpeedRL);
      stream.next(m.wheelSpeedRR);
      stream.next(m.engineRpm);
      stream.next(m.odometer);
      stream.next(m.extraStateSize);
      stream.next(m.extraStates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::gps_<ContainerAllocator>& v)
  {
    s << indent << "posX: ";
    Printer<double>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<double>::stream(s, indent + "  ", v.posY);
    s << indent << "posZ: ";
    Printer<double>::stream(s, indent + "  ", v.posZ);
    s << indent << "oriX: ";
    Printer<double>::stream(s, indent + "  ", v.oriX);
    s << indent << "oriY: ";
    Printer<double>::stream(s, indent + "  ", v.oriY);
    s << indent << "oriZ: ";
    Printer<double>::stream(s, indent + "  ", v.oriZ);
    s << indent << "velX: ";
    Printer<double>::stream(s, indent + "  ", v.velX);
    s << indent << "velY: ";
    Printer<double>::stream(s, indent + "  ", v.velY);
    s << indent << "velZ: ";
    Printer<double>::stream(s, indent + "  ", v.velZ);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
    s << indent << "accelX: ";
    Printer<double>::stream(s, indent + "  ", v.accelX);
    s << indent << "accelY: ";
    Printer<double>::stream(s, indent + "  ", v.accelY);
    s << indent << "accelZ: ";
    Printer<double>::stream(s, indent + "  ", v.accelZ);
    s << indent << "angVelX: ";
    Printer<double>::stream(s, indent + "  ", v.angVelX);
    s << indent << "angVelY: ";
    Printer<double>::stream(s, indent + "  ", v.angVelY);
    s << indent << "angVelZ: ";
    Printer<double>::stream(s, indent + "  ", v.angVelZ);
    s << indent << "wheelSpeedFL: ";
    Printer<double>::stream(s, indent + "  ", v.wheelSpeedFL);
    s << indent << "wheelSpeedFR: ";
    Printer<double>::stream(s, indent + "  ", v.wheelSpeedFR);
    s << indent << "wheelSpeedRL: ";
    Printer<double>::stream(s, indent + "  ", v.wheelSpeedRL);
    s << indent << "wheelSpeedRR: ";
    Printer<double>::stream(s, indent + "  ", v.wheelSpeedRR);
    s << indent << "engineRpm: ";
    Printer<double>::stream(s, indent + "  ", v.engineRpm);
    s << indent << "odometer: ";
    Printer<double>::stream(s, indent + "  ", v.odometer);
    s << indent << "extraStateSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.extraStateSize);
    s << indent << "extraStates[]" << std::endl;
    for (size_t i = 0; i < v.extraStates.size(); ++i)
    {
      s << indent << "  extraStates[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.extraStates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_GPS_H
